{
  "address": "0xC05bf37E589Ba20d2f416E9611cE1DAf1bf686a5",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_daoController",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "prevDAOController",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "daoController",
          "type": "address"
        }
      ],
      "name": "DAOControllerUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "flag",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "index",
          "type": "uint8"
        }
      ],
      "name": "FlagAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "flag",
          "type": "bytes32"
        }
      ],
      "name": "FlagRemoved",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_flag",
          "type": "bytes32"
        },
        {
          "internalType": "uint8",
          "name": "_index",
          "type": "uint8"
        }
      ],
      "name": "addFlag",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "_flags",
          "type": "bytes32[]"
        },
        {
          "internalType": "uint8[]",
          "name": "_indexes",
          "type": "uint8[]"
        }
      ],
      "name": "addFlags",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "daoController",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "flagIndexes",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_flag",
          "type": "bytes32"
        }
      ],
      "name": "isFlagSupported",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "_flags",
          "type": "bytes32[]"
        }
      ],
      "name": "isFlagsSupported",
      "outputs": [
        {
          "internalType": "bool[]",
          "name": "",
          "type": "bool[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_flag",
          "type": "bytes32"
        }
      ],
      "name": "removeFlag",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "_flags",
          "type": "bytes32[]"
        }
      ],
      "name": "removeFlags",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "supportedFlagsMask",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unsupportedFlagsMask",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newDAOController",
          "type": "address"
        }
      ],
      "name": "updateDAOManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x3c228d7b6437563f6bb24985da4b0cbfbb602d4bff1634d945fbbd4e301d419d",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x74489ac99AE3cE1428Ce8C8dBE374CFFc009081E",
    "contractAddress": null,
    "transactionIndex": 170,
    "gasUsed": "796321",
    "logsBloom": "0x
    "blockHash": "0x868cae313bad0911d16225a1ee5a6e501da616cacb65446ebed2bd006295b7ec",
    "transactionHash": "0x3c228d7b6437563f6bb24985da4b0cbfbb602d4bff1634d945fbbd4e301d419d",
    "logs": [],
    "blockNumber": 15173807,
    "cumulativeGasUsed": "15065598",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x74489ac99AE3cE1428Ce8C8dBE374CFFc009081E"
  ],
  "solcInputHash": "b91b177a56dfa38137b4f6e499ef3c98",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_daoController\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"prevDAOController\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"daoController\",\"type\":\"address\"}],\"name\":\"DAOControllerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"flag\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"index\",\"type\":\"uint8\"}],\"name\":\"FlagAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"flag\",\"type\":\"bytes32\"}],\"name\":\"FlagRemoved\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_flag\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"_index\",\"type\":\"uint8\"}],\"name\":\"addFlag\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_flags\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint8[]\",\"name\":\"_indexes\",\"type\":\"uint8[]\"}],\"name\":\"addFlags\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daoController\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"flagIndexes\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_flag\",\"type\":\"bytes32\"}],\"name\":\"isFlagSupported\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_flags\",\"type\":\"bytes32[]\"}],\"name\":\"isFlagsSupported\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_flag\",\"type\":\"bytes32\"}],\"name\":\"removeFlag\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_flags\",\"type\":\"bytes32[]\"}],\"name\":\"removeFlags\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"supportedFlagsMask\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unsupportedFlagsMask\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newDAOController\",\"type\":\"address\"}],\"name\":\"updateDAOManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"FlagsStorage is the main contract to store KYC-related flags for Gateway Token System. KYC flags are identifiable by short identifiers in bytes32 strings. After adding flags  those bit indexes could be used by GatewayToken implementations to associate flags per token.\",\"kind\":\"dev\",\"methods\":{\"addFlag(bytes32,uint8)\":{\"details\":\"Triggers to add new flag into gateway token system\",\"params\":{\"_flag\":\"Flag short identifier\",\"_index\":\"Flag index (limited to 255)\"}},\"addFlags(bytes32[],uint8[])\":{\"details\":\"Triggers to add multiple flags into gateway token system\",\"params\":{\"_flags\":\"Array of flag short identifiers\",\"_indexes\":\"Array of flag indexes (limited to 255)\"}},\"isFlagSupported(bytes32)\":{\"details\":\"Triggers to check if a particular flag is supported\",\"params\":{\"_flag\":\"Flag short identifier\"},\"returns\":{\"_0\":\"Boolean for flag support\"}},\"isFlagsSupported(bytes32[])\":{\"details\":\"Triggers to check if several flags are supported\",\"params\":{\"_flags\":\"Array of flags\"},\"returns\":{\"_0\":\"Array of booleans with support per flag\"}},\"removeFlag(bytes32)\":{\"details\":\"Triggers to remove existing flag from gateway token system\",\"params\":{\"_flag\":\"Flag short identifier\"}},\"removeFlags(bytes32[])\":{\"details\":\"Triggers to remove multiple existing flags from gateway token system\",\"params\":{\"_flags\":\"Array of flag short identifiers\"}},\"updateDAOManager(address)\":{\"details\":\"Triggers to transfer ownership of this contract to new DAO Controller, reverts on zero address and wallet addresses\",\"params\":{\"_newDAOController\":\"New DAO Controller contract address\"}}},\"stateVariables\":{\"daoController\":{\"details\":\"Triggers to get DAO Controller address\"},\"flagIndexes\":{\"details\":\"Triggers to get flag index from flags mapping\"},\"supportedFlagsMask\":{\"details\":\"Triggers to get bitmask of all supported flags\"},\"unsupportedFlagsMask\":{\"details\":\"Triggers to get bitmask of all unsupported flags\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addFlag(bytes32,uint8)\":{\"notice\":\"Only executed by existing DAO Manager\"},\"addFlags(bytes32[],uint8[])\":{\"notice\":\"Only executed by existing DAO Manager\"},\"removeFlag(bytes32)\":{\"notice\":\"Only executed by existing DAO Manager\"},\"removeFlags(bytes32[])\":{\"notice\":\"Only executed by existing DAO Manager\"},\"updateDAOManager(address)\":{\"notice\":\"Only executed by existing DAO Manager\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FlagsStorage.sol\":\"FlagsStorage\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xacac2065b3ed1facff1163435890d4a6bcdc474e857e8e2c91ae5fb50418f723\",\"license\":\"MIT\"},\"contracts/FlagsStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"./interfaces/IGatewayTokenController.sol\\\";\\nimport \\\"./interfaces/IFlagsStorage.sol\\\";\\nimport \\\"./library/BitMask.sol\\\";\\n\\n/**\\n * @dev FlagsStorage is the main contract to store KYC-related flags for Gateway Token System.\\n * KYC flags are identifiable by short identifiers in bytes32 strings. After adding flags \\n * those bit indexes could be used by GatewayToken implementations to associate flags per token.\\n */\\ncontract FlagsStorage is IFlagsStorage {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n    using Address for address;\\n    using BitMask for uint256;\\n\\n    EnumerableSet.Bytes32Set private supportedFlags;\\n    address public override daoController;\\n\\n    uint256 public override supportedFlagsMask;\\n    uint256 public override unsupportedFlagsMask;\\n\\n    mapping(bytes32 => uint8) public override flagIndexes;\\n\\n    // @dev Modifier to prevent calls from anyone except Identity.com Admin\\n    modifier onlyDAOController() {\\n        require(msg.sender == daoController, \\\"NOT DAO ADDRESS\\\");\\n        _;\\n    }\\n\\n    constructor(address _daoController) public {\\n        // require(_daoController.isContract(), \\\"DAO CONTROLLER IS NOT A CONTRACT\\\");\\n        daoController = _daoController;\\n    }\\n\\n    /**\\n    * @dev Triggers to transfer ownership of this contract to new DAO Controller, reverts on zero address and wallet addresses\\n    * @param _newDAOController New DAO Controller contract address\\n    * @notice Only executed by existing DAO Manager\\n    */\\n    function updateDAOManager(address _newDAOController) onlyDAOController public override {\\n        require(_newDAOController != address(0), \\\"NEW DAO CONTROLLER IS ZERO ADDRESS\\\");\\n        require(_newDAOController.isContract(), \\\"NEW DAO CONTROLLER IS NOT A CONTRACT\\\");\\n\\n        emit DAOControllerUpdated(daoController, _newDAOController);\\n        daoController = _newDAOController;\\n    }\\n\\n    /**\\n    * @dev Triggers to add new flag into gateway token system\\n    * @param _flag Flag short identifier\\n    * @param _index Flag index (limited to 255)\\n    * @notice Only executed by existing DAO Manager\\n    */\\n    function addFlag(bytes32 _flag, uint8 _index) onlyDAOController public override {\\n        _addFlag(_flag, _index);\\n    }\\n\\n    /**\\n    * @dev Triggers to add multiple flags into gateway token system\\n    * @param _flags Array of flag short identifiers\\n    * @param _indexes Array of flag indexes (limited to 255)\\n    * @notice Only executed by existing DAO Manager\\n    */\\n    function addFlags(bytes32[] memory _flags, uint8[] memory _indexes) onlyDAOController public override {\\n        require(_flags.length == _indexes.length, \\\"Incorect variables length\\\");\\n\\n        for (uint8 i = 0; i < _flags.length; i++) {\\n            _addFlag(_flags[i], _indexes[i]);\\n        }\\n    }\\n\\n    /**\\n    * @dev Triggers to remove existing flag from gateway token system\\n    * @param _flag Flag short identifier\\n    * @notice Only executed by existing DAO Manager\\n    */\\n    function removeFlag(bytes32 _flag) onlyDAOController public override {\\n        require(supportedFlags.contains(_flag), \\\"Flag not supported\\\"); // additional check to reduce incorrect FlagRemoved event\\n\\n        _removeFlag(_flag);\\n    }\\n\\n    /**\\n    * @dev Triggers to remove multiple existing flags from gateway token system\\n    * @param _flags Array of flag short identifiers\\n    * @notice Only executed by existing DAO Manager\\n    */\\n    function removeFlags(bytes32[] memory _flags) onlyDAOController public override {\\n        for (uint8 i = 0; i < _flags.length; i++) {\\n            require(supportedFlags.contains(_flags[i]), \\\"Flag not supported\\\"); // additional check to reduce incorrect FlagRemoved events\\n\\n            _removeFlag(_flags[i]);\\n        }\\n    }\\n\\n    /**\\n    * @dev Triggers to check if a particular flag is supported\\n    * @param _flag Flag short identifier\\n    * @return Boolean for flag support\\n    */\\n    function isFlagSupported(bytes32 _flag) public view override returns (bool) {\\n        return supportedFlags.contains(_flag);\\n    }\\n\\n    /**\\n    * @dev Triggers to check if several flags are supported\\n    * @param _flags Array of flags\\n    * @return Array of booleans with support per flag\\n    */\\n    function isFlagsSupported(bytes32[] memory _flags) public view override returns (bool[] memory) {\\n        uint len = _flags.length;\\n        bool[] memory result = new bool[](len);\\n\\n        for (uint8 i = 0; i < _flags.length; i++) {\\n            result[i] = supportedFlags.contains(_flags[i]);\\n        }\\n\\n        return result;\\n    }\\n\\n    /**\\n    * @dev Internal function to add new flag\\n    */\\n    function _addFlag(bytes32 _flag, uint8 _index) internal {\\n        require(!supportedFlagsMask.checkBit(_index), \\\"Index already used\\\");\\n        require(!supportedFlags.contains(_flag), \\\"Flag already exist\\\");\\n\\n        if (unsupportedFlagsMask.checkBit(_index)) {\\n            unsupportedFlagsMask = unsupportedFlagsMask.clearBit(_index);\\n        }\\n\\n        flagIndexes[_flag] = _index;\\n        supportedFlags.add(_flag);\\n        supportedFlagsMask = supportedFlagsMask.setBit(_index);\\n\\n        emit FlagAdded(_flag, _index);\\n    }\\n\\n    /**\\n    * @dev Internal function to remove existing flag\\n    */\\n    function _removeFlag(bytes32 _flag) internal {\\n        supportedFlags.remove(_flag);\\n        uint8 _index = flagIndexes[_flag];\\n\\n        supportedFlagsMask = supportedFlagsMask.clearBit(_index);\\n        unsupportedFlagsMask = unsupportedFlagsMask.setBit(_index);\\n        delete flagIndexes[_flag];\\n\\n        emit FlagRemoved(_flag);\\n    }\\n}\",\"keccak256\":\"0xdaba2cdb012b8ed40913d8f69d208ba8203e98e72dd66bde16614d6918a1fd06\",\"license\":\"MIT\"},\"contracts/interfaces/IFlagsStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\n\\ninterface IFlagsStorage {\\n\\n    /**\\n    * @dev Emitted when DAO Controller is updated from `prevDAOController` to `daoController`.\\n    */\\n    event DAOControllerUpdated(\\n        address indexed prevDAOController,\\n        address indexed daoController\\n    );\\n\\n    /**\\n    * @dev Emitted when new flag is added with `flag` short code and `index`.\\n    */\\n    event FlagAdded(bytes32 indexed flag, uint8 index);\\n\\n    /**\\n    * @dev Emitted when existing flag is removed from FlagsStorage by `flag` short code.\\n    */\\n    event FlagRemoved(bytes32 indexed flag);\\n\\n    /**\\n    * @dev Triggers to add new flag into gateway token system\\n    * @param _flag Flag short identifier\\n    * @param _index Flag index (limited to 255)\\n    * @notice Only executed by existing DAO Manager\\n    */\\n    function addFlag(bytes32 _flag, uint8 _index) external;\\n\\n    /**\\n    * @dev Triggers to add multiple flags into gateway token system\\n    * @param _flags Array of flag short identifiers\\n    * @param _indexes Array of flag indexes (limited to 255)\\n    * @notice Only executed by existing DAO Manager\\n    */\\n    function addFlags(bytes32[] memory _flags, uint8[] memory _indexes) external;\\n\\n    /**\\n    * @dev Triggers to get DAO Controller address\\n    */\\n    function daoController() external view returns (address);\\n\\n    /**\\n    * @dev Triggers to get flag index from flags mapping\\n    */\\n    function flagIndexes(bytes32) external view returns (uint8);\\n\\n    /**\\n    * @dev Triggers to check if a particular flag is supported\\n    * @param _flag Flag short identifier\\n    * @return Boolean for flag support\\n    */\\n    function isFlagSupported(bytes32 _flag) external view returns (bool);\\n\\n    /**\\n    * @dev Triggers to check if several flags are supported\\n    * @param _flags Array of flags\\n    * @return Array of booleans with support per flag\\n    */\\n    function isFlagsSupported(bytes32[] memory _flags)\\n        external\\n        view\\n        returns (bool[] memory);\\n\\n    /**\\n    * @dev Triggers to remove existing flag from gateway token system\\n    * @param _flag Flag short identifier\\n    * @notice Only executed by existing DAO Manager\\n    */\\n    function removeFlag(bytes32 _flag) external;\\n\\n    /**\\n    * @dev Triggers to remove multiple existing flags from gateway token system\\n    * @param _flags Array of flag short identifiers\\n    * @notice Only executed by existing DAO Manager\\n    */\\n    function removeFlags(bytes32[] memory _flags) external;\\n\\n    /**\\n    * @dev Triggers to get bitmask of all supported flags\\n    */\\n    function supportedFlagsMask() external view returns (uint256);\\n\\n    /**\\n    * @dev Triggers to get bitmask of all unsupported flags\\n    */\\n    function unsupportedFlagsMask() external view returns (uint256);\\n\\n    /**\\n    * @dev Triggers to transfer ownership of this contract to new DAO Controller, reverts on zero address and wallet addresses\\n    * @param _newDAOController New DAO Controller contract address\\n    * @notice Only executed by existing DAO Manager\\n    */\\n    function updateDAOManager(address _newDAOController) external;\\n}\",\"keccak256\":\"0x117dbad139abc1d34620105fc8b2f29e9be3b4bb3e821c5fc04c0bce5300b338\",\"license\":\"MIT\"},\"contracts/interfaces/IGatewayTokenController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\n\\ninterface IGatewayTokenController {\\n    /**\\n    * @dev Emitted when Identity.com Admin transfered from `previousAdmin` to `admin`.\\n    */\\n    event AdminTransfered(address indexed previousAdmin, address indexed admin);\\n\\n    /**\\n    * @dev Emitted when Identity.com Admin updated FlagsStorage contract address from `previousFlagsStorage` to `flagsStorage`.\\n    */\\n    event FlagsStorageUpdated(address indexed previousFlagsStorage, address indexed flagsStorage);\\n\\n    /**\\n    * @dev Emitted when new GatewayToken contract deployed with \\n    * associated `name` and `symbol` to specific `address`.\\n    */\\n    event GatekeeperNetworkCreated(address indexed tokenAddress, string name, string symbol, address deployer);\\n\\n    /**\\n    * @dev Emitted when GatewayTokens allowed to transfer for token owners by `account`.\\n    */\\n    event TransfersAcceptedBatch(address[] tokens, address account);\\n\\n    /**\\n    * @dev Emitted when GatewayTokens restricted to transfer for token owners by `account`.\\n    */\\n    event TransfersRestrictedBatch(address[] tokens, address account);\\n\\n    /**\\n    * @dev Emitted when `user` address is blocked to own tokens in any GatewayToken contract.\\n    */\\n    event Blacklisted(address indexed user);\\n\\n    /**\\n    * @dev Emitted when multiple `users` addresses is blocked to own tokens in any GatewayToken contract.\\n    */\\n    event BlacklistedBatch(address[] users);\\n\\n    /**\\n    * @dev Triggers to get Identity.com System Admin\\n    */\\n    function identityAdmin() external view returns (address);\\n\\n    /**\\n    * @dev Transfers Gateway Token system admin access in case Identity.com changes the main management address\\n    * @param newAdmin Address to transfer admin role for.\\n    */\\n    function transferAdmin(address newAdmin) external;\\n\\n    /**\\n    * @dev Accepts owner's transfers for specified gateway tokens\\n    * @param tokens Gateway Token contracts address array\\n    */\\n    function acceptTransfersBatch(address[] memory tokens) external;\\n\\n    /**\\n    * @dev Restricts owner's transfers for specified gateway tokens\\n    * @param tokens Gateway Token contracts address array\\n    */\\n    function restrictTransfersBatch(address[] memory tokens) external;\\n\\n    /**\\n    * @dev Blacklists specified `user` completely, user can't get KYC verification on any gateway token networks.\\n    * @param user Address to blacklist.\\n    *\\n    * @notice Once user is blacklisted there is no way to whitelist, please use this function carefully.\\n    */\\n    function blacklist(address user) external;\\n\\n    /**\\n    * @dev Blacklist multiple `users`, user can't get KYC verification on any gateway token networks.\\n    * @param users User addresses to blacklist.\\n    *\\n    * @notice Once user is blacklisted there is no way to whitelist, please use this function carefully.\\n    */\\n    function blacklistBatch(address[] memory users) external;\\n\\n    /**\\n    * @dev Checks if specified `user` blacklisted completely. \\n    * If user blacklisted gateway token clients not able to verify identity, \\n    * and gatekeepers have to burn tokens owned by blacklisted users.\\n    *\\n    * @param user Address to check.\\n    */\\n    function isBlacklisted(address user) external view returns (bool);\\n\\n    /**\\n    * @dev Deploys new Gateway Token and save address at gatewayTokens address set.\\n    * @param _name Gateway Token name\\n    * @param _symbol Gateway Token symbol\\n    */\\n    function createGatekeeperNetwork(string memory _name, string memory _symbol, bool _isDAOGoverned, address _daoExecutor, address trustedForwarder) external returns (address tokenAddress);\\n\\n    /**\\n    * @dev Triggers to add multiple network authorities in gateway token contract. \\n    * @param token Gateway Token contract address\\n    * @param authorities Network Authorities array\\n    *\\n    * @notice Only triggered by identityAdmin\\n    */\\n    function addNetworkAuthorities(address token, address[] memory authorities) external;\\n\\n    /**\\n    * @dev Triggers to remove multiple network authorities in gateway token contract. \\n    * @param token Gateway Token contract address\\n    * @param authorities Network Authorities array\\n    *\\n    * @notice Only triggered by identityAdmin\\n    */\\n    function removeNetworkAuthorities(address token, address[] memory authorities) external;\\n}\",\"keccak256\":\"0x13f50a414ded5c801023c4acf0c82cb3bed1fb22163c30174c6ca4cd2ecc9de0\",\"license\":\"MIT\"},\"contracts/library/BitMask.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nlibrary BitMask {\\n\\n    uint constant internal ONE = uint256(1);\\n    uint constant internal ONES = ~uint256(0);\\n\\n    /**\\n    * @dev Internal function to set 1 bit in specific `index`\\n    * @return Updated bitmask with modified bit at `index`\\n    */\\n    function setBit(uint256 self, uint8 index) internal pure returns (uint256) {\\n        return self | ONE << index;\\n    }\\n\\n    /**\\n    * @dev Internal function to clear bit to 0 in specific `index`\\n    * @return Updated bitmask with modified bit at `index`\\n    */\\n    function clearBit(uint256 self, uint8 index) internal pure returns (uint256) {\\n        return self & ~(ONE << index);\\n    }\\n\\n    /**\\n    * @dev Internal function to check bit at specific `index`\\n    * @return Returns TRUE if bit is '1', FALSE otherwise\\n    */\\n    function checkBit(uint256 self, uint8 index) internal pure returns (bool) {\\n        return (self & (uint256(1) << index)) > 0;\\n    }\\n\\n    /**\\n    * @dev Internal function to apply NOT operator for a bit in specific `index`\\n    * If the original bit is '1' sets bit to '0'\\n    * If the original bit is '0' sets bit to '1'\\n    * @return Updated bitmask with modified bit at `index`\\n    */\\n    function toggleBit(uint256 self, uint8 index) internal pure returns (uint256) {\\n        return self ^ ONE << index;\\n    }\\n\\n    /**\\n    * @dev AND operator between two bitmasks:\\n    * '0' AND '0' -> '0'\\n    * '0' AND '1' -> '0'\\n    * '1' AND '0' -> '0'\\n    * '1' AND '1' -> '1'\\n    */\\n    function and(uint256 self, uint256 mask) internal pure returns (uint256) {\\n        return self & mask;\\n    }\\n    \\n    /**\\n    * @dev OR operator between two bitmasks:\\n    * '0' OR '0' -> '0'\\n    * '0' OR '1' -> '1'\\n    * '1' OR '0' -> '1'\\n    * '1' OR '1' -> '1'\\n    */\\n    function or(uint256 self, uint256 mask) internal pure returns (uint256) {\\n        return self | mask;\\n    }\\n    \\n    /**\\n    * @dev XOR operator between two bitmasks:\\n    * '0' XOR '0' -> '0'\\n    * '0' XOR '1' -> '1'\\n    * '1' XOR '0' -> '1'\\n    * '1' XOR '1' -> '0'\\n    */\\n    function xor(uint256 self, uint256 mask) internal pure returns (uint256) {\\n        return self ^ mask;\\n    }\\n    \\n    /**\\n    * @dev NOT operator:\\n    * '0' NOT -> '1'\\n    * '1' NOT -> '0'\\n    */\\n    function negate(uint256 self) internal pure returns (uint256) {\\n        return self ^ ONES;\\n    }\\n\\n    /**\\n    * @dev NOT operator:\\n    * '0' NOT -> '1'\\n    * '1' NOT -> '0'\\n    */\\n    function not(uint256 self) internal pure returns (uint256) {\\n        return ~self;\\n    }\\n    \\n    /**\\n    * @dev Left shift of `self` bitmask by `index`:\\n    */\\n    function shiftLeft(uint256 self, uint8 index) internal pure returns (uint256) {\\n        return self << index;\\n    }\\n    \\n    /**\\n    * @dev Left shift of `self` bitmask by `index`:\\n    */\\n    function shiftRight(uint256 self, uint8 index) internal pure returns (uint256) {\\n        return self >> index;\\n    }\\n}\",\"keccak256\":\"0x5217012189ce0d093b5cce577d064b9ddb8e6c7163a3fb0f234bfe9cba3bb505\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051610d8c380380610d8c83398101604081905261002f91610054565b600280546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b610cf9806100936000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80638e7de730116100715780638e7de73014610141578063a3d0bb2a14610154578063a64a095614610177578063b3b48bc21461018a578063d48de6221461019d578063d9478c9c146101c857600080fd5b8063012099e9146100ae578063243da6a7146100d75780633551f2e3146100ee5780634d78e55a14610103578063661870b11461010c575b600080fd5b6100c16100bc366004610a58565b6101db565b6040516100ce9190610a95565b60405180910390f35b6100e060035481565b6040519081526020016100ce565b6101016100fc366004610a58565b6102a5565b005b6100e060045481565b61012f61011a366004610adb565b60056020526000908152604090205460ff1681565b60405160ff90911681526020016100ce565b61010161014f366004610adb565b61037b565b610167610162366004610adb565b6103fd565b60405190151581526020016100ce565b610101610185366004610b0a565b61040f565b610101610198366004610b36565b610443565b6002546101b0906001600160a01b031681565b6040516001600160a01b0390911681526020016100ce565b6101016101d6366004610bf8565b610526565b805160609060008167ffffffffffffffff8111156101fb576101fb610982565b604051908082528060200260200182016040528015610224578160200160208202803683370190505b50905060005b84518160ff16101561029d57610266858260ff168151811061024e5761024e610c21565b6020026020010151600061067090919063ffffffff16565b828260ff168151811061027b5761027b610c21565b911515602092830291909101909101528061029581610c4d565b91505061022a565b509392505050565b6002546001600160a01b031633146102d85760405162461bcd60e51b81526004016102cf90610c6d565b60405180910390fd5b60005b81518160ff161015610377576102ff828260ff168151811061024e5761024e610c21565b6103405760405162461bcd60e51b8152602060048201526012602482015271119b1859c81b9bdd081cdd5c1c1bdc9d195960721b60448201526064016102cf565b610365828260ff168151811061035857610358610c21565b602002602001015161068b565b8061036f81610c4d565b9150506102db565b5050565b6002546001600160a01b031633146103a55760405162461bcd60e51b81526004016102cf90610c6d565b6103b0600082610670565b6103f15760405162461bcd60e51b8152602060048201526012602482015271119b1859c81b9bdd081cdd5c1c1bdc9d195960721b60448201526064016102cf565b6103fa8161068b565b50565b60006104098183610670565b92915050565b6002546001600160a01b031633146104395760405162461bcd60e51b81526004016102cf90610c6d565b61037782826106fe565b6002546001600160a01b0316331461046d5760405162461bcd60e51b81526004016102cf90610c6d565b80518251146104be5760405162461bcd60e51b815260206004820152601960248201527f496e636f72656374207661726961626c6573206c656e6774680000000000000060448201526064016102cf565b60005b82518160ff1610156105215761050f838260ff16815181106104e5576104e5610c21565b6020026020010151838360ff168151811061050257610502610c21565b60200260200101516106fe565b8061051981610c4d565b9150506104c1565b505050565b6002546001600160a01b031633146105505760405162461bcd60e51b81526004016102cf90610c6d565b6001600160a01b0381166105b15760405162461bcd60e51b815260206004820152602260248201527f4e45572044414f20434f4e54524f4c4c4552204953205a45524f204144445245604482015261535360f01b60648201526084016102cf565b6001600160a01b0381163b6106145760405162461bcd60e51b8152602060048201526024808201527f4e45572044414f20434f4e54524f4c4c4552204953204e4f54204120434f4e54604482015263149050d560e21b60648201526084016102cf565b6002546040516001600160a01b038084169216907fd762aaa784672d83e06643704b648e39604214f821b8761fa9812e17bfb0444990600090a3600280546001600160a01b0319166001600160a01b0392909216919091179055565b600081815260018301602052604081205415155b9392505050565b610696600082610828565b50600081815260056020526040808220805460038054600160ff90931692831b8019909116909155600480549091179055815460ff19169091559051909183917fb4e020b0ecc1c15088dc1d0790a96729268843758491c25d3fa0450d8a9ad34d9190a25050565b600354600160ff83161b161561074b5760405162461bcd60e51b8152602060048201526012602482015271125b99195e08185b1c9958591e481d5cd95960721b60448201526064016102cf565b610756600083610670565b156107985760405162461bcd60e51b8152602060048201526012602482015271119b1859c8185b1c9958591e48195e1a5cdd60721b60448201526064016102cf565b600454600160ff83161b16156107b857600454600160ff83161b19166004555b6000828152600560205260408120805460ff191660ff84161790556107dd9083610834565b50600354600160ff83161b1760035560405160ff8216815282907fdd0fa0fc5900cc449b60e07ecc54e117f3828a22f16d74c408c3d456d69f25fe9060200160405180910390a25050565b60006106848383610840565b60006106848383610933565b60008181526001830160205260408120548015610929576000610864600183610c96565b855490915060009061087890600190610c96565b90508181146108dd57600086600001828154811061089857610898610c21565b90600052602060002001549050808760000184815481106108bb576108bb610c21565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806108ee576108ee610cad565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610409565b6000915050610409565b600081815260018301602052604081205461097a57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610409565b506000610409565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156109c1576109c1610982565b604052919050565b600067ffffffffffffffff8211156109e3576109e3610982565b5060051b60200190565b600082601f8301126109fe57600080fd5b81356020610a13610a0e836109c9565b610998565b82815260059290921b84018101918181019086841115610a3257600080fd5b8286015b84811015610a4d5780358352918301918301610a36565b509695505050505050565b600060208284031215610a6a57600080fd5b813567ffffffffffffffff811115610a8157600080fd5b610a8d848285016109ed565b949350505050565b6020808252825182820181905260009190848201906040850190845b81811015610acf578351151583529284019291840191600101610ab1565b50909695505050505050565b600060208284031215610aed57600080fd5b5035919050565b803560ff81168114610b0557600080fd5b919050565b60008060408385031215610b1d57600080fd5b82359150610b2d60208401610af4565b90509250929050565b60008060408385031215610b4957600080fd5b823567ffffffffffffffff80821115610b6157600080fd5b610b6d868387016109ed565b9350602091508185013581811115610b8457600080fd5b85019050601f81018613610b9757600080fd5b8035610ba5610a0e826109c9565b81815260059190911b82018301908381019088831115610bc457600080fd5b928401925b82841015610be957610bda84610af4565b82529284019290840190610bc9565b80955050505050509250929050565b600060208284031215610c0a57600080fd5b81356001600160a01b038116811461068457600080fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060ff821660ff811415610c6457610c64610c37565b60010192915050565b6020808252600f908201526e4e4f542044414f204144445245535360881b604082015260600190565b600082821015610ca857610ca8610c37565b500390565b634e487b7160e01b600052603160045260246000fdfea26469706673582212206c50d85f51f1d7554a37eed9ad65f32861715b3777425222558f38accf87379c64736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100a95760003560e01c80638e7de730116100715780638e7de73014610141578063a3d0bb2a14610154578063a64a095614610177578063b3b48bc21461018a578063d48de6221461019d578063d9478c9c146101c857600080fd5b8063012099e9146100ae578063243da6a7146100d75780633551f2e3146100ee5780634d78e55a14610103578063661870b11461010c575b600080fd5b6100c16100bc366004610a58565b6101db565b6040516100ce9190610a95565b60405180910390f35b6100e060035481565b6040519081526020016100ce565b6101016100fc366004610a58565b6102a5565b005b6100e060045481565b61012f61011a366004610adb565b60056020526000908152604090205460ff1681565b60405160ff90911681526020016100ce565b61010161014f366004610adb565b61037b565b610167610162366004610adb565b6103fd565b60405190151581526020016100ce565b610101610185366004610b0a565b61040f565b610101610198366004610b36565b610443565b6002546101b0906001600160a01b031681565b6040516001600160a01b0390911681526020016100ce565b6101016101d6366004610bf8565b610526565b805160609060008167ffffffffffffffff8111156101fb576101fb610982565b604051908082528060200260200182016040528015610224578160200160208202803683370190505b50905060005b84518160ff16101561029d57610266858260ff168151811061024e5761024e610c21565b6020026020010151600061067090919063ffffffff16565b828260ff168151811061027b5761027b610c21565b911515602092830291909101909101528061029581610c4d565b91505061022a565b509392505050565b6002546001600160a01b031633146102d85760405162461bcd60e51b81526004016102cf90610c6d565b60405180910390fd5b60005b81518160ff161015610377576102ff828260ff168151811061024e5761024e610c21565b6103405760405162461bcd60e51b8152602060048201526012602482015271119b1859c81b9bdd081cdd5c1c1bdc9d195960721b60448201526064016102cf565b610365828260ff168151811061035857610358610c21565b602002602001015161068b565b8061036f81610c4d565b9150506102db565b5050565b6002546001600160a01b031633146103a55760405162461bcd60e51b81526004016102cf90610c6d565b6103b0600082610670565b6103f15760405162461bcd60e51b8152602060048201526012602482015271119b1859c81b9bdd081cdd5c1c1bdc9d195960721b60448201526064016102cf565b6103fa8161068b565b50565b60006104098183610670565b92915050565b6002546001600160a01b031633146104395760405162461bcd60e51b81526004016102cf90610c6d565b61037782826106fe565b6002546001600160a01b0316331461046d5760405162461bcd60e51b81526004016102cf90610c6d565b80518251146104be5760405162461bcd60e51b815260206004820152601960248201527f496e636f72656374207661726961626c6573206c656e6774680000000000000060448201526064016102cf565b60005b82518160ff1610156105215761050f838260ff16815181106104e5576104e5610c21565b6020026020010151838360ff168151811061050257610502610c21565b60200260200101516106fe565b8061051981610c4d565b9150506104c1565b505050565b6002546001600160a01b031633146105505760405162461bcd60e51b81526004016102cf90610c6d565b6001600160a01b0381166105b15760405162461bcd60e51b815260206004820152602260248201527f4e45572044414f20434f4e54524f4c4c4552204953205a45524f204144445245604482015261535360f01b60648201526084016102cf565b6001600160a01b0381163b6106145760405162461bcd60e51b8152602060048201526024808201527f4e45572044414f20434f4e54524f4c4c4552204953204e4f54204120434f4e54604482015263149050d560e21b60648201526084016102cf565b6002546040516001600160a01b038084169216907fd762aaa784672d83e06643704b648e39604214f821b8761fa9812e17bfb0444990600090a3600280546001600160a01b0319166001600160a01b0392909216919091179055565b600081815260018301602052604081205415155b9392505050565b610696600082610828565b50600081815260056020526040808220805460038054600160ff90931692831b8019909116909155600480549091179055815460ff19169091559051909183917fb4e020b0ecc1c15088dc1d0790a96729268843758491c25d3fa0450d8a9ad34d9190a25050565b600354600160ff83161b161561074b5760405162461bcd60e51b8152602060048201526012602482015271125b99195e08185b1c9958591e481d5cd95960721b60448201526064016102cf565b610756600083610670565b156107985760405162461bcd60e51b8152602060048201526012602482015271119b1859c8185b1c9958591e48195e1a5cdd60721b60448201526064016102cf565b600454600160ff83161b16156107b857600454600160ff83161b19166004555b6000828152600560205260408120805460ff191660ff84161790556107dd9083610834565b50600354600160ff83161b1760035560405160ff8216815282907fdd0fa0fc5900cc449b60e07ecc54e117f3828a22f16d74c408c3d456d69f25fe9060200160405180910390a25050565b60006106848383610840565b60006106848383610933565b60008181526001830160205260408120548015610929576000610864600183610c96565b855490915060009061087890600190610c96565b90508181146108dd57600086600001828154811061089857610898610c21565b90600052602060002001549050808760000184815481106108bb576108bb610c21565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806108ee576108ee610cad565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610409565b6000915050610409565b600081815260018301602052604081205461097a57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610409565b506000610409565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156109c1576109c1610982565b604052919050565b600067ffffffffffffffff8211156109e3576109e3610982565b5060051b60200190565b600082601f8301126109fe57600080fd5b81356020610a13610a0e836109c9565b610998565b82815260059290921b84018101918181019086841115610a3257600080fd5b8286015b84811015610a4d5780358352918301918301610a36565b509695505050505050565b600060208284031215610a6a57600080fd5b813567ffffffffffffffff811115610a8157600080fd5b610a8d848285016109ed565b949350505050565b6020808252825182820181905260009190848201906040850190845b81811015610acf578351151583529284019291840191600101610ab1565b50909695505050505050565b600060208284031215610aed57600080fd5b5035919050565b803560ff81168114610b0557600080fd5b919050565b60008060408385031215610b1d57600080fd5b82359150610b2d60208401610af4565b90509250929050565b60008060408385031215610b4957600080fd5b823567ffffffffffffffff80821115610b6157600080fd5b610b6d868387016109ed565b9350602091508185013581811115610b8457600080fd5b85019050601f81018613610b9757600080fd5b8035610ba5610a0e826109c9565b81815260059190911b82018301908381019088831115610bc457600080fd5b928401925b82841015610be957610bda84610af4565b82529284019290840190610bc9565b80955050505050509250929050565b600060208284031215610c0a57600080fd5b81356001600160a01b038116811461068457600080fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060ff821660ff811415610c6457610c64610c37565b60010192915050565b6020808252600f908201526e4e4f542044414f204144445245535360881b604082015260600190565b600082821015610ca857610ca8610c37565b500390565b634e487b7160e01b600052603160045260246000fdfea26469706673582212206c50d85f51f1d7554a37eed9ad65f32861715b3777425222558f38accf87379c64736f6c63430008090033",
  "devdoc": {
    "details": "FlagsStorage is the main contract to store KYC-related flags for Gateway Token System. KYC flags are identifiable by short identifiers in bytes32 strings. After adding flags  those bit indexes could be used by GatewayToken implementations to associate flags per token.",
    "kind": "dev",
    "methods": {
      "addFlag(bytes32,uint8)": {
        "details": "Triggers to add new flag into gateway token system",
        "params": {
          "_flag": "Flag short identifier",
          "_index": "Flag index (limited to 255)"
        }
      },
      "addFlags(bytes32[],uint8[])": {
        "details": "Triggers to add multiple flags into gateway token system",
        "params": {
          "_flags": "Array of flag short identifiers",
          "_indexes": "Array of flag indexes (limited to 255)"
        }
      },
      "isFlagSupported(bytes32)": {
        "details": "Triggers to check if a particular flag is supported",
        "params": {
          "_flag": "Flag short identifier"
        },
        "returns": {
          "_0": "Boolean for flag support"
        }
      },
      "isFlagsSupported(bytes32[])": {
        "details": "Triggers to check if several flags are supported",
        "params": {
          "_flags": "Array of flags"
        },
        "returns": {
          "_0": "Array of booleans with support per flag"
        }
      },
      "removeFlag(bytes32)": {
        "details": "Triggers to remove existing flag from gateway token system",
        "params": {
          "_flag": "Flag short identifier"
        }
      },
      "removeFlags(bytes32[])": {
        "details": "Triggers to remove multiple existing flags from gateway token system",
        "params": {
          "_flags": "Array of flag short identifiers"
        }
      },
      "updateDAOManager(address)": {
        "details": "Triggers to transfer ownership of this contract to new DAO Controller, reverts on zero address and wallet addresses",
        "params": {
          "_newDAOController": "New DAO Controller contract address"
        }
      }
    },
    "stateVariables": {
      "daoController": {
        "details": "Triggers to get DAO Controller address"
      },
      "flagIndexes": {
        "details": "Triggers to get flag index from flags mapping"
      },
      "supportedFlagsMask": {
        "details": "Triggers to get bitmask of all supported flags"
      },
      "unsupportedFlagsMask": {
        "details": "Triggers to get bitmask of all unsupported flags"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addFlag(bytes32,uint8)": {
        "notice": "Only executed by existing DAO Manager"
      },
      "addFlags(bytes32[],uint8[])": {
        "notice": "Only executed by existing DAO Manager"
      },
      "removeFlag(bytes32)": {
        "notice": "Only executed by existing DAO Manager"
      },
      "removeFlags(bytes32[])": {
        "notice": "Only executed by existing DAO Manager"
      },
      "updateDAOManager(address)": {
        "notice": "Only executed by existing DAO Manager"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2483,
        "contract": "contracts/FlagsStorage.sol:FlagsStorage",
        "label": "supportedFlags",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(Bytes32Set)2066_storage"
      },
      {
        "astId": 2486,
        "contract": "contracts/FlagsStorage.sol:FlagsStorage",
        "label": "daoController",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 2489,
        "contract": "contracts/FlagsStorage.sol:FlagsStorage",
        "label": "supportedFlagsMask",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 2492,
        "contract": "contracts/FlagsStorage.sol:FlagsStorage",
        "label": "unsupportedFlagsMask",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 2497,
        "contract": "contracts/FlagsStorage.sol:FlagsStorage",
        "label": "flagIndexes",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_bytes32,t_uint8)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_uint8)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint8)",
        "numberOfBytes": "32",
        "value": "t_uint8"
      },
      "t_struct(Bytes32Set)2066_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Bytes32Set",
        "members": [
          {
            "astId": 2065,
            "contract": "contracts/FlagsStorage.sol:FlagsStorage",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)1872_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)1872_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 1867,
            "contract": "contracts/FlagsStorage.sol:FlagsStorage",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 1871,
            "contract": "contracts/FlagsStorage.sol:FlagsStorage",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}