{
  "address": "0x8769145499e1f97049e0099aF3d14283663C4Cf2",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_flagsStorage",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "admin",
          "type": "address"
        }
      ],
      "name": "AdminTransfered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "Blacklisted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "users",
          "type": "address[]"
        }
      ],
      "name": "BlacklistedBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousFlagsStorage",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "flagsStorage",
          "type": "address"
        }
      ],
      "name": "FlagsStorageUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "deployer",
          "type": "address"
        }
      ],
      "name": "GatekeeperNetworkCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "TransfersAcceptedBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "TransfersRestrictedBatch",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        }
      ],
      "name": "acceptTransfersBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "authorities",
          "type": "address[]"
        }
      ],
      "name": "addNetworkAuthorities",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "blacklist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "users",
          "type": "address[]"
        }
      ],
      "name": "blacklistBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "_isDAOGoverned",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "_daoExecutor",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "trustedForwarder",
          "type": "address"
        }
      ],
      "name": "createGatekeeperNetwork",
      "outputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "flagsStorage",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "identityAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "isBlacklisted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "authorities",
          "type": "address[]"
        }
      ],
      "name": "removeNetworkAuthorities",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        }
      ],
      "name": "restrictTransfersBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "transferAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xcd4619bdc2e4cc865fa505febbbd617b3a06586ecd5314fc755c425722618d97",
  "receipt": {
    "to": null,
    "from": "0xF32b1CAABFbaEe9173635433BCC9F43eD25d8Afc",
    "contractAddress": "0x8769145499e1f97049e0099aF3d14283663C4Cf2",
    "transactionIndex": 39,
    "gasUsed": "4748381",
    "logsBloom": "0x
    "blockHash": "0x4ac2d108f10960e8405c4a608fac8839e71e3b282f4281024963528ab8a1a03a",
    "transactionHash": "0xcd4619bdc2e4cc865fa505febbbd617b3a06586ecd5314fc755c425722618d97",
    "logs": [],
    "blockNumber": 10530770,
    "cumulativeGasUsed": "11602957",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xf85d72EF898EbF82Ac1d7597CBb68a4d2898cE46"
  ],
  "solcInputHash": "0c8e2b6cfef465a5e08daf3e99fe2723",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_flagsStorage\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"AdminTransfered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"Blacklisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"}],\"name\":\"BlacklistedBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousFlagsStorage\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"flagsStorage\",\"type\":\"address\"}],\"name\":\"FlagsStorageUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"deployer\",\"type\":\"address\"}],\"name\":\"GatekeeperNetworkCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"TransfersAcceptedBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"TransfersRestrictedBatch\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"acceptTransfersBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"authorities\",\"type\":\"address[]\"}],\"name\":\"addNetworkAuthorities\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"blacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"}],\"name\":\"blacklistBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"_isDAOGoverned\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_daoExecutor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"trustedForwarder\",\"type\":\"address\"}],\"name\":\"createGatekeeperNetwork\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flagsStorage\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"identityAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"isBlacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"authorities\",\"type\":\"address[]\"}],\"name\":\"removeNetworkAuthorities\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"restrictTransfersBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"transferAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Gateway Token Controller contract is responsible for managing Identity.com KYC gateway token set of smart contracts Contract handles multiple levels of access such as Network Authority (may represent a specific regulator body)  Gatekeepers (Identity.com network parties who can mint/burn/freeze gateway tokens) and overall system Admin who can add new Network Authorities\",\"kind\":\"dev\",\"methods\":{\"acceptTransfersBatch(address[])\":{\"details\":\"Accepts owner's transfers for specified gateway tokens\",\"params\":{\"tokens\":\"Gateway Token contracts address array\"}},\"addNetworkAuthorities(address,address[])\":{\"details\":\"Triggers to add multiple network authorities in gateway token contract. \",\"params\":{\"authorities\":\"Network Authorities array\",\"token\":\"Gateway Token contract address\"}},\"blacklist(address)\":{\"details\":\"Blacklists specified `user` completely, user can't get KYC verification on any gateway token networks.\",\"params\":{\"user\":\"Address to blacklist.\"}},\"blacklistBatch(address[])\":{\"details\":\"Blacklist multiple `users`, user can't get KYC verification on any gateway token networks.\",\"params\":{\"users\":\"User addresses to blacklist.\"}},\"constructor\":{\"details\":\"Gateway Token Controller contract constructor.  Grants admin role to contract deployer\"},\"createGatekeeperNetwork(string,string,bool,address,address)\":{\"details\":\"Deploys new Gateway Token and save address at gatewayTokens address set.\",\"params\":{\"_name\":\"Gateway Token name\",\"_symbol\":\"Gateway Token symbol\"}},\"isBlacklisted(address)\":{\"details\":\"Checks if specified `user` blacklisted completely.  If user blacklisted gateway token clients not able to verify identity,  and gatekeepers have to burn tokens owned by blacklisted users.\",\"params\":{\"user\":\"Address to check.\"}},\"removeNetworkAuthorities(address,address[])\":{\"details\":\"Triggers to remove multiple network authorities in gateway token contract. \",\"params\":{\"authorities\":\"Network Authorities array\",\"token\":\"Gateway Token contract address\"}},\"restrictTransfersBatch(address[])\":{\"details\":\"Restricts owner's transfers for specified gateway tokens\",\"params\":{\"tokens\":\"Gateway Token contracts address array\"}},\"transferAdmin(address)\":{\"details\":\"Transfers Gateway Token system admin access in case Identity.com changes the main management address\",\"params\":{\"newAdmin\":\"Address to transfer admin role for.\"}}},\"stateVariables\":{\"identityAdmin\":{\"details\":\"Triggers to get Identity.com System Admin\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addNetworkAuthorities(address,address[])\":{\"notice\":\"Only triggered by identityAdmin\"},\"blacklist(address)\":{\"notice\":\"Once user is blacklisted there is no way to whitelist, please use this function carefully.\"},\"blacklistBatch(address[])\":{\"notice\":\"Once user is blacklisted there is no way to whitelist, please use this function carefully.\"},\"removeNetworkAuthorities(address,address[])\":{\"notice\":\"Only triggered by identityAdmin\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/GatewayTokenController.sol\":\"GatewayTokenController\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x183481af1c40d2efb26b86f63d6fe9e22f24c87e436d60a69f261b38500e7cd6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xfe0edb09653ed10e8a1bfe03eb9b0ff06775666eee817a95bd3d0799f1ee2b44\",\"license\":\"MIT\"},\"@openzeppelin/contracts/metatx/ERC2771Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Context variant with ERC2771 support.\\n */\\nabstract contract ERC2771Context is Context {\\n    address private _trustedForwarder;\\n\\n    constructor(address trustedForwarder) {\\n        _trustedForwarder = trustedForwarder;\\n    }\\n\\n    function isTrustedForwarder(address forwarder) public view virtual returns (bool) {\\n        return forwarder == _trustedForwarder;\\n    }\\n\\n    function _msgSender() internal view virtual override returns (address sender) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\\n            assembly {\\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n        } else {\\n            return super._msgSender();\\n        }\\n    }\\n\\n    function _msgData() internal view virtual override returns (bytes calldata) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            return msg.data[:msg.data.length - 20];\\n        } else {\\n            return super._msgData();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9ef3911dcb48e7ee88d217f4519e8d4bd3a705b941ffc6dbb006bbe557cd094d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd9517254724276e2e8de3769183c1f738f445f0095c26fd9b86d3c6687e887b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xd32fb7f530a914b1083d10a6bed3a586f2451952fec04fe542bcc670a82f7ba5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x3778dc944f4a696335878bad8beca60f38b7c79b7a0bd8ddbeb618bd502a95ae\",\"license\":\"MIT\"},\"contracts/GatewayToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport \\\"@openzeppelin/contracts/metatx/ERC2771Context.sol\\\";\\nimport \\\"./TokenBitMask.sol\\\";\\nimport \\\"./interfaces/IERC721Freezeble.sol\\\";\\nimport \\\"./interfaces/IGatewayToken.sol\\\";\\nimport \\\"./interfaces/IGatewayTokenController.sol\\\";\\nimport \\\"./interfaces/IERC721Expirable.sol\\\";\\nimport \\\"./interfaces/IERC721Revokable.sol\\\";\\n\\n\\n/**\\n * @dev Gateway Token contract is responsible for managing Identity.com KYC gateway tokens \\n * those tokens represent completed KYC with attached identity. \\n * Gateway tokens using ERC721 standard with custom extentions.\\n *\\n * Contract handles multiple levels of access such as Network Authority (may represent a specific regulator body) \\n * Gatekeepers (Identity.com network parties who can mint/burn/freeze gateway tokens) and overall system Admin who can add\\n * new Gatekeepers and Network Authorities\\n */\\ncontract GatewayToken is ERC2771Context, ERC165, AccessControl, IERC721, IERC721Metadata, IERC721Freezeble, IERC721Expirable, IERC721Revokable, IGatewayToken, TokenBitMask {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    enum TokenState {\\n        ACTIVE, FROZEN, REVOKED\\n    }\\n\\n    // Gateway Token name\\n    string public override name;\\n\\n    // Gateway Token symbol\\n    string public override symbol;\\n\\n    // Gateway Token controller contract address\\n    address public controller;\\n    address public deployer;\\n\\n    // Gateway token transfer restrictions\\n    bool public isTransfersRestricted;\\n\\n    // Off-chain DAO governance access control\\n    bool public override isDAOGoverned;\\n    address public override daoManager;\\n\\n    // Access control roles\\n    bytes32 public constant DAO_MANAGER_ROLE = keccak256(\\\"DAO_MANAGER_ROLE\\\");\\n    bytes32 public constant GATEKEEPER_ROLE = keccak256(\\\"GATEKEEPER_ROLE\\\");\\n    bytes32 public constant NETWORK_AUTHORITY_ROLE = keccak256(\\\"NETWORK_AUTHORITY_ROLE\\\");\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping (address => mapping (address => bool)) private _operatorApprovals;\\n\\n    // Optional mapping for gateway token Identities (via TokenURI)\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    // Optional mapping for gateway token bitmaps\\n    mapping(uint256 => TokenState) private _tokenStates;\\n\\n    // Optional Mapping from token ID to expiration date\\n    mapping(uint256 => uint256) private _expirations;\\n\\n    // Optional Mapping from address to tokenID\\n    mapping(address => uint256) private _defaultTokens;\\n\\n    // @dev Modifier to prevent calls from anyone except Identity.com Admin\\n    modifier onlyIdentityAdmin() {\\n        require(msg.sender == IGatewayTokenController(controller).identityAdmin() || msg.sender == controller, \\\"NOT IDENTITY.COM ADMIN NOR TOKEN CONTROLLER\\\");\\n        _;\\n    }\\n\\n    // @dev Modifier to prevent calls for blacklisted users\\n    modifier onlyNonBlacklistedUser(address user) {\\n        require(!_isBlacklisted(user), \\\"BLACKLISTED USER\\\");\\n        _;\\n    }\\n\\n    // @dev Modifier to make a function callable only when token transfers not restricted.\\n    modifier whenTransfersNotRestricted() {\\n        require(!transfersRestricted(), \\\"TRANSFERS RESTRICTED\\\");\\n        _;\\n    }\\n\\n    // @dev Modifier to make a function callable only when token transfers restricted.\\n    modifier whenTransfersRestricted() {\\n        require(transfersRestricted(), \\\"TRANSFERS NOT RESTRICTED\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Gateway Token constructor initializes the contract by \\n     * setting a `name` and a `symbol` to the gateway token.\\n     *\\n     * Initiates gateway token roles with main system admin `GATEWAY_TOKEN_CONTROLLER`,\\n     * `NETWORK_AUTHORITY_ROLE` responsible for adding/removing Gatekeepers and \\n     * `GATEKEEPER_ROLE` responsible for minting/burning/transfering tokens\\n     */\\n    constructor(string memory _name, string memory _symbol, address _deployer, bool _isDAOGoverned, address _daoManager, address _flagsStorage, address trustedForwarder) ERC2771Context(trustedForwarder) public {\\n        name = _name;\\n        symbol = _symbol;\\n        controller = _msgSender();\\n        isTransfersRestricted = true;\\n        deployer = _deployer;\\n        _setFlagsStorage(_flagsStorage);\\n\\n        _setupRole(NETWORK_AUTHORITY_ROLE, _msgSender());\\n        _setupRole(NETWORK_AUTHORITY_ROLE, deployer);\\n        _setupRole(GATEKEEPER_ROLE, deployer);\\n\\n        if (_isDAOGoverned) {\\n            isDAOGoverned = _isDAOGoverned;\\n\\n            require(_daoManager != address(0), \\\"INCORRECT ADDRESS\\\");\\n            // require(_daoManager.isContract(), \\\"NON CONTRACT EXECUTOR\\\"); uncomment while testing with Gnosis Multisig\\n            daoManager = _daoManager;\\n\\n            _setupRole(DAO_MANAGER_ROLE, _daoManager);\\n            _setupRole(DAO_MANAGER_ROLE, _msgSender());\\n            _setupRole(NETWORK_AUTHORITY_ROLE, _daoManager);\\n            _setupRole(GATEKEEPER_ROLE, _daoManager);\\n            _setRoleAdmin(NETWORK_AUTHORITY_ROLE, DAO_MANAGER_ROLE);\\n            _setRoleAdmin(GATEKEEPER_ROLE, DAO_MANAGER_ROLE);\\n        } else {\\n            _setRoleAdmin(NETWORK_AUTHORITY_ROLE, NETWORK_AUTHORITY_ROLE);\\n            _setRoleAdmin(GATEKEEPER_ROLE, NETWORK_AUTHORITY_ROLE);\\n        }\\n    }\\n\\n    function _msgSender() internal view virtual override(ERC2771Context, Context) returns (address sender) {\\n        return ERC2771Context._msgSender();\\n    }\\n\\n    function _msgData() internal view virtual override(ERC2771Context, Context) returns (bytes calldata) {\\n        return ERC2771Context._msgData();\\n    }\\n\\n    /**\\n     * @dev Returns true if gateway token owner transfers reestricted, and false otherwise.\\n     */\\n    function transfersRestricted() public view virtual returns (bool) {\\n        return isTransfersRestricted;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165, AccessControl) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n    * @dev Triggers to check total amount of gateway tokens hold by specific address. \\n    * @param owner Token owner address\\n    */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ZERO ADDRESS\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n    * @dev Triggers to get owner for specific gateway token\\n    * @param tokenId Gateway token id\\n    */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ZERO ADDRESS\\\");\\n        return owner;\\n    }\\n\\n    /**\\n    * @dev Triggers to get identity attached to specific gateway token\\n    * @param tokenId Gateway token id\\n    */\\n    function getIdentity(uint256 tokenId) public view virtual returns (string memory) {\\n        return tokenURI(tokenId);\\n    }\\n\\n    /**\\n    * @dev Triggers to get tokenURI attached to specificied `tokenId`\\n    * @param tokenId Gateway token id\\n    */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"TOKEN DOESN'T EXIST OR FROZEN\\\");\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n\\n        return _tokenURI;\\n    }\\n\\n    /**\\n    * @dev Triggers to attach identity string to specific gateway token\\n    * @param tokenId Gateway token id\\n    * @param tokenURI Gateway token identity in a form of TokenURI\\n    *\\n    * @notice Only executable by gatekeepers\\n    */\\n    function setTokenURI(uint256 tokenId, string memory tokenURI) public virtual {\\n        require(hasRole(GATEKEEPER_ROLE, _msgSender()), \\\"MUST BE GATEKEEPER\\\");\\n        require(_existsAndActive(tokenId), \\\"TOKEN DOESN'T EXIST OR FROZEN\\\");\\n        address tokenOwner = ownerOf(tokenId);\\n        require(!_isBlacklisted(tokenOwner), \\\"BLACKLISTED USER\\\");\\n\\n        _tokenURIs[tokenId] = tokenURI;\\n    }\\n\\n    /**\\n    * @dev Triggered by external contract to verify if `tokenId` and token `owner` are correct.\\n    *\\n    * Checks if token exists in gateway token contract, `tokenId` still active, and not expired.\\n    * Performs additional checks to verify that `owner` is not blacklisted globally.\\n    */\\n    function verifyToken(address owner, uint256 tokenId) external view virtual returns (bool) {\\n        if(!_existsAndActive(tokenId)) return false;\\n        address tokenOwner = ownerOf(tokenId);\\n        if (tokenOwner != owner) return false;\\n        bool _blacklisted = _isBlacklisted(owner);\\n        if(_blacklisted) return false;\\n\\n        return true;\\n    }\\n\\n    /**\\n    * @dev Triggered by external contract to verify the validity of the default token for `owner`.\\n    *\\n    * Checks owner has any token on gateway token contract, `tokenId` still active, and not expired.\\n    * Performs additional checks to verify that `owner` is not blacklisted globally.\\n    */\\n    function verifyToken(address owner) external view virtual returns (bool) {\\n        uint256 tokenId = getTokenId(owner);\\n        if(!_existsAndActive(tokenId)) return false;\\n        address tokenOwner = ownerOf(tokenId);\\n        if (tokenOwner != owner) return false;\\n        bool _blacklisted = _isBlacklisted(owner);\\n        if(_blacklisted) return false;\\n\\n        return true;\\n    }\\n\\n    /**\\n    * @dev Triggers to get all information gateway token related to specified `tokenId`\\n    * @param tokenId Gateway token id\\n    */\\n    function getToken(uint256 tokenId) public view virtual override\\n        returns (\\n            address owner,\\n            uint8 state,\\n            string memory identity,\\n            uint256 expiration,\\n            uint256 bitmask\\n        ) \\n    {\\n        owner = ownerOf(tokenId);\\n        state = uint8(_tokenStates[tokenId]);\\n        identity = _tokenURIs[tokenId];\\n        expiration = _expirations[tokenId];\\n        bitmask = _getBitMask(tokenId);\\n\\n        return (owner, state, identity, expiration, bitmask);\\n    }\\n\\n    /**\\n    * @dev Triggers to get gateway token state with specified `tokenId`\\n    * @param tokenId Gateway token id\\n    */\\n    function getTokenState(uint256 tokenId) public view virtual override returns (uint8 state) {\\n        state = uint8(_tokenStates[tokenId]);\\n\\n        return state;\\n    }\\n\\n    /**\\n    * @dev Returns whether `tokenId` exists.\\n    *\\n    * Tokens start existing when they are minted (`_mint`),\\n    * pause when they are freezed (`_freeze`), and \\n    * stop existing when they are burned (`_burn`).\\n    */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n    * @dev Returns whether `tokenId` exists and not freezed.\\n    */\\n    function _existsAndActive(uint256 tokenId) internal view virtual returns (bool) {\\n        if (_expirations[tokenId] != 0) {\\n            return _owners[tokenId] != address(0) && _tokenStates[tokenId] == TokenState.ACTIVE && block.timestamp <= _expirations[tokenId];\\n        } else {\\n            return _owners[tokenId] != address(0) && _tokenStates[tokenId] == TokenState.ACTIVE;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ownerOf(tokenId);\\n        if (spender == owner) {\\n            return !transfersRestricted();\\n        } else {\\n            return (getApproved(tokenId) == spender || isApprovedForAll(owner, spender) || hasRole(GATEKEEPER_ROLE, spender));\\n        }\\n    }\\n\\n    /**\\n    * @dev Triggers to request token ownership transfer\\n    * @param to Address to transfer token ownership\\n    * @param tokenId Gateway token id\\n    *\\n    * @notice Only executable by token owner\\n    */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = GatewayToken.ownerOf(tokenId);\\n        require(to != owner, \\\"INCORRECT APPROVE DESTINATION\\\");\\n        require(_msgSender() == owner, \\\"INCORRECT OWNER\\\");\\n        require(!_isBlacklisted(owner), \\\"BLACKLISTED USER\\\");\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_existsAndActive(tokenId), \\\"TOKEN DOESN'T EXIST\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"INCORRECT APPROVE\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"MSG.SENDER NOT OWNER NOR GATEKEEPER\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"MSG.SENDER NOT OWNER NOR GATEKEEPER\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"TRANSFER TO NON ERC721Receiver IMPLEMENTER\\\");\\n    }\\n\\n    /**\\n    * @dev Triggers to burn gateway token\\n    * @param tokenId Gateway token id\\n    */\\n    function burn(uint256 tokenId) public virtual onlyIdentityAdmin {\\n        _burn(tokenId);\\n    }\\n\\n    /**\\n    * @dev Triggers to mint gateway token\\n    * @param to Gateway token owner\\n    * @param tokenId Gateway token id\\n    */\\n    function mint(address to, uint256 tokenId, uint256 expiration, uint256 mask) public virtual onlyNonBlacklistedUser(to) {\\n        require(hasRole(GATEKEEPER_ROLE, _msgSender()), \\\"MUST BE GATEKEEPER\\\");\\n\\n        _mint(to, tokenId, expiration, mask);\\n    }\\n\\n    function revoke(uint256 tokenId) public virtual override {\\n        require(hasRole(GATEKEEPER_ROLE, _msgSender()), \\\"MUST BE GATEKEEPER\\\");\\n\\n        _tokenStates[tokenId] = TokenState.REVOKED;\\n\\n        emit Revoke(tokenId);\\n    }\\n\\n    /**\\n    * @dev Triggers to freeze gateway token\\n    * @param tokenId Gateway token id\\n    */\\n    function freeze(uint256 tokenId) public virtual override {\\n        require(hasRole(GATEKEEPER_ROLE, _msgSender()), \\\"MUST BE GATEKEEPER\\\");\\n        address tokenOwner = ownerOf(tokenId);\\n        require(!_isBlacklisted(tokenOwner), \\\"BLACKLISTED USER\\\");\\n\\n        _freeze(tokenId);\\n    }\\n\\n    /**\\n    * @dev Triggers to unfreeze gateway token\\n    * @param tokenId Gateway token id\\n    */\\n    function unfreeze(uint256 tokenId) public virtual override {\\n        require(hasRole(GATEKEEPER_ROLE, _msgSender()), \\\"MUST BE GATEKEEPER\\\");\\n        address tokenOwner = ownerOf(tokenId);\\n        require(!_isBlacklisted(tokenOwner), \\\"BLACKLISTED USER\\\");\\n\\n        _unfreeze(tokenId);\\n    }\\n\\n\\n    /**\\n    * @dev Triggers to get specificied `tokenId` expiration timestamp\\n    * @param tokenId Gateway token id\\n    */\\n    function expiration(uint256 tokenId) public view virtual override returns (uint256) {\\n        require(_exists(tokenId), \\\"TOKEN DOESN'T EXIST OR FROZEN\\\");\\n        uint256 _expiration = _expirations[tokenId];\\n\\n        return _expiration;\\n    }\\n\\n    /**\\n    * @dev Triggers to set expiration for tokenId\\n    * @param tokenId Gateway token id\\n    */\\n    function setExpiration(uint256 tokenId, uint256 timestamp) public virtual override {\\n        require(hasRole(GATEKEEPER_ROLE, _msgSender()), \\\"MUST BE GATEKEEPER\\\");\\n        address tokenOwner = ownerOf(tokenId);\\n        require(!_isBlacklisted(tokenOwner), \\\"BLACKLISTED USER\\\");\\n\\n        _setExpiration(tokenId, timestamp);\\n    }\\n\\n    /**\\n    * @dev Triggers to get default gateway token ID for `owner`\\n    * @param owner Token owner address\\n    */\\n    function getTokenId(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ZERO ADDRESS\\\");\\n        return _defaultTokens[owner];\\n    }\\n\\n    /**\\n    * @dev Triggers to set token with specified `tokenId` as default for `owner`\\n    * @param owner  Token owner address\\n    * @param tokenId Gateway token id\\n    */\\n    function setDefaultTokenId(address owner, uint256 tokenId) public virtual override {\\n        require(_exists(tokenId), \\\"TOKEN DOESN'T EXIST OR FROZEN\\\");\\n        require(hasRole(GATEKEEPER_ROLE, _msgSender()), \\\"MUST BE GATEKEEPER\\\");\\n\\n        address actualOwner = ownerOf(tokenId);\\n        require(actualOwner == owner, \\\"INCORRECT OWNER\\\");\\n\\n        _defaultTokens[owner] = tokenId;\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId, uint256 expiration, uint256 mask) internal virtual {\\n        require(to != address(0), \\\"ZERO ADDRESS\\\");\\n        require(!_exists(tokenId), \\\"TOKEN ALREADY EXISTS\\\");\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n        if (_defaultTokens[to] == 0) {\\n            _defaultTokens[to] = tokenId;\\n        }\\n\\n        if (expiration > 0) {\\n            _expirations[tokenId] = expiration;\\n        }\\n\\n        if (mask > 0) {\\n            _setBitMask(tokenId, mask);\\n        }\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = GatewayToken.ownerOf(tokenId);\\n\\n        // Clear all state associated with `tokenId`\\n        _approve(address(0), tokenId);\\n        delete _tokenStates[tokenId];\\n        delete _expirations[tokenId];\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n        _clearBitMask(tokenId);\\n\\n        if (_defaultTokens[owner] == tokenId) {\\n            delete _defaultTokens[owner];\\n        }\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n    * @dev Freezes `tokenId` and it's usage by gateway token owner.\\n    *\\n    * Emits a {Freeze} event.\\n    */\\n    function _freeze(uint256 tokenId) internal virtual {\\n        require(_existsAndActive(tokenId), \\\"TOKEN DOESN'T EXISTS OR NOT ACTIVE\\\");\\n\\n        _tokenStates[tokenId] = TokenState.FROZEN;\\n\\n        emit Freeze(tokenId);\\n    }\\n\\n    /**\\n    * @dev Unfreezes `tokenId` and it's usage by gateway token owner.\\n    *\\n    * Emits a {Unfreeze} event.\\n    */\\n    function _unfreeze(uint256 tokenId) internal virtual {\\n        require(_exists(tokenId), \\\"TOKEN DOESN'T EXISTS\\\");\\n        require(_tokenStates[tokenId] == TokenState.FROZEN, \\\"TOKEN NOT FROZEN\\\");\\n\\n        _tokenStates[tokenId] = TokenState.ACTIVE;\\n\\n        emit Unfreeze(tokenId);\\n    }\\n\\n    /**\\n    * @dev Sets expiration time for `tokenId`.\\n    */\\n    function _setExpiration(uint256 tokenId, uint256 timestamp) internal virtual {\\n        require(_existsAndActive(tokenId), \\\"TOKEN DOESN'T EXISTS OR ACTIVE\\\");\\n\\n        _expirations[tokenId] = timestamp;\\n        emit Expiration(tokenId, timestamp);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ownerOf(tokenId) == from, \\\"INCORRECT TOKEN OWNER\\\");\\n        require(to != address(0), \\\"TRANSFER TO ZERO ADDRESS\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        if (_defaultTokens[from] == tokenId) {\\n            delete _defaultTokens[from];\\n            _defaultTokens[to] = tokenId;\\n        }\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(GatewayToken.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver(to).onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    function _isBlacklisted(address user) private view returns (bool) {\\n        return IGatewayTokenController(controller).isBlacklisted(user);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    // ===========  ACCESS CONTROLL SECTION ============\\n\\n    /**\\n    * @dev Triggers to add new gatekeeper into the system. \\n    * @param gatekeeper Gatekeeper address\\n    */\\n    function addGatekeeper(address gatekeeper) public virtual {\\n        grantRole(GATEKEEPER_ROLE, gatekeeper);\\n    }\\n\\n    /**\\n    * @dev Triggers to remove existing gatekeeper from gateway token. \\n    * @param gatekeeper Gatekeeper address\\n    */\\n    function removeGatekeeper(address gatekeeper) public virtual {\\n        revokeRole(GATEKEEPER_ROLE, gatekeeper);\\n    }\\n\\n    /**\\n    * @dev Triggers to verify if address has a GATEKEEPER role. \\n    * @param gatekeeper Gatekeeper address\\n    */\\n    function isGatekeeper(address gatekeeper) external virtual override returns (bool) {\\n        return hasRole(GATEKEEPER_ROLE, gatekeeper);\\n    }\\n\\n    /**\\n    * @dev Triggers to add new network authority into the system. \\n    * @param authority Network Authority address\\n    *\\n    * @notice Can be triggered by Gateway Token Controller or any Network Authority\\n    */\\n    function addNetworkAuthority(address authority) external virtual override {\\n        grantRole(NETWORK_AUTHORITY_ROLE, authority);\\n    }\\n\\n    /**\\n    * @dev Triggers to remove existing network authority from gateway token. \\n    * @param authority Network Authority address\\n    *\\n    * @notice Can be triggered by Gateway Token Controller or any Network Authority\\n    */\\n    function removeNetworkAuthority(address authority) external virtual override {\\n        revokeRole(NETWORK_AUTHORITY_ROLE, authority);\\n    }\\n\\n    /**\\n    * @dev Triggers to verify if authority has a NETWORK_AUTHORITY_ROLE role. \\n    * @param authority Network Authority address\\n    */\\n    function isNetworkAuthority(address authority) external virtual override returns (bool) {\\n        return hasRole(NETWORK_AUTHORITY_ROLE, authority);\\n    }\\n\\n    // ===========  ACCESS CONTROLL SECTION ============\\n\\n    /**\\n    * @dev Triggers to allow token transfers by token owners. \\n    *\\n    * @notice Only triggered by Identity.com Admin\\n    */\\n    function allowTransfers() external virtual override whenTransfersRestricted onlyIdentityAdmin returns (bool) {\\n        isTransfersRestricted = false;\\n        emit TransfersAccepted(_msgSender());\\n\\n        return true;\\n    }\\n\\n    /**\\n    * @dev Triggers to stop token transfers by token owners. \\n    *\\n    * @notice Only triggered by Identity.com Admin\\n    */\\n    function stopTransfers() external virtual override whenTransfersNotRestricted onlyIdentityAdmin returns (bool) {\\n        isTransfersRestricted = true;\\n        emit TransfersRestricted(_msgSender());\\n\\n        return true;\\n    }\\n\\n    /**\\n    * @dev Transfers Gateway Token DAO Manager access from daoManager to `newManager`\\n    * @param newManager Address to transfer DAO Manager role for.\\n    * @notice GatewayToken contract has to be DAO Governed\\n    */\\n    function transferDAOManager(address newManager) public override {\\n        require(isDAOGoverned, \\\"NOT DAO GOVERNED\\\");\\n        require(msg.sender == daoManager, \\\"NOT DAO MANAGER\\\");\\n        require(newManager != address(0), \\\"ZERO ADDRESS\\\");\\n\\n        grantRole(DAO_MANAGER_ROLE, newManager);\\n        grantRole(NETWORK_AUTHORITY_ROLE, newManager);\\n        grantRole(GATEKEEPER_ROLE, newManager);\\n\\n        revokeRole(GATEKEEPER_ROLE, daoManager);\\n        revokeRole(NETWORK_AUTHORITY_ROLE, daoManager);\\n        revokeRole(DAO_MANAGER_ROLE, daoManager);\\n\\n        daoManager = newManager;\\n\\n        emit DAOManagerTransfered(msg.sender, newManager);\\n    }\\n\\n    // ===========  TOKEN BITMASK SECTION ============\\n\\n    /**\\n    * @dev Triggers to update FlagsStorage contract address\\n    * @param _flagsStorage FlagsStorage contract address\\n    */\\n    function updateFlagsStorage(address _flagsStorage) public {\\n        require(hasRole(GATEKEEPER_ROLE, _msgSender()), \\\"MUST BE GATEKEEPER\\\");\\n        _setFlagsStorage(_flagsStorage);\\n    }\\n\\n    /**\\n    * @dev Triggers to get gateway token bitmask\\n    */\\n    function getTokenBitmask(uint256 _tokenId) public view returns (uint256) {\\n        uint256 mask = _getBitMask(_tokenId);\\n\\n        return mask;\\n    }\\n\\n    /**\\n    * @dev Triggers to set full bitmask for gateway token with `_tokenId`\\n    */\\n    function setBitmask(uint256 _tokenId, uint256 _mask) public {\\n        require(hasRole(GATEKEEPER_ROLE, _msgSender()), \\\"MUST BE GATEKEEPER\\\");\\n        _setBitMask(_tokenId, _mask);\\n    }\\n\\n    /**\\n    * @dev Triggers to add bitmask for gateway token with `_tokenId`\\n    */\\n    function addBitmask(uint256 _tokenId, uint256 _mask) public {\\n        require(hasRole(GATEKEEPER_ROLE, _msgSender()), \\\"MUST BE GATEKEEPER\\\");\\n        _addBitMask(_tokenId, _mask);\\n    }\\n\\n    /**\\n    * @dev Triggers to add one bit at particular `_index` for gateway token with `_tokenId`\\n    */\\n    function addBit(uint256 _tokenId, uint8 _index) public {\\n        require(hasRole(GATEKEEPER_ROLE, _msgSender()), \\\"MUST BE GATEKEEPER\\\");\\n        _addBit(_tokenId, _index);\\n    }\\n\\n    /**\\n    * @dev Triggers to remove bits in `_removingMask` for gateway token with `_tokenId`\\n    */\\n    function removeBitmask(uint256 _tokenId, uint8 _removingMask) public {\\n        require(hasRole(GATEKEEPER_ROLE, _msgSender()), \\\"MUST BE GATEKEEPER\\\");\\n        _removeBits(_tokenId, _removingMask);\\n    }\\n\\n    /**\\n    * @dev Triggers to clear one bit at particular `_index` for gateway token with `_tokenId`\\n    */\\n    function removeBit(uint256 _tokenId, uint8 _index) public {\\n        require(hasRole(GATEKEEPER_ROLE, _msgSender()), \\\"MUST BE GATEKEEPER\\\");\\n        _clearBit(_tokenId, _index);\\n    }\\n\\n    /**\\n    * @dev Triggers to remove all bits that was previously removed in FlagsStorage contract for gateway token with `_tokenId`\\n    */\\n    function removeUnsupportedBits(uint256 _tokenId) public {\\n        require(hasRole(GATEKEEPER_ROLE, _msgSender()), \\\"MUST BE GATEKEEPER\\\");\\n        _checkUnsupportedBits(_tokenId);\\n    }\\n\\n    /**\\n    * @dev Triggers to clear bitmask for gateway token with `_tokenId`\\n    */\\n    function clearBitmask(uint256 _tokenId) public {\\n        require(hasRole(GATEKEEPER_ROLE, _msgSender()), \\\"MUST BE GATEKEEPER\\\");\\n        _clearBitMask(_tokenId);\\n    }\\n\\n    /**\\n    * @dev Triggers to check if gateway token bitmask contains any custom high risk bits from `_highRiskBitMask`\\n    * @notice May be triggered to perform custom high risk checks during the validation of gateway token\\n    */\\n    function anyHighRiskBits(uint256 _tokenId, uint256 _highRiskBitMask) public view returns (bool) {\\n        return _checkHighRiskBitMask(_tokenId, _highRiskBitMask);\\n    }\\n\\n}\",\"keccak256\":\"0x2a7a44eff40dd7cc533de87c8ab1c2fc45a8003496d6772af1ecb29cbb0028d6\",\"license\":\"MIT\"},\"contracts/GatewayTokenController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"./GatewayToken.sol\\\";\\nimport \\\"./interfaces/IGatewayToken.sol\\\";\\nimport \\\"./interfaces/IGatewayTokenController.sol\\\";\\n\\n/**\\n * @dev Gateway Token Controller contract is responsible for managing Identity.com KYC gateway token set of smart contracts\\n *\\n * Contract handles multiple levels of access such as Network Authority (may represent a specific regulator body) \\n * Gatekeepers (Identity.com network parties who can mint/burn/freeze gateway tokens) and overall system Admin who can add\\n * new Network Authorities\\n */\\ncontract GatewayTokenController is IGatewayTokenController {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    EnumerableSet.AddressSet private gatewayTokens;\\n    address public override identityAdmin;\\n    address public flagsStorage;\\n\\n    // Mapping from user address to blacklisted boolean\\n    mapping(address => bool) private _isBlacklisted;\\n\\n    // @dev Modifier to prevent calls from anyone except Identity.com Admin\\n    modifier onlyAdmin() {\\n        require(identityAdmin == msg.sender, \\\"NOT IDENTITY_COM_ADMIN\\\");\\n        _;\\n    }\\n\\n    /**\\n    * @dev Gateway Token Controller contract constructor. \\n    * Grants admin role to contract deployer\\n    */\\n    constructor(address _flagsStorage) public {\\n        identityAdmin = msg.sender;\\n\\n        require(_flagsStorage != address(0), \\\"Incorrect FlagsStorage address\\\");\\n        flagsStorage = _flagsStorage;\\n    }\\n\\n    // ===========  ADMIN CONTROLL SECTION ============\\n\\n    /**\\n    * @dev Transfers Gateway Token system admin access in case Identity.com changes the main management address\\n    * @param newAdmin Address to transfer admin role for.\\n    */\\n    function transferAdmin(address newAdmin) public onlyAdmin override {\\n        identityAdmin = newAdmin;\\n\\n        emit AdminTransfered(msg.sender, newAdmin);\\n    }\\n\\n    // ===========  TOKEN MANAGEMENT SECTION ============\\n\\n    /**\\n    * @dev Accepts owner's transfers for specified gateway tokens\\n    * @param tokens Gateway Token contracts address array\\n    */\\n    function acceptTransfersBatch(address[] memory tokens) public onlyAdmin override {\\n        for (uint256 i = 0; i < tokens.length; ++i) {\\n            address token = tokens[i];\\n            require(gatewayTokens.contains(token), \\\"NOT GATEWAY TOKEN\\\");\\n            IGatewayToken gt = IGatewayToken(token);\\n\\n            require(gt.allowTransfers(), \\\"TRANSFERS NOT ALLOWED\\\");\\n        }\\n\\n        emit TransfersAcceptedBatch(tokens, msg.sender);\\n    }\\n\\n    /**\\n    * @dev Restricts owner's transfers for specified gateway tokens\\n    * @param tokens Gateway Token contracts address array\\n    */\\n    function restrictTransfersBatch(address[] memory tokens) public onlyAdmin override {\\n        for (uint256 i = 0; i < tokens.length; ++i) {\\n            address token = tokens[i];\\n            require(gatewayTokens.contains(token), \\\"NOT GATEWAY TOKEN\\\");\\n            IGatewayToken gt = IGatewayToken(token);\\n\\n            require(gt.stopTransfers(), \\\"TRANSFERS NOT ALLOWED\\\");\\n        }\\n\\n        emit TransfersRestrictedBatch(tokens, msg.sender);\\n    }\\n\\n    // ===========  USER RESTRICTIONS SECTION ============\\n\\n    /**\\n    * @dev Blacklists specified `user` completely, user can't get KYC verification on any gateway token networks.\\n    * @param user Address to blacklist.\\n    *\\n    * @notice Once user is blacklisted there is no way to whitelist, please use this function carefully.\\n    */\\n    function blacklist(address user) public onlyAdmin override {\\n        require(user != address(0), \\\"ZERO ADDRESS\\\");\\n        _isBlacklisted[user] = true;\\n\\n        emit Blacklisted(user);\\n    }\\n\\n    /**\\n    * @dev Blacklist multiple `users`, user can't get KYC verification on any gateway token networks.\\n    * @param users User addresses to blacklist.\\n    *\\n    * @notice Once user is blacklisted there is no way to whitelist, please use this function carefully.\\n    */\\n    function blacklistBatch(address[] memory users) public onlyAdmin override {\\n        for (uint256 i = 0; i < users.length; ++i) {\\n            address _user = users[i];\\n    \\n            require(_user != address(0), \\\"ZERO ADDRESS\\\");\\n            _isBlacklisted[_user] = true;\\n        }\\n\\n        emit BlacklistedBatch(users);\\n    }\\n\\n    /**\\n    * @dev Checks if specified `user` blacklisted completely. \\n    * If user blacklisted gateway token clients not able to verify identity, \\n    * and gatekeepers have to burn tokens owned by blacklisted users.\\n    *\\n    * @param user Address to check.\\n    */\\n    function isBlacklisted(address user) public view override returns (bool) {\\n        return _isBlacklisted[user];\\n    }\\n\\n    // ===========  GATEWAY TOKEN FACTORY SECTION ============\\n\\n    /**\\n    * @dev Deploys new Gateway Token and save address at gatewayTokens address set.\\n    * @param _name Gateway Token name\\n    * @param _symbol Gateway Token symbol\\n    */\\n    function createGatekeeperNetwork(string memory _name, string memory _symbol, bool _isDAOGoverned, address _daoExecutor, address trustedForwarder) public override returns (address tokenAddress) {\\n        tokenAddress = address(new GatewayToken(_name, _symbol, msg.sender, _isDAOGoverned, _daoExecutor, flagsStorage, trustedForwarder));\\n        gatewayTokens.add(tokenAddress);\\n\\n        emit GatekeeperNetworkCreated(tokenAddress, _name, _symbol, msg.sender);\\n        return tokenAddress;\\n    }\\n\\n    // ===========  ACCESS CONTROLL SECTION ============\\n\\n    /**\\n    * @dev Triggers to add multiple network authorities in gateway token contract. \\n    * @param token Gateway Token contract address\\n    * @param authorities Network Authorities array\\n    *\\n    * @notice Only triggered by identityAdmin\\n    */\\n    function addNetworkAuthorities(address token, address[] memory authorities) public virtual override {\\n        require(gatewayTokens.contains(token), \\\"NOT GATEWAY TOKEN\\\");\\n        IGatewayToken gt = IGatewayToken(token);\\n\\n        for (uint256 i = 0; i < authorities.length; ++i) {\\n            address authority = authorities[i];\\n\\n            if (gt.isDAOGoverned()) {\\n                address daoManager = gt.daoManager();\\n                require(msg.sender == daoManager, \\\"INCORRECT ACCESS\\\");\\n            } else {\\n                require(gt.isNetworkAuthority(msg.sender), \\\"INCORRECT ACCESS\\\");\\n            }\\n\\n            gt.addNetworkAuthority(authority);\\n        }\\n    }\\n\\n    /**\\n    * @dev Triggers to remove multiple network authorities in gateway token contract. \\n    * @param token Gateway Token contract address\\n    * @param authorities Network Authorities array\\n    *\\n    * @notice Only triggered by identityAdmin\\n    */\\n    function removeNetworkAuthorities(address token, address[] memory authorities) public virtual override {\\n        require(gatewayTokens.contains(token), \\\"NOT GATEWAY TOKEN\\\");\\n        IGatewayToken gt = IGatewayToken(token);\\n\\n        for (uint256 i = 0; i < authorities.length; ++i) {\\n            address authority = authorities[i];\\n\\n            if (gt.isDAOGoverned()) {\\n                address daoManager = gt.daoManager();\\n                require(msg.sender == daoManager, \\\"INCORRECT ACCESS\\\");\\n            } else {\\n                require(gt.isNetworkAuthority(msg.sender), \\\"INCORRECT ACCESS\\\");\\n            }\\n\\n            gt.removeNetworkAuthority(authority);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xdd5d074848b2f938456fe3a5414c6c4037c8893902b6d386badf39186c17d3e1\",\"license\":\"MIT\"},\"contracts/TokenBitMask.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./library/BitMask.sol\\\";\\nimport \\\"./interfaces/IFlagsStorage.sol\\\";\\n\\n/**\\n * @dev TokenBitMask contract is an internal smart contract for Gateway Token\\n * implementation that stores KYC flags per identity token in a bitmask\\n */\\ncontract TokenBitMask {\\n    using BitMask for uint256;\\n\\n    /**\\n    * @dev Emitted when token BitMask associated with `tokenId` updated to `bitmask`.\\n    */\\n    event BitMaskUpdated(uint256 tokenId, uint256 bitmask);\\n\\n    /**\\n    * @dev Emitted when Identity.com Admin updated FlagsStorage contract address from `previousFlagsStorage` to `flagsStorage`.\\n    */\\n    event FlagsStorageUpdated(address indexed flagsStorage);\\n\\n    // Gateway Token system FlagsStorage contract address\\n    IFlagsStorage public flagsStorage;\\n\\n    // Mapping for gateway token id to bitmaps\\n    mapping(uint256 => uint256) private _bitmasks;\\n\\n    /**\\n    * @dev Internal funciton to set FlagsStorage contract address\\n    * @param _flagsStorage FlagsStorage contract address\\n    */\\n    function _setFlagsStorage(address _flagsStorage) internal {\\n        flagsStorage = IFlagsStorage(_flagsStorage);\\n\\n        emit FlagsStorageUpdated(_flagsStorage);\\n    }\\n\\n    /**\\n    * @dev Internal function to get gateway token bitmask\\n    */\\n    function _getBitMask(uint256 _tokenId) internal view returns (uint256) {\\n        return _bitmasks[_tokenId];\\n    }\\n\\n    /**\\n    * @dev Internal function to set full bitmask for gateway token\\n    * @notice This function rewrites previous bitmask, use _addBitmask if you need to add flags to existing bitmask\\n    */\\n    function _setBitMask(uint256 _tokenId, uint256 _mask) internal {\\n        _checkSupportedBits(_mask);\\n        _bitmasks[_tokenId] = _mask;\\n\\n        emit BitMaskUpdated(_tokenId, _mask);\\n    }\\n\\n    /**\\n    * @dev Internal function to add `_mask` to existing bitmask for gateway token with `_tokenId`\\n    * @notice This function performs validation on supported flags on the gateway token system level\\n    */\\n    function _addBitMask(uint256 _tokenId, uint256 _mask) internal {\\n        uint256 mask = _bitmasks[_tokenId];\\n        uint256 newMask = mask.or(_mask);\\n        _checkSupportedBits(newMask);\\n\\n        _bitmasks[_tokenId] = newMask;\\n\\n        emit BitMaskUpdated(_tokenId, newMask);\\n    }\\n\\n    /**\\n    * @dev Internal function to add one bit at particular `_index` for gateway token with `_tokenId`\\n    * @notice This function performs validation on supported flags on the gateway token system level\\n    */\\n    function _addBit(uint256 _tokenId, uint8 _index) internal {\\n        uint256 mask = _bitmasks[_tokenId];\\n        uint256 newMask = mask.setBit(_index);\\n        _checkSupportedBits(newMask);\\n\\n        _bitmasks[_tokenId] = newMask;\\n\\n        emit BitMaskUpdated(_tokenId, newMask);\\n    }\\n\\n    /**\\n    * @dev Internal function to remove bits in `_removingMask` for gateway token with `_tokenId`\\n    */\\n    function _removeBits(uint256 _tokenId, uint8 _removingMask) internal {\\n        uint256 mask = _bitmasks[_tokenId];\\n        uint256 newMask = mask.negate();\\n        \\n        newMask = newMask.or(_removingMask);\\n        newMask = newMask.negate();\\n        _bitmasks[_tokenId] = newMask;\\n\\n        emit BitMaskUpdated(_tokenId, newMask);\\n    }\\n\\n    /**\\n    * @dev Internal function to clear one bit in particular `_index` for gateway token with `_tokenId`\\n    * @notice This function performs validation on supported flags on the gateway token system level\\n    */\\n    function _clearBit(uint256 _tokenId, uint8 _index) internal {\\n        uint256 mask = _bitmasks[_tokenId];\\n        uint256 newMask = mask.clearBit(_index);\\n        _checkSupportedBits(newMask);\\n\\n        _bitmasks[_tokenId] = newMask;\\n\\n        emit BitMaskUpdated(_tokenId, newMask);\\n    }\\n\\n    /**\\n    * @dev Internal function to delete bitmask associated with `_tokenId`\\n    */\\n    function _clearBitMask(uint256 _tokenId) internal {\\n        delete _bitmasks[_tokenId];\\n        emit BitMaskUpdated(_tokenId, 0);\\n    }\\n\\n    /**\\n    * @dev Internal function to check if gateway token bitmask contains any high risk bits using `_highRiskBitMask` mask\\n    * @notice Returns false if bitmask has no high risk bits, true otherwise\\n    */\\n    function _checkHighRiskBitMask(uint256 _tokenId, uint256 _highRiskBitMask) internal view returns (bool) {\\n        uint256 mask = _bitmasks[_tokenId];\\n        uint256 riskMask = mask.and(_highRiskBitMask);\\n\\n        return riskMask != uint256(0);\\n    }\\n\\n    /**\\n    * @dev Internal function to check if `_mask` contains only supported bits from FlagsStorage\\n    */\\n    function _checkSupportedBits(uint256 _mask) internal {\\n        uint256 supportedMask = flagsStorage.supportedFlagsMask();\\n        require(supportedMask == supportedMask.or(_mask), \\\"UNSUPPORTED BITS\\\");\\n    }\\n\\n    /**\\n    * @dev Internal function to clear unsupported bits for gateway token bitmask with `_tokenId`\\n    */\\n    function _checkUnsupportedBits(uint256 _tokenId) internal {\\n        uint256 unsupportedBitMask = flagsStorage.unsupportedFlagsMask();\\n        uint256 mask = _bitmasks[_tokenId];\\n        uint256 targetBits = mask.and(unsupportedBitMask);\\n\\n        if (targetBits != uint256(0)) {\\n            mask = mask.negate();\\n            mask = mask.or(targetBits);\\n            mask = mask.negate();\\n\\n            _bitmasks[_tokenId] = mask;\\n            emit BitMaskUpdated(_tokenId, mask);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x25aa0714f5ea80f2c097dd37351a30cfc1a42c94a5d617d92171089eea10cf39\",\"license\":\"MIT\"},\"contracts/interfaces/IERC721Expirable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IERC721Expirable {\\n    /**\\n    * @dev Emitted when expiration set to `tokenId`\\n    */\\n    event Expiration(uint256 indexed tokenId, uint256 timestamp);\\n\\n    /**\\n    * @dev Triggers to freeze gateway token\\n    * @param tokenId Gateway token id\\n    */\\n    function expiration(uint256 tokenId) external view returns (uint256);\\n\\n    /**\\n    * @dev Triggers to unfreeze gateway token\\n    * @param tokenId Gateway token id\\n    * @param tokenId Expiration timestamp\\n    */\\n    function setExpiration(uint256 tokenId, uint256 timestamp) external;\\n}\",\"keccak256\":\"0x8db1e147eb1422d04a4d2734449e72450ffa8997ec92f85fd41c3f2a8daf07a5\",\"license\":\"MIT\"},\"contracts/interfaces/IERC721Freezeble.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IERC721Freezeble {\\n    /**\\n    * @dev Emitted when token freezed by gatekeeper\\n    */\\n    event Freeze(uint256 indexed tokenId);\\n\\n    /**\\n    * @dev Emitted when token unfreezed by gatekeeper\\n    */\\n    event Unfreeze(uint256 indexed tokenId);\\n\\n    /**\\n    * @dev Triggers to freeze gateway token\\n    * @param tokenId Gateway token id\\n    */\\n    function freeze(uint256 tokenId) external;\\n\\n    /**\\n    * @dev Triggers to unfreeze gateway token\\n    * @param tokenId Gateway token id\\n    */\\n    function unfreeze(uint256 tokenId) external;\\n}\",\"keccak256\":\"0x2dfb4fa07d16024f1d8bc6ca95958ef3330573ebccc1ca3190e46ab711ca1378\",\"license\":\"MIT\"},\"contracts/interfaces/IERC721Revokable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IERC721Revokable {\\n    /**\\n    * @dev Emitted when GatewayToken is revoked.\\n    */\\n    event Revoke(uint256 tokenId);\\n\\n    /**\\n    * @dev Triggers to revoke gateway token\\n    * @param tokenId Gateway token id\\n    */\\n    function revoke(uint256 tokenId) external;\\n}\",\"keccak256\":\"0xcf898af6a68750b8fa2aa83383ed853e9eda40cd3d544ccf9ca6ca062f870fc6\",\"license\":\"MIT\"},\"contracts/interfaces/IFlagsStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\n\\ninterface IFlagsStorage {\\n\\n    /**\\n    * @dev Emitted when DAO Controller is updated from `prevDAOController` to `daoController`.\\n    */\\n    event DAOControllerUpdated(\\n        address indexed prevDAOController,\\n        address indexed daoController\\n    );\\n\\n    /**\\n    * @dev Emitted when new flag is added with `flag` short code and `index`.\\n    */\\n    event FlagAdded(bytes32 indexed flag, uint8 index);\\n\\n    /**\\n    * @dev Emitted when existing flag is removed from FlagsStorage by `flag` short code.\\n    */\\n    event FlagRemoved(bytes32 indexed flag);\\n\\n    /**\\n    * @dev Triggers to add new flag into gateway token system\\n    * @param _flag Flag short identifier\\n    * @param _index Flag index (limited to 255)\\n    * @notice Only executed by existing DAO Manager\\n    */\\n    function addFlag(bytes32 _flag, uint8 _index) external;\\n\\n    /**\\n    * @dev Triggers to add multiple flags into gateway token system\\n    * @param _flags Array of flag short identifiers\\n    * @param _indexes Array of flag indexes (limited to 255)\\n    * @notice Only executed by existing DAO Manager\\n    */\\n    function addFlags(bytes32[] memory _flags, uint8[] memory _indexes) external;\\n\\n    /**\\n    * @dev Triggers to get DAO Controller address\\n    */\\n    function daoController() external view returns (address);\\n\\n    /**\\n    * @dev Triggers to get flag index from flags mapping\\n    */\\n    function flagIndexes(bytes32) external view returns (uint8);\\n\\n    /**\\n    * @dev Triggers to check if a particular flag is supported\\n    * @param _flag Flag short identifier\\n    * @return Boolean for flag support\\n    */\\n    function isFlagSupported(bytes32 _flag) external view returns (bool);\\n\\n    /**\\n    * @dev Triggers to check if several flags are supported\\n    * @param _flags Array of flags\\n    * @return Array of booleans with support per flag\\n    */\\n    function isFlagsSupported(bytes32[] memory _flags)\\n        external\\n        view\\n        returns (bool[] memory);\\n\\n    /**\\n    * @dev Triggers to remove existing flag from gateway token system\\n    * @param _flag Flag short identifier\\n    * @notice Only executed by existing DAO Manager\\n    */\\n    function removeFlag(bytes32 _flag) external;\\n\\n    /**\\n    * @dev Triggers to remove multiple existing flags from gateway token system\\n    * @param _flags Array of flag short identifiers\\n    * @notice Only executed by existing DAO Manager\\n    */\\n    function removeFlags(bytes32[] memory _flags) external;\\n\\n    /**\\n    * @dev Triggers to get bitmask of all supported flags\\n    */\\n    function supportedFlagsMask() external view returns (uint256);\\n\\n    /**\\n    * @dev Triggers to get bitmask of all unsupported flags\\n    */\\n    function unsupportedFlagsMask() external view returns (uint256);\\n\\n    /**\\n    * @dev Triggers to transfer ownership of this contract to new DAO Controller, reverts on zero address and wallet addresses\\n    * @param _newDAOController New DAO Controller contract address\\n    * @notice Only executed by existing DAO Manager\\n    */\\n    function updateDAOManager(address _newDAOController) external;\\n}\",\"keccak256\":\"0x117dbad139abc1d34620105fc8b2f29e9be3b4bb3e821c5fc04c0bce5300b338\",\"license\":\"MIT\"},\"contracts/interfaces/IGatewayToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IGatewayToken {\\n    /**\\n    * @dev Emitted when GatewayToken allowed to transfer for token owners by `account`.\\n    */\\n    event TransfersAccepted(address account);\\n\\n    /**\\n    * @dev Emitted when GatewayToken restricted to transfer for token owners by `account`.\\n    */\\n    event TransfersRestricted(address account);\\n\\n    /**\\n    * @dev Emitted when GatewayToken DAO Manager transfered to `newDAOManager` address.\\n    */\\n    event DAOManagerTransfered(address previousDAOManager, address newDAOManager);\\n\\n    /**\\n    * @dev Triggers to get all information relating to gateway `tokenId`\\n    * @param tokenId Gateway token id\\n    */\\n    function getToken(uint256 tokenId) \\n        external \\n        view  \\n        returns (\\n            address owner,\\n            uint8 state,\\n            string memory identity,\\n            uint256 expiration,\\n            uint256 bitmask\\n        );\\n\\n    /**\\n    * @dev Triggers to get gateway token state with specified `tokenId`\\n    * @param tokenId Gateway token id\\n    */\\n    function getTokenState(uint256 tokenId) external view virtual returns (uint8 state);\\n\\n    /**\\n    * @dev Triggers to get default gateway token ID for `owner`\\n    * @param owner Token owner address\\n    */\\n    function getTokenId(address owner) external returns (uint256);\\n\\n    /**\\n    * @dev Triggers to set token with specified `tokenId` as default for `owner`\\n    * @param owner  Token owner address\\n    * @param tokenId Gateway token id\\n    */\\n    function setDefaultTokenId(address owner, uint256 tokenId) external;\\n\\n    /**\\n    * @dev Triggers to verify if address has a GATEKEEPER role. \\n    * @param gatekeeper Gatekeeper address\\n    */\\n    function isGatekeeper(address gatekeeper) external returns (bool);\\n\\n    /**\\n    * @dev Triggers to add new network authority into the system. \\n    * @param authority Network Authority address\\n    *\\n    * @notice Only triggered by Identity.com Admin\\n    */\\n    function addNetworkAuthority(address authority) external;\\n\\n    /**\\n    * @dev Triggers to remove existing network authority from gateway token. \\n    * @param authority Network Authority address\\n    *\\n    * @notice Only triggered by Identity.com Admin\\n    */\\n    function removeNetworkAuthority(address authority) external;\\n\\n    /**\\n    * @dev Triggers to verify if authority has a NETWORK_AUTHORITY_ROLE role. \\n    * @param authority Network Authority address\\n    */\\n    function isNetworkAuthority(address authority) external returns (bool);\\n\\n    /**\\n    * @dev Triggers to allow token transfers by token owners. \\n    *\\n    * @notice Only triggered by Identity.com Admin\\n    */\\n    function allowTransfers() external returns (bool);\\n\\n    /**\\n    * @dev Triggers to stop token transfers by token owners. \\n    *\\n    * @notice Only triggered by Identity.com Admin\\n    */\\n    function stopTransfers() external returns (bool);\\n\\n    /**\\n    * @dev Triggers to check if token governed by DAO. \\n    */\\n    function isDAOGoverned() external returns (bool);\\n\\n    /**\\n    * @dev Triggers to get DAO Manager address. \\n    */\\n    function daoManager() external returns (address);\\n\\n    /**\\n    * @dev Transfers Gateway Token DAO Manager access from daoManager to `newManager`\\n    * @param newManager Address to transfer DAO Manager role for.\\n    */\\n    function transferDAOManager(address newManager) external;\\n}\",\"keccak256\":\"0xe39ec70854a13ebf9fa745e9775bb3f09c3e8bdb7ab8a9fa6412eeec72f8f6b5\",\"license\":\"MIT\"},\"contracts/interfaces/IGatewayTokenController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\n\\ninterface IGatewayTokenController {\\n    /**\\n    * @dev Emitted when Identity.com Admin transfered from `previousAdmin` to `admin`.\\n    */\\n    event AdminTransfered(address indexed previousAdmin, address indexed admin);\\n\\n    /**\\n    * @dev Emitted when Identity.com Admin updated FlagsStorage contract address from `previousFlagsStorage` to `flagsStorage`.\\n    */\\n    event FlagsStorageUpdated(address indexed previousFlagsStorage, address indexed flagsStorage);\\n\\n    /**\\n    * @dev Emitted when new GatewayToken contract deployed with \\n    * associated `name` and `symbol` to specific `address`.\\n    */\\n    event GatekeeperNetworkCreated(address indexed tokenAddress, string name, string symbol, address deployer);\\n\\n    /**\\n    * @dev Emitted when GatewayTokens allowed to transfer for token owners by `account`.\\n    */\\n    event TransfersAcceptedBatch(address[] tokens, address account);\\n\\n    /**\\n    * @dev Emitted when GatewayTokens restricted to transfer for token owners by `account`.\\n    */\\n    event TransfersRestrictedBatch(address[] tokens, address account);\\n\\n    /**\\n    * @dev Emitted when `user` address is blocked to own tokens in any GatewayToken contract.\\n    */\\n    event Blacklisted(address indexed user);\\n\\n    /**\\n    * @dev Emitted when multiple `users` addresses is blocked to own tokens in any GatewayToken contract.\\n    */\\n    event BlacklistedBatch(address[] users);\\n\\n    /**\\n    * @dev Triggers to get Identity.com System Admin\\n    */\\n    function identityAdmin() external view returns (address);\\n\\n    /**\\n    * @dev Transfers Gateway Token system admin access in case Identity.com changes the main management address\\n    * @param newAdmin Address to transfer admin role for.\\n    */\\n    function transferAdmin(address newAdmin) external;\\n\\n    /**\\n    * @dev Accepts owner's transfers for specified gateway tokens\\n    * @param tokens Gateway Token contracts address array\\n    */\\n    function acceptTransfersBatch(address[] memory tokens) external;\\n\\n    /**\\n    * @dev Restricts owner's transfers for specified gateway tokens\\n    * @param tokens Gateway Token contracts address array\\n    */\\n    function restrictTransfersBatch(address[] memory tokens) external;\\n\\n    /**\\n    * @dev Blacklists specified `user` completely, user can't get KYC verification on any gateway token networks.\\n    * @param user Address to blacklist.\\n    *\\n    * @notice Once user is blacklisted there is no way to whitelist, please use this function carefully.\\n    */\\n    function blacklist(address user) external;\\n\\n    /**\\n    * @dev Blacklist multiple `users`, user can't get KYC verification on any gateway token networks.\\n    * @param users User addresses to blacklist.\\n    *\\n    * @notice Once user is blacklisted there is no way to whitelist, please use this function carefully.\\n    */\\n    function blacklistBatch(address[] memory users) external;\\n\\n    /**\\n    * @dev Checks if specified `user` blacklisted completely. \\n    * If user blacklisted gateway token clients not able to verify identity, \\n    * and gatekeepers have to burn tokens owned by blacklisted users.\\n    *\\n    * @param user Address to check.\\n    */\\n    function isBlacklisted(address user) external view returns (bool);\\n\\n    /**\\n    * @dev Deploys new Gateway Token and save address at gatewayTokens address set.\\n    * @param _name Gateway Token name\\n    * @param _symbol Gateway Token symbol\\n    */\\n    function createGatekeeperNetwork(string memory _name, string memory _symbol, bool _isDAOGoverned, address _daoExecutor, address trustedForwarder) external returns (address tokenAddress);\\n\\n    /**\\n    * @dev Triggers to add multiple network authorities in gateway token contract. \\n    * @param token Gateway Token contract address\\n    * @param authorities Network Authorities array\\n    *\\n    * @notice Only triggered by identityAdmin\\n    */\\n    function addNetworkAuthorities(address token, address[] memory authorities) external;\\n\\n    /**\\n    * @dev Triggers to remove multiple network authorities in gateway token contract. \\n    * @param token Gateway Token contract address\\n    * @param authorities Network Authorities array\\n    *\\n    * @notice Only triggered by identityAdmin\\n    */\\n    function removeNetworkAuthorities(address token, address[] memory authorities) external;\\n}\",\"keccak256\":\"0x13f50a414ded5c801023c4acf0c82cb3bed1fb22163c30174c6ca4cd2ecc9de0\",\"license\":\"MIT\"},\"contracts/library/BitMask.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nlibrary BitMask {\\n\\n    uint constant internal ONE = uint256(1);\\n    uint constant internal ONES = ~uint256(0);\\n\\n    /**\\n    * @dev Internal function to set 1 bit in specific `index`\\n    * @return Updated bitmask with modified bit at `index`\\n    */\\n    function setBit(uint256 self, uint8 index) internal pure returns (uint256) {\\n        return self | ONE << index;\\n    }\\n\\n    /**\\n    * @dev Internal function to clear bit to 0 in specific `index`\\n    * @return Updated bitmask with modified bit at `index`\\n    */\\n    function clearBit(uint256 self, uint8 index) internal pure returns (uint256) {\\n        return self & ~(ONE << index);\\n    }\\n\\n    /**\\n    * @dev Internal function to check bit at specific `index`\\n    * @return Returns TRUE if bit is '1', FALSE otherwise\\n    */\\n    function checkBit(uint256 self, uint8 index) internal pure returns (bool) {\\n        return (self & (uint256(1) << index)) > 0;\\n    }\\n\\n    /**\\n    * @dev Internal function to apply NOT operator for a bit in specific `index`\\n    * If the original bit is '1' sets bit to '0'\\n    * If the original bit is '0' sets bit to '1'\\n    * @return Updated bitmask with modified bit at `index`\\n    */\\n    function toggleBit(uint256 self, uint8 index) internal pure returns (uint256) {\\n        return self ^ ONE << index;\\n    }\\n\\n    /**\\n    * @dev AND operator between two bitmasks:\\n    * '0' AND '0' -> '0'\\n    * '0' AND '1' -> '0'\\n    * '1' AND '0' -> '0'\\n    * '1' AND '1' -> '1'\\n    */\\n    function and(uint256 self, uint256 mask) internal pure returns (uint256) {\\n        return self & mask;\\n    }\\n    \\n    /**\\n    * @dev OR operator between two bitmasks:\\n    * '0' OR '0' -> '0'\\n    * '0' OR '1' -> '1'\\n    * '1' OR '0' -> '1'\\n    * '1' OR '1' -> '1'\\n    */\\n    function or(uint256 self, uint256 mask) internal pure returns (uint256) {\\n        return self | mask;\\n    }\\n    \\n    /**\\n    * @dev XOR operator between two bitmasks:\\n    * '0' XOR '0' -> '0'\\n    * '0' XOR '1' -> '1'\\n    * '1' XOR '0' -> '1'\\n    * '1' XOR '1' -> '0'\\n    */\\n    function xor(uint256 self, uint256 mask) internal pure returns (uint256) {\\n        return self ^ mask;\\n    }\\n    \\n    /**\\n    * @dev NOT operator:\\n    * '0' NOT -> '1'\\n    * '1' NOT -> '0'\\n    */\\n    function negate(uint256 self) internal pure returns (uint256) {\\n        return self ^ ONES;\\n    }\\n\\n    /**\\n    * @dev NOT operator:\\n    * '0' NOT -> '1'\\n    * '1' NOT -> '0'\\n    */\\n    function not(uint256 self) internal pure returns (uint256) {\\n        return ~self;\\n    }\\n    \\n    /**\\n    * @dev Left shift of `self` bitmask by `index`:\\n    */\\n    function shiftLeft(uint256 self, uint8 index) internal pure returns (uint256) {\\n        return self << index;\\n    }\\n    \\n    /**\\n    * @dev Left shift of `self` bitmask by `index`:\\n    */\\n    function shiftRight(uint256 self, uint8 index) internal pure returns (uint256) {\\n        return self >> index;\\n    }\\n}\",\"keccak256\":\"0x5217012189ce0d093b5cce577d064b9ddb8e6c7163a3fb0f234bfe9cba3bb505\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405161552338038061552383398101604081905261002f916100c0565b600280546001600160a01b031916331790556001600160a01b03811661009b5760405162461bcd60e51b815260206004820152601e60248201527f496e636f727265637420466c61677353746f7261676520616464726573730000604482015260640160405180910390fd5b600380546001600160a01b0319166001600160a01b03929092169190911790556100f0565b6000602082840312156100d257600080fd5b81516001600160a01b03811681146100e957600080fd5b9392505050565b615424806100ff6000396000f3fe60806040523480156200001157600080fd5b5060043610620000b75760003560e01c8063726b5771116200007a578063726b5771146200014b57806375829def14620001625780637e8895371462000179578063f2ec3450146200018d578063f9f92be414620001a4578063fe575a8714620001bb57600080fd5b80630dd05e5f14620000bc57806324b776c914620000d55780632d33d27a14620000ec5780633403ff1e146200011d5780635647bfa51462000134575b600080fd5b620000d3620000cd36600462000f0d565b620001fb565b005b620000d3620000e636600462000f0d565b620003ab565b60035462000100906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b620001006200012e36600462000fd4565b62000547565b620000d3620001453660046200107f565b62000603565b620000d36200015c36600462000f0d565b6200089c565b620000d362000173366004620010d5565b620009b2565b60025462000100906001600160a01b031681565b620000d36200019e3660046200107f565b62000a2b565b620000d3620001b5366004620010d5565b62000cbe565b620001ea620001cc366004620010d5565b6001600160a01b031660009081526004602052604090205460ff1690565b604051901515815260200162000114565b6002546001600160a01b03163314620002315760405162461bcd60e51b81526004016200022890620010fc565b60405180910390fd5b60005b81518110156200036c5760008282815181106200025557620002556200112c565b602002602001015190506200027581600062000d7e90919063ffffffff16565b620002945760405162461bcd60e51b8152600401620002289062001142565b6000819050806001600160a01b0316637adac0e66040518163ffffffff1660e01b8152600401602060405180830381600087803b158015620002d557600080fd5b505af1158015620002ea573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200031091906200116d565b620003565760405162461bcd60e51b81526020600482015260156024820152741514905394d1915494c81393d50810531313d5d151605a1b604482015260640162000228565b50508062000364906200118d565b905062000234565b507f58631eee773f0fec6b0e2e8bd8eb7250c0941d22e2ac58787e3428a693745a248133604051620003a0929190620011fd565b60405180910390a150565b6002546001600160a01b03163314620003d85760405162461bcd60e51b81526004016200022890620010fc565b60005b815181101562000513576000828281518110620003fc57620003fc6200112c565b602002602001015190506200041c81600062000d7e90919063ffffffff16565b6200043b5760405162461bcd60e51b8152600401620002289062001142565b6000819050806001600160a01b0316632185810b6040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156200047c57600080fd5b505af115801562000491573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620004b791906200116d565b620004fd5760405162461bcd60e51b81526020600482015260156024820152741514905394d1915494c81393d50810531313d5d151605a1b604482015260640162000228565b5050806200050b906200118d565b9050620003db565b507f404f02b9c73e30734207749f2fc6f5e4d1e2fba7649223798308d3a63014f4fc8133604051620003a0929190620011fd565b60008585338686600360009054906101000a90046001600160a01b031687604051620005739062000e08565b62000585979695949392919062001279565b604051809103906000f080158015620005a2573d6000803e3d6000fd5b509050620005b260008262000da5565b50806001600160a01b03167ff9d549554121b54eb289ca81e131436ff67c712259c89fb3c00e36d793efeece878733604051620005f293929190620012de565b60405180910390a295945050505050565b6200061060008362000d7e565b6200062f5760405162461bcd60e51b8152600401620002289062001142565b8160005b8251811015620008965760008382815181106200065457620006546200112c565b60200260200101519050826001600160a01b031663304743156040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156200069a57600080fd5b505af1158015620006af573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620006d591906200116d565b1562000788576000836001600160a01b031663f322c7556040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156200071957600080fd5b505af11580156200072e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000754919062001320565b9050336001600160a01b03821614620007815760405162461bcd60e51b8152600401620002289062001340565b5062000824565b60405163bb909c2b60e01b81523360048201526001600160a01b0384169063bb909c2b90602401602060405180830381600087803b158015620007ca57600080fd5b505af1158015620007df573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200080591906200116d565b620008245760405162461bcd60e51b8152600401620002289062001340565b604051633746948f60e11b81526001600160a01b038281166004830152841690636e8d291e90602401600060405180830381600087803b1580156200086857600080fd5b505af11580156200087d573d6000803e3d6000fd5b5050505050806200088e906200118d565b905062000633565b50505050565b6002546001600160a01b03163314620008c95760405162461bcd60e51b81526004016200022890620010fc565b60005b815181101562000980576000828281518110620008ed57620008ed6200112c565b6020026020010151905060006001600160a01b0316816001600160a01b031614156200094b5760405162461bcd60e51b815260206004820152600c60248201526b5a45524f204144445245535360a01b604482015260640162000228565b6001600160a01b03166000908152600460205260409020805460ff1916600117905562000978816200118d565b9050620008cc565b507fe1083d5cef2dbb8a2482660e37a8229667000029c2686255cef786c905cad3e281604051620003a091906200136a565b6002546001600160a01b03163314620009df5760405162461bcd60e51b81526004016200022890620010fc565b600280546001600160a01b0319166001600160a01b03831690811790915560405133907f173de3514d8508f36ce8c81d509adcd8c8c76098400f685d3042b36f9a4160c390600090a350565b62000a3860008362000d7e565b62000a575760405162461bcd60e51b8152600401620002289062001142565b8160005b82518110156200089657600083828151811062000a7c5762000a7c6200112c565b60200260200101519050826001600160a01b031663304743156040518163ffffffff1660e01b8152600401602060405180830381600087803b15801562000ac257600080fd5b505af115801562000ad7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000afd91906200116d565b1562000bb0576000836001600160a01b031663f322c7556040518163ffffffff1660e01b8152600401602060405180830381600087803b15801562000b4157600080fd5b505af115801562000b56573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000b7c919062001320565b9050336001600160a01b0382161462000ba95760405162461bcd60e51b8152600401620002289062001340565b5062000c4c565b60405163bb909c2b60e01b81523360048201526001600160a01b0384169063bb909c2b90602401602060405180830381600087803b15801562000bf257600080fd5b505af115801562000c07573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000c2d91906200116d565b62000c4c5760405162461bcd60e51b8152600401620002289062001340565b6040516302519eb160e61b81526001600160a01b038281166004830152841690639467ac4090602401600060405180830381600087803b15801562000c9057600080fd5b505af115801562000ca5573d6000803e3d6000fd5b50505050508062000cb6906200118d565b905062000a5b565b6002546001600160a01b0316331462000ceb5760405162461bcd60e51b81526004016200022890620010fc565b6001600160a01b03811662000d325760405162461bcd60e51b815260206004820152600c60248201526b5a45524f204144445245535360a01b604482015260640162000228565b6001600160a01b038116600081815260046020526040808220805460ff19166001179055517fffa4e6181777692565cf28528fc88fd1516ea86b56da075235fa575af6a4b8559190a250565b6001600160a01b038116600090815260018301602052604081205415155b90505b92915050565b600062000d9c836001600160a01b038416600081815260018301602052604081205462000dff5750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915562000d9f565b50600062000d9f565b61406f806200138083390190565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171562000e585762000e5862000e16565b604052919050565b6001600160a01b038116811462000e7657600080fd5b50565b600082601f83011262000e8b57600080fd5b8135602067ffffffffffffffff82111562000eaa5762000eaa62000e16565b8160051b62000ebb82820162000e2c565b928352848101820192828101908785111562000ed657600080fd5b83870192505b8483101562000f0257823562000ef28162000e60565b8252918301919083019062000edc565b979650505050505050565b60006020828403121562000f2057600080fd5b813567ffffffffffffffff81111562000f3857600080fd5b62000f468482850162000e79565b949350505050565b600082601f83011262000f6057600080fd5b813567ffffffffffffffff81111562000f7d5762000f7d62000e16565b62000f92601f8201601f191660200162000e2c565b81815284602083860101111562000fa857600080fd5b816020850160208301376000918101602001919091529392505050565b801515811462000e7657600080fd5b600080600080600060a0868803121562000fed57600080fd5b853567ffffffffffffffff808211156200100657600080fd5b6200101489838a0162000f4e565b965060208801359150808211156200102b57600080fd5b506200103a8882890162000f4e565b94505060408601356200104d8162000fc5565b925060608601356200105f8162000e60565b91506080860135620010718162000e60565b809150509295509295909350565b600080604083850312156200109357600080fd5b8235620010a08162000e60565b9150602083013567ffffffffffffffff811115620010bd57600080fd5b620010cb8582860162000e79565b9150509250929050565b600060208284031215620010e857600080fd5b8135620010f58162000e60565b9392505050565b6020808252601690820152752727aa1024a222a72a24aa2cafa1a7a6afa0a226a4a760511b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b6020808252601190820152702727aa1023a0aa22aba0ac902a27a5a2a760791b604082015260600190565b6000602082840312156200118057600080fd5b8151620010f58162000fc5565b6000600019821415620011b057634e487b7160e01b600052601160045260246000fd5b5060010190565b600081518084526020808501945080840160005b83811015620011f25781516001600160a01b031687529582019590820190600101620011cb565b509495945050505050565b604081526000620012126040830185620011b7565b905060018060a01b03831660208301529392505050565b6000815180845260005b81811015620012515760208185018101518683018201520162001233565b8181111562001264576000602083870101525b50601f01601f19169290920160200192915050565b60e0815260006200128e60e083018a62001229565b8281036020840152620012a2818a62001229565b6001600160a01b03988916604085015296151560608401525050928516608084015290841660a083015290921660c09092019190915292915050565b606081526000620012f3606083018662001229565b828103602084015262001307818662001229565b91505060018060a01b0383166040830152949350505050565b6000602082840312156200133357600080fd5b8151620010f58162000e60565b60208082526010908201526f494e434f52524543542041434345535360801b604082015260600190565b60208152600062000d9c6020830184620011b756fe60806040523480156200001157600080fd5b506040516200406f3803806200406f833981016040819052620000349162000619565b600080546001600160a01b0319166001600160a01b0383161790558651620000649060049060208a019062000489565b5085516200007a90600590602089019062000489565b5062000085620002e4565b600680546001600160a01b039283166001600160a01b0319909116179055600780549187166001600160a81b031990921691909117600160a01b179055620000cd8262000300565b620000f16000805160206200404f833981519152620000eb620002e4565b6200034a565b60075462000119906000805160206200404f833981519152906001600160a01b03166200034a565b60075462000141906000805160206200402f833981519152906001600160a01b03166200034a565b831562000292576007805460ff60a81b1916600160a81b861515021790556001600160a01b038316620001ae5760405162461bcd60e51b8152602060048201526011602482015270494e434f5252454354204144445245535360781b604482015260640160405180910390fd5b600880546001600160a01b0319166001600160a01b038516179055620001e46000805160206200400f833981519152846200034a565b620002026000805160206200400f833981519152620000eb620002e4565b6200021d6000805160206200404f833981519152846200034a565b620002386000805160206200402f833981519152846200034a565b620002626000805160206200404f8339815191526000805160206200400f8339815191526200035a565b6200028c6000805160206200402f8339815191526000805160206200400f8339815191526200035a565b620002d7565b620002ad6000805160206200404f833981519152806200035a565b620002d76000805160206200402f8339815191526000805160206200404f8339815191526200035a565b5050505050505062000723565b6000620002fb620003a760201b62001e101760201c565b905090565b600280546001600160a01b0319166001600160a01b0383169081179091556040517f5e4a30f4224898dbac86adca855a5edd3b8341a3aeb2b6ff0f0b5a82c013b65a90600090a250565b620003568282620003de565b5050565b6000828152600160208190526040808320909101805490849055905190918391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b600080546001600160a01b0316331415620003c9575060131936013560601c90565b620002fb6200048560201b62001e3b1760201c565b60008281526001602090815260408083206001600160a01b038516845290915290205460ff16620003565760008281526001602081815260408084206001600160a01b0386168552909152909120805460ff1916909117905562000441620002e4565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b3390565b8280546200049790620006e6565b90600052602060002090601f016020900481019282620004bb576000855562000506565b82601f10620004d657805160ff191683800117855562000506565b8280016001018555821562000506579182015b8281111562000506578251825591602001919060010190620004e9565b506200051492915062000518565b5090565b5b8082111562000514576000815560010162000519565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200055757600080fd5b81516001600160401b03808211156200057457620005746200052f565b604051601f8301601f19908116603f011681019082821181831017156200059f576200059f6200052f565b81604052838152602092508683858801011115620005bc57600080fd5b600091505b83821015620005e05785820183015181830184015290820190620005c1565b83821115620005f25760008385830101525b9695505050505050565b80516001600160a01b03811681146200061457600080fd5b919050565b600080600080600080600060e0888a0312156200063557600080fd5b87516001600160401b03808211156200064d57600080fd5b6200065b8b838c0162000545565b985060208a01519150808211156200067257600080fd5b50620006818a828b0162000545565b9650506200069260408901620005fc565b945060608801518015158114620006a857600080fd5b9350620006b860808901620005fc565b9250620006c860a08901620005fc565b9150620006d860c08901620005fc565b905092959891949750929550565b600181811c90821680620006fb57607f821691505b602082108114156200071d57634e487b7160e01b600052602260045260246000fd5b50919050565b6138dc80620007336000396000f3fe608060405234801561001057600080fd5b50600436106103d05760003560e01c80638423df79116101ff578063b88d4fde1161011a578063e985e9c5116100ad578063f62bce7d1161007c578063f62bce7d146108ee578063f77c479114610901578063fc9ca98714610914578063ff17e2321461092757600080fd5b8063e985e9c514610867578063f1537686146108a3578063f322c755146108b6578063f45fd0f3146108c957600080fd5b8063d5f39488116100e9578063d5f3948814610808578063d6fd31751461081b578063d7a78db814610830578063e4b50cb81461084357600080fd5b8063b88d4fde146107bc578063bb909c2b146107cf578063c87b56dd146107e2578063d547741f146107f557600080fd5b8063a1ac301711610192578063a647e8ec11610161578063a647e8ec14610763578063a9a3258314610776578063ab736d4f14610789578063b4bd85791461079c57600080fd5b8063a1ac301714610722578063a1e0891114610735578063a217fddf14610748578063a22cb4651461075057600080fd5b806391d14854116101ce57806391d14854146106e05780639467ac40146106f357806395d89b41146107065780639605f12f1461070e57600080fd5b80638423df791461069557806385e3f058146106a757806387b6aef5146106ba57806389f698e4146106cd57600080fd5b80634130276b116102ef5780636352211e116102825780636f7caf41116102515780636f7caf411461063e57806370a08231146106535780637adac0e61461066657806381e9ff191461066e57600080fd5b80636352211e146105f25780636623fc46146106055780636bd27471146106185780636e8d291e1461062b57600080fd5b806351da912d116102be57806351da912d14610597578063572b6c05146105aa578063598c064a146105cc578063603d0140146105df57600080fd5b80634130276b1461054b57806342842e0e1461055e57806342966c6814610571578063443ff4a11461058457600080fd5b806323b872dd11610367578063304743151161033657806330474315146104fe57806334e37b8a1461051257806336568abe14610525578063368e63331461053857600080fd5b806323b872dd14610493578063248a9ca3146104a65780632d33d27a146104d85780632f2ff15d146104eb57600080fd5b8063095ea7b3116103a3578063095ea7b314610452578063162094c41461046557806320c5429b146104785780632185810b1461048b57600080fd5b806301ffc9a7146103d557806306fdde03146103fd5780630703130514610412578063081812fc14610427575b600080fd5b6103e86103e33660046130f7565b61093a565b60405190151581526020015b60405180910390f35b610405610980565b6040516103f4919061316c565b61042561042036600461317f565b610a0e565b005b61043a6104353660046131a1565b610a8f565b6040516001600160a01b0390911681526020016103f4565b6104256104603660046131cf565b610af8565b610425610473366004613287565b610bf1565b6104256104863660046131a1565b610ca4565b6103e8610d2b565b6104256104a13660046132e2565b610ea9565b6104ca6104b43660046131a1565b6000908152600160208190526040909120015490565b6040519081526020016103f4565b60025461043a906001600160a01b031681565b6104256104f9366004613323565b610ee1565b6007546103e890600160a81b900460ff1681565b610425610520366004613353565b610f0f565b610425610533366004613323565b610f51565b6104256105463660046131cf565b610fdf565b6103e8610559366004613353565b6110b7565b61042561056c3660046132e2565b611134565b61042561057f3660046131a1565b61114f565b6104256105923660046131a1565b611223565b6104256105a536600461317f565b611262565b6103e86105b8366004613353565b6000546001600160a01b0391821691161490565b6104256105da36600461317f565b6112a2565b6104256105ed366004613370565b6112e2565b61043a6106003660046131a1565b611322565b6104256106133660046131a1565b611357565b610425610626366004613353565b6113c9565b610425610639366004613353565b6113e1565b6104ca60008051602061388783398151915281565b6104ca610661366004613353565b6113f9565b6103e861143d565b6104ca7ffca69b310bd19d275687ebe00b254b0772cf7a367c3f81a9a5a433f831fdc1dc81565b600754600160a01b900460ff166103e8565b6104056106b53660046131a1565b611598565b6104256106c8366004613353565b6115a3565b6104256106db3660046131a1565b611791565b6103e86106ee366004613323565b6117d0565b610425610701366004613353565b6117fb565b610405611813565b6007546103e890600160a01b900460ff1681565b610425610730366004613353565b611820565b6104ca6107433660046131a1565b611838565b6104ca600081565b61042561075e3660046133a9565b611872565b6104256107713660046133d7565b611968565b6103e861078436600461317f565b6119d8565b6103e8610797366004613353565b6119f3565b6104ca6107aa3660046131a1565b60009081526003602052604090205490565b6104256107ca366004613412565b611a0d565b6103e86107dd366004613353565b611a46565b6104056107f03660046131a1565b611a60565b610425610803366004613323565b611b26565b60075461043a906001600160a01b031681565b6104ca60008051602061386783398151915281565b61042561083e3660046131a1565b611b4f565b6108566108513660046131a1565b611bc1565b6040516103f4959493929190613492565b6103e86108753660046134d3565b6001600160a01b039182166000908152600c6020908152604080832093909416825291909152205460ff1690565b6104ca6108b1366004613353565b611cc4565b60085461043a906001600160a01b031681565b6108dc6108d73660046131a1565b611d08565b60405160ff90911681526020016103f4565b6104256108fc366004613370565b611d2b565b60065461043a906001600160a01b031681565b610425610922366004613370565b611d6b565b6103e86109353660046131cf565b611dab565b60006001600160e01b031982166380ac58cd60e01b148061096b57506001600160e01b03198216635b5e139f60e01b145b8061097a575061097a82611e3f565b92915050565b6004805461098d90613501565b80601f01602080910402602001604051908101604052809291908181526020018280546109b990613501565b8015610a065780601f106109db57610100808354040283529160200191610a06565b820191906000526020600020905b8154815290600101906020018083116109e957829003601f168201915b505050505081565b610a286000805160206138678339815191526106ee611e74565b610a4d5760405162461bcd60e51b8152600401610a449061353c565b60405180910390fd5b6000610a5883611322565b9050610a6381611e7e565b15610a805760405162461bcd60e51b8152600401610a4490613568565b610a8a8383611efc565b505050565b6000610a9a82611fa2565b610adc5760405162461bcd60e51b81526020600482015260136024820152721513d2d153881113d154d389d50811561254d5606a1b6044820152606401610a44565b506000908152600b60205260409020546001600160a01b031690565b6000610b0382611322565b9050806001600160a01b0316836001600160a01b03161415610b675760405162461bcd60e51b815260206004820152601d60248201527f494e434f525245435420415050524f56452044455354494e4154494f4e0000006044820152606401610a44565b806001600160a01b0316610b79611e74565b6001600160a01b031614610bc15760405162461bcd60e51b815260206004820152600f60248201526e24a721a7a92922a1aa1027aba722a960891b6044820152606401610a44565b610bca81611e7e565b15610be75760405162461bcd60e51b8152600401610a4490613568565b610a8a8383612064565b610c0b6000805160206138678339815191526106ee611e74565b610c275760405162461bcd60e51b8152600401610a449061353c565b610c3082611fa2565b610c4c5760405162461bcd60e51b8152600401610a4490613592565b6000610c5783611322565b9050610c6281611e7e565b15610c7f5760405162461bcd60e51b8152600401610a4490613568565b6000838152600d602090815260409091208351610c9e92850190613012565b50505050565b610cbe6000805160206138678339815191526106ee611e74565b610cda5760405162461bcd60e51b8152600401610a449061353c565b6000818152600e6020908152604091829020805460ff1916600217905590518281527fdb43aa42235c8d63908794a952603e8d43a549383d13123c3d893a3fc2e6249591015b60405180910390a150565b600754600090600160a01b900460ff16610d875760405162461bcd60e51b815260206004820152601860248201527f5452414e5346455253204e4f54205245535452494354454400000000000000006044820152606401610a44565b600660009054906101000a90046001600160a01b03166001600160a01b0316637e8895376040518163ffffffff1660e01b815260040160206040518083038186803b158015610dd557600080fd5b505afa158015610de9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e0d91906135df565b6001600160a01b0316336001600160a01b03161480610e3657506006546001600160a01b031633145b610e525760405162461bcd60e51b8152600401610a44906135fc565b6007805460ff60a01b191690557f3e9a3af5b34dbcee8465c0ec9f4f535cb0e3c6a44d1179ae105ced0edbc6d92e610e88611e74565b6040516001600160a01b03909116815260200160405180910390a150600190565b610eba610eb4611e74565b826120d2565b610ed65760405162461bcd60e51b8152600401610a4490613647565b610a8a8383836121ee565b60008281526001602081905260409091200154610f0581610f00611e74565b6123af565b610a8a8383612413565b610f296000805160206138678339815191526106ee611e74565b610f455760405162461bcd60e51b8152600401610a449061353c565b610f4e8161249b565b50565b610f59611e74565b6001600160a01b0316816001600160a01b031614610fd15760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610a44565b610fdb82826124e5565b5050565b610fe88161256a565b6110045760405162461bcd60e51b8152600401610a4490613592565b61101e6000805160206138678339815191526106ee611e74565b61103a5760405162461bcd60e51b8152600401610a449061353c565b600061104582611322565b9050826001600160a01b0316816001600160a01b03161461109a5760405162461bcd60e51b815260206004820152600f60248201526e24a721a7a92922a1aa1027aba722a960891b6044820152606401610a44565b506001600160a01b03909116600090815260106020526040902055565b6000806110c383611cc4565b90506110ce81611fa2565b6110db5750600092915050565b60006110e682611322565b9050836001600160a01b0316816001600160a01b03161461110b575060009392505050565b600061111685611e7e565b9050801561112957506000949350505050565b506001949350505050565b610a8a83838360405180602001604052806000815250611a0d565b600660009054906101000a90046001600160a01b03166001600160a01b0316637e8895376040518163ffffffff1660e01b815260040160206040518083038186803b15801561119d57600080fd5b505afa1580156111b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111d591906135df565b6001600160a01b0316336001600160a01b031614806111fe57506006546001600160a01b031633145b61121a5760405162461bcd60e51b8152600401610a44906135fc565b610f4e81612587565b61123d6000805160206138678339815191526106ee611e74565b6112595760405162461bcd60e51b8152600401610a449061353c565b610f4e816126b8565b61127c6000805160206138678339815191526106ee611e74565b6112985760405162461bcd60e51b8152600401610a449061353c565b610fdb82826126f0565b6112bc6000805160206138678339815191526106ee611e74565b6112d85760405162461bcd60e51b8152600401610a449061353c565b610fdb8282612736565b6112fc6000805160206138678339815191526106ee611e74565b6113185760405162461bcd60e51b8152600401610a449061353c565b610fdb8282612795565b6000818152600960205260408120546001600160a01b03168061097a5760405162461bcd60e51b8152600401610a449061368a565b6113716000805160206138678339815191526106ee611e74565b61138d5760405162461bcd60e51b8152600401610a449061353c565b600061139882611322565b90506113a381611e7e565b156113c05760405162461bcd60e51b8152600401610a4490613568565b610fdb826127b4565b610f4e60008051602061386783398151915282610ee1565b610f4e60008051602061388783398151915282611b26565b60006001600160a01b0382166114215760405162461bcd60e51b8152600401610a449061368a565b506001600160a01b03166000908152600a602052604090205490565b600754600090600160a01b900460ff16156114915760405162461bcd60e51b81526020600482015260146024820152731514905394d1915494c8149154d5149250d5115160621b6044820152606401610a44565b600660009054906101000a90046001600160a01b03166001600160a01b0316637e8895376040518163ffffffff1660e01b815260040160206040518083038186803b1580156114df57600080fd5b505afa1580156114f3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061151791906135df565b6001600160a01b0316336001600160a01b0316148061154057506006546001600160a01b031633145b61155c5760405162461bcd60e51b8152600401610a44906135fc565b6007805460ff60a01b1916600160a01b1790557fe4c361b3d777a0427514a30f90e63bc5728cf1365a8b12e93ae0bf113d8669be610e88611e74565b606061097a82611a60565b600754600160a81b900460ff166115ef5760405162461bcd60e51b815260206004820152601060248201526f1393d508111053c811d3d5915493915160821b6044820152606401610a44565b6008546001600160a01b0316331461163b5760405162461bcd60e51b815260206004820152600f60248201526e2727aa102220a79026a0a720a3a2a960891b6044820152606401610a44565b6001600160a01b0381166116615760405162461bcd60e51b8152600401610a449061368a565b61168b7ffca69b310bd19d275687ebe00b254b0772cf7a367c3f81a9a5a433f831fdc1dc82610ee1565b6116a360008051602061388783398151915282610ee1565b6116bb60008051602061386783398151915282610ee1565b6008546116e090600080516020613867833981519152906001600160a01b0316611b26565b60085461170590600080516020613887833981519152906001600160a01b0316611b26565b60085461173c907ffca69b310bd19d275687ebe00b254b0772cf7a367c3f81a9a5a433f831fdc1dc906001600160a01b0316611b26565b600880546001600160a01b0319166001600160a01b0383169081179091556040805133815260208101929092527f0f682333a6fa3e76317e29f29765b707dba149e3449fa176a2191835342ab30f9101610d20565b6117ab6000805160206138678339815191526106ee611e74565b6117c75760405162461bcd60e51b8152600401610a449061353c565b610f4e816128a5565b60009182526001602090815260408084206001600160a01b0393909316845291905290205460ff1690565b610f4e60008051602061388783398151915282610ee1565b6005805461098d90613501565b610f4e60008051602061386783398151915282611b26565b60006118438261256a565b61185f5760405162461bcd60e51b8152600401610a4490613592565b506000908152600f602052604090205490565b61187a611e74565b6001600160a01b0316826001600160a01b031614156118cf5760405162461bcd60e51b8152602060048201526011602482015270494e434f525245435420415050524f564560781b6044820152606401610a44565b80600c60006118dc611e74565b6001600160a01b03908116825260208083019390935260409182016000908120918716808252919093529120805460ff191692151592909217909155611920611e74565b6001600160a01b03167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405161195c911515815260200190565b60405180910390a35050565b8361197281611e7e565b1561198f5760405162461bcd60e51b8152600401610a4490613568565b6119a96000805160206138678339815191526106ee611e74565b6119c55760405162461bcd60e51b8152600401610a449061353c565b6119d18585858561297f565b5050505050565b600082815260036020526040812054821615155b9392505050565b600061097a600080516020613867833981519152836117d0565b611a1e611a18611e74565b836120d2565b611a3a5760405162461bcd60e51b8152600401610a4490613647565b610c9e84848484612add565b600061097a600080516020613887833981519152836117d0565b6060611a6b8261256a565b611a875760405162461bcd60e51b8152600401610a4490613592565b6000828152600d602052604081208054611aa090613501565b80601f0160208091040260200160405190810160405280929190818152602001828054611acc90613501565b8015611b195780601f10611aee57610100808354040283529160200191611b19565b820191906000526020600020905b815481529060010190602001808311611afc57829003601f168201915b5093979650505050505050565b60008281526001602081905260409091200154611b4581610f00611e74565b610a8a83836124e5565b611b696000805160206138678339815191526106ee611e74565b611b855760405162461bcd60e51b8152600401610a449061353c565b6000611b9082611322565b9050611b9b81611e7e565b15611bb85760405162461bcd60e51b8152600401610a4490613568565b610fdb82612b53565b6000806060600080611bd286611322565b6000878152600e602052604090205490955060ff166002811115611bf857611bf86135c9565b6000878152600d60205260409020805491955090611c1590613501565b80601f0160208091040260200160405190810160405280929190818152602001828054611c4190613501565b8015611c8e5780601f10611c6357610100808354040283529160200191611c8e565b820191906000526020600020905b815481529060010190602001808311611c7157829003601f168201915b5050506000898152600f60209081526040808320546003909252909120549396509450611cb9915050565b905091939590929450565b60006001600160a01b038216611cec5760405162461bcd60e51b8152600401610a449061368a565b506001600160a01b031660009081526010602052604090205490565b6000818152600e602052604081205460ff16600281111561097a5761097a6135c9565b611d456000805160206138678339815191526106ee611e74565b611d615760405162461bcd60e51b8152600401610a449061353c565b610fdb8282612bf6565b611d856000805160206138678339815191526106ee611e74565b611da15760405162461bcd60e51b8152600401610a449061353c565b610fdb8282612c3e565b6000611db682611fa2565b611dc25750600061097a565b6000611dcd83611322565b9050836001600160a01b0316816001600160a01b031614611df257600091505061097a565b6000611dfd85611e7e565b905080156111295760009250505061097a565b600080546001600160a01b0316331415611e31575060131936013560601c90565b503390565b905090565b3390565b60006001600160e01b03198216637965db0b60e01b148061097a57506301ffc9a760e01b6001600160e01b031983161461097a565b6000611e36611e10565b60065460405163fe575a8760e01b81526001600160a01b038381166004830152600092169063fe575a879060240160206040518083038186803b158015611ec457600080fd5b505afa158015611ed8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061097a91906136b0565b611f0582611fa2565b611f515760405162461bcd60e51b815260206004820152601e60248201527f544f4b454e20444f45534e275420455849535453204f522041435449564500006044820152606401610a44565b6000828152600f6020526040908190208290555182907f1ebc57da8b3ebab98506502fbb73232ea29fbe86e4963a5a8c004810ad11190d90611f969084815260200190565b60405180910390a25050565b6000818152600f602052604081205415612019576000828152600960205260409020546001600160a01b031615801590611ffc57506000828152600e602052604081205460ff166002811115611ffa57611ffa6135c9565b145b801561097a5750506000908152600f602052604090205442111590565b6000828152600960205260409020546001600160a01b03161580159061097a57506000828152600e602052604081205460ff16600281111561205d5761205d6135c9565b1492915050565b6000818152600b6020526040902080546001600160a01b0319166001600160a01b038416908117909155819061209982611322565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60006120dd8261256a565b61213e5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610a44565b600061214983611322565b9050806001600160a01b0316846001600160a01b0316141561217b57600754600160a01b900460ff161591505061097a565b836001600160a01b031661218e84610a8f565b6001600160a01b031614806121c857506001600160a01b038082166000908152600c602090815260408083209388168352929052205460ff165b806121e657506121e6600080516020613867833981519152856117d0565b91505061097a565b826001600160a01b031661220182611322565b6001600160a01b03161461224f5760405162461bcd60e51b815260206004820152601560248201527424a721a7a92922a1aa102a27a5a2a71027aba722a960591b6044820152606401610a44565b6001600160a01b0382166122a55760405162461bcd60e51b815260206004820152601860248201527f5452414e5346455220544f205a45524f204144445245535300000000000000006044820152606401610a44565b6122b0600082612064565b6001600160a01b0383166000908152601060205260409020548114156122f7576001600160a01b038084166000908152601060205260408082208290559184168152208190555b6001600160a01b0383166000908152600a602052604081208054600192906123209084906136e3565b90915550506001600160a01b0382166000908152600a6020526040812080546001929061234e9084906136fa565b909155505060008181526009602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6123b982826117d0565b610fdb576123d1816001600160a01b03166014612c5c565b6123dc836020612c5c565b6040516020016123ed929190613712565b60408051601f198184030181529082905262461bcd60e51b8252610a449160040161316c565b61241d82826117d0565b610fdb5760008281526001602081815260408084206001600160a01b0386168552909152909120805460ff19169091179055612457611e74565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b600280546001600160a01b0319166001600160a01b0383169081179091556040517f5e4a30f4224898dbac86adca855a5edd3b8341a3aeb2b6ff0f0b5a82c013b65a90600090a250565b6124ef82826117d0565b15610fdb5760008281526001602090815260408083206001600160a01b03851684529091529020805460ff19169055612526611e74565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b6000908152600960205260409020546001600160a01b0316151590565b600061259282611322565b905061259f600083612064565b6000828152600e60209081526040808320805460ff19169055600f8252808320839055600d909152902080546125d490613501565b1590506125f2576000828152600d602052604081206125f291613096565b6125fb826126b8565b6001600160a01b038116600090815260106020526040902054821415612635576001600160a01b0381166000908152601060205260408120555b6001600160a01b0381166000908152600a6020526040812080546001929061265e9084906136e3565b909155505060008281526009602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b6000818152600360205260408082208290555160008051602061384783398151915291610d2091849190918252602082015260400190565b6126f981612df8565b6000828152600360209081526040918290208390558151848152908101839052600080516020613847833981519152910160405180910390a15050565b600082815260036020526040812054908282175b905061275581612df8565b600084815260036020908152604091829020839055815186815290810183905260008051602061384783398151915291015b60405180910390a150505050565b60008281526003602052604081205490600160ff84161b19821661274a565b6127bd8161256a565b6128005760405162461bcd60e51b8152602060048201526014602482015273544f4b454e20444f45534e27542045584953545360601b6044820152606401610a44565b60016000828152600e602052604090205460ff166002811115612825576128256135c9565b146128655760405162461bcd60e51b815260206004820152601060248201526f2a27a5a2a7102727aa10232927ad22a760811b6044820152606401610a44565b6000818152600e6020526040808220805460ff191690555182917fe2babfd5e77285a3c3dbc4b25592cbe4a7a26e97a7ac63067a22ebdaa9b82add91a250565b600254604080516326bc72ad60e11b815290516000926001600160a01b031691634d78e55a916004808301926020929190829003018186803b1580156128ea57600080fd5b505afa1580156128fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129229190613787565b6000838152600360205260409020549091508181168015610c9e5760008481526003602090815260409182902060001994851884179094189384905581518681529081018490526000805160206138478339815191529101612787565b6001600160a01b0384166129a55760405162461bcd60e51b8152600401610a449061368a565b6129ae8361256a565b156129f25760405162461bcd60e51b8152602060048201526014602482015273544f4b454e20414c52454144592045584953545360601b6044820152606401610a44565b6001600160a01b0384166000908152600a60205260408120805460019290612a1b9084906136fa565b9091555050600083815260096020908152604080832080546001600160a01b0319166001600160a01b03891690811790915583526010909152902054612a77576001600160a01b03841660009081526010602052604090208390555b8115612a8f576000838152600f602052604090208290555b8015612a9f57612a9f83826126f0565b60405183906001600160a01b038616906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a450505050565b612ae88484846121ee565b612af484848484612ebb565b610c9e5760405162461bcd60e51b815260206004820152602a60248201527f5452414e5346455220544f204e4f4e204552433732315265636569766572204960448201526926a82622a6a2a72a22a960b11b6064820152608401610a44565b612b5c81611fa2565b612bb35760405162461bcd60e51b815260206004820152602260248201527f544f4b454e20444f45534e275420455849535453204f52204e4f542041435449604482015261564560f01b6064820152608401610a44565b6000818152600e6020526040808220805460ff191660011790555182917f779fbee689bbd6f006ecb329206d35c7db7380f9837a8826fb8dc5cfcd3d33dd91a250565b600082815260036020908152604091829020805460001980821860ff871617189182905583518681529283018290529290916000805160206138478339815191529101612787565b60008281526003602052604081205490600160ff84161b821761274a565b60606000612c6b8360026137a0565b612c769060026136fa565b67ffffffffffffffff811115612c8e57612c8e6131fb565b6040519080825280601f01601f191660200182016040528015612cb8576020820181803683370190505b509050600360fc1b81600081518110612cd357612cd36137bf565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110612d0257612d026137bf565b60200101906001600160f81b031916908160001a9053506000612d268460026137a0565b612d319060016136fa565b90505b6001811115612da9576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110612d6557612d656137bf565b1a60f81b828281518110612d7b57612d7b6137bf565b60200101906001600160f81b031916908160001a90535060049490941c93612da2816137d5565b9050612d34565b5083156119ec5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610a44565b6002546040805163243da6a760e01b815290516000926001600160a01b03169163243da6a7916004808301926020929190829003018186803b158015612e3d57600080fd5b505afa158015612e51573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e759190613787565b90508181178114610fdb5760405162461bcd60e51b815260206004820152601060248201526f554e535550504f52544544204249545360801b6044820152606401610a44565b60006001600160a01b0384163b1561112957836001600160a01b031663150b7a02612ee4611e74565b8786866040518563ffffffff1660e01b8152600401612f0694939291906137ec565b602060405180830381600087803b158015612f2057600080fd5b505af1925050508015612f50575060408051601f3d908101601f19168201909252612f4d91810190613829565b60015b612ff5573d808015612f7e576040519150601f19603f3d011682016040523d82523d6000602084013e612f83565b606091505b508051612fed5760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b6064820152608401610a44565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050949350505050565b82805461301e90613501565b90600052602060002090601f0160209004810192826130405760008555613086565b82601f1061305957805160ff1916838001178555613086565b82800160010185558215613086579182015b8281111561308657825182559160200191906001019061306b565b506130929291506130cc565b5090565b5080546130a290613501565b6000825580601f106130b2575050565b601f016020900490600052602060002090810190610f4e91905b5b8082111561309257600081556001016130cd565b6001600160e01b031981168114610f4e57600080fd5b60006020828403121561310957600080fd5b81356119ec816130e1565b60005b8381101561312f578181015183820152602001613117565b83811115610c9e5750506000910152565b60008151808452613158816020860160208601613114565b601f01601f19169290920160200192915050565b6020815260006119ec6020830184613140565b6000806040838503121561319257600080fd5b50508035926020909101359150565b6000602082840312156131b357600080fd5b5035919050565b6001600160a01b0381168114610f4e57600080fd5b600080604083850312156131e257600080fd5b82356131ed816131ba565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff8084111561322c5761322c6131fb565b604051601f8501601f19908116603f01168101908282118183101715613254576132546131fb565b8160405280935085815286868601111561326d57600080fd5b858560208301376000602087830101525050509392505050565b6000806040838503121561329a57600080fd5b82359150602083013567ffffffffffffffff8111156132b857600080fd5b8301601f810185136132c957600080fd5b6132d885823560208401613211565b9150509250929050565b6000806000606084860312156132f757600080fd5b8335613302816131ba565b92506020840135613312816131ba565b929592945050506040919091013590565b6000806040838503121561333657600080fd5b823591506020830135613348816131ba565b809150509250929050565b60006020828403121561336557600080fd5b81356119ec816131ba565b6000806040838503121561338357600080fd5b82359150602083013560ff8116811461334857600080fd5b8015158114610f4e57600080fd5b600080604083850312156133bc57600080fd5b82356133c7816131ba565b915060208301356133488161339b565b600080600080608085870312156133ed57600080fd5b84356133f8816131ba565b966020860135965060408601359560600135945092505050565b6000806000806080858703121561342857600080fd5b8435613433816131ba565b93506020850135613443816131ba565b925060408501359150606085013567ffffffffffffffff81111561346657600080fd5b8501601f8101871361347757600080fd5b61348687823560208401613211565b91505092959194509250565b6001600160a01b038616815260ff8516602082015260a0604082018190526000906134bf90830186613140565b606083019490945250608001529392505050565b600080604083850312156134e657600080fd5b82356134f1816131ba565b91506020830135613348816131ba565b600181811c9082168061351557607f821691505b6020821081141561353657634e487b7160e01b600052602260045260246000fd5b50919050565b60208082526012908201527126aaa9aa1021229023a0aa22a5a2a2a822a960711b604082015260600190565b60208082526010908201526f212620a1a5a624a9aa22a2102aa9a2a960811b604082015260600190565b6020808252601d908201527f544f4b454e20444f45534e2754204558495354204f522046524f5a454e000000604082015260600190565b634e487b7160e01b600052602160045260246000fd5b6000602082840312156135f157600080fd5b81516119ec816131ba565b6020808252602b908201527f4e4f54204944454e544954592e434f4d2041444d494e204e4f5220544f4b454e60408201526a1021a7a72a2927a62622a960a91b606082015260800190565b60208082526023908201527f4d53472e53454e444552204e4f54204f574e4552204e4f5220474154454b45456040820152622822a960e91b606082015260800190565b6020808252600c908201526b5a45524f204144445245535360a01b604082015260600190565b6000602082840312156136c257600080fd5b81516119ec8161339b565b634e487b7160e01b600052601160045260246000fd5b6000828210156136f5576136f56136cd565b500390565b6000821982111561370d5761370d6136cd565b500190565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161374a816017850160208801613114565b7001034b99036b4b9b9b4b733903937b6329607d1b601791840191820152835161377b816028840160208801613114565b01602801949350505050565b60006020828403121561379957600080fd5b5051919050565b60008160001904831182151516156137ba576137ba6136cd565b500290565b634e487b7160e01b600052603260045260246000fd5b6000816137e4576137e46136cd565b506000190190565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061381f90830184613140565b9695505050505050565b60006020828403121561383b57600080fd5b81516119ec816130e156fe5e07998cef9cea674942c66f0ea7b0bce89ab9473ce240cc93d616c3491f8aeb3c63e605be3290ab6b04cfc46c6e1516e626d43236b034f09d7ede1d017beb0c449b0a7e0acc0a95c71947cb19fdd122b42abca9bdfbd6707ca4f1e3fdaef05ea2646970667358221220f0f0c8c61e554e15a820d8c62ad57c71e796b2609bdccb6715833c069364f85e64736f6c63430008090033fca69b310bd19d275687ebe00b254b0772cf7a367c3f81a9a5a433f831fdc1dc3c63e605be3290ab6b04cfc46c6e1516e626d43236b034f09d7ede1d017beb0c449b0a7e0acc0a95c71947cb19fdd122b42abca9bdfbd6707ca4f1e3fdaef05ea2646970667358221220b20bf5c35d9487b2701b84e5f828f44867d07dc7da330a3d03c590b38c53703464736f6c63430008090033",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b5060043610620000b75760003560e01c8063726b5771116200007a578063726b5771146200014b57806375829def14620001625780637e8895371462000179578063f2ec3450146200018d578063f9f92be414620001a4578063fe575a8714620001bb57600080fd5b80630dd05e5f14620000bc57806324b776c914620000d55780632d33d27a14620000ec5780633403ff1e146200011d5780635647bfa51462000134575b600080fd5b620000d3620000cd36600462000f0d565b620001fb565b005b620000d3620000e636600462000f0d565b620003ab565b60035462000100906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b620001006200012e36600462000fd4565b62000547565b620000d3620001453660046200107f565b62000603565b620000d36200015c36600462000f0d565b6200089c565b620000d362000173366004620010d5565b620009b2565b60025462000100906001600160a01b031681565b620000d36200019e3660046200107f565b62000a2b565b620000d3620001b5366004620010d5565b62000cbe565b620001ea620001cc366004620010d5565b6001600160a01b031660009081526004602052604090205460ff1690565b604051901515815260200162000114565b6002546001600160a01b03163314620002315760405162461bcd60e51b81526004016200022890620010fc565b60405180910390fd5b60005b81518110156200036c5760008282815181106200025557620002556200112c565b602002602001015190506200027581600062000d7e90919063ffffffff16565b620002945760405162461bcd60e51b8152600401620002289062001142565b6000819050806001600160a01b0316637adac0e66040518163ffffffff1660e01b8152600401602060405180830381600087803b158015620002d557600080fd5b505af1158015620002ea573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200031091906200116d565b620003565760405162461bcd60e51b81526020600482015260156024820152741514905394d1915494c81393d50810531313d5d151605a1b604482015260640162000228565b50508062000364906200118d565b905062000234565b507f58631eee773f0fec6b0e2e8bd8eb7250c0941d22e2ac58787e3428a693745a248133604051620003a0929190620011fd565b60405180910390a150565b6002546001600160a01b03163314620003d85760405162461bcd60e51b81526004016200022890620010fc565b60005b815181101562000513576000828281518110620003fc57620003fc6200112c565b602002602001015190506200041c81600062000d7e90919063ffffffff16565b6200043b5760405162461bcd60e51b8152600401620002289062001142565b6000819050806001600160a01b0316632185810b6040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156200047c57600080fd5b505af115801562000491573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620004b791906200116d565b620004fd5760405162461bcd60e51b81526020600482015260156024820152741514905394d1915494c81393d50810531313d5d151605a1b604482015260640162000228565b5050806200050b906200118d565b9050620003db565b507f404f02b9c73e30734207749f2fc6f5e4d1e2fba7649223798308d3a63014f4fc8133604051620003a0929190620011fd565b60008585338686600360009054906101000a90046001600160a01b031687604051620005739062000e08565b62000585979695949392919062001279565b604051809103906000f080158015620005a2573d6000803e3d6000fd5b509050620005b260008262000da5565b50806001600160a01b03167ff9d549554121b54eb289ca81e131436ff67c712259c89fb3c00e36d793efeece878733604051620005f293929190620012de565b60405180910390a295945050505050565b6200061060008362000d7e565b6200062f5760405162461bcd60e51b8152600401620002289062001142565b8160005b8251811015620008965760008382815181106200065457620006546200112c565b60200260200101519050826001600160a01b031663304743156040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156200069a57600080fd5b505af1158015620006af573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620006d591906200116d565b1562000788576000836001600160a01b031663f322c7556040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156200071957600080fd5b505af11580156200072e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000754919062001320565b9050336001600160a01b03821614620007815760405162461bcd60e51b8152600401620002289062001340565b5062000824565b60405163bb909c2b60e01b81523360048201526001600160a01b0384169063bb909c2b90602401602060405180830381600087803b158015620007ca57600080fd5b505af1158015620007df573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200080591906200116d565b620008245760405162461bcd60e51b8152600401620002289062001340565b604051633746948f60e11b81526001600160a01b038281166004830152841690636e8d291e90602401600060405180830381600087803b1580156200086857600080fd5b505af11580156200087d573d6000803e3d6000fd5b5050505050806200088e906200118d565b905062000633565b50505050565b6002546001600160a01b03163314620008c95760405162461bcd60e51b81526004016200022890620010fc565b60005b815181101562000980576000828281518110620008ed57620008ed6200112c565b6020026020010151905060006001600160a01b0316816001600160a01b031614156200094b5760405162461bcd60e51b815260206004820152600c60248201526b5a45524f204144445245535360a01b604482015260640162000228565b6001600160a01b03166000908152600460205260409020805460ff1916600117905562000978816200118d565b9050620008cc565b507fe1083d5cef2dbb8a2482660e37a8229667000029c2686255cef786c905cad3e281604051620003a091906200136a565b6002546001600160a01b03163314620009df5760405162461bcd60e51b81526004016200022890620010fc565b600280546001600160a01b0319166001600160a01b03831690811790915560405133907f173de3514d8508f36ce8c81d509adcd8c8c76098400f685d3042b36f9a4160c390600090a350565b62000a3860008362000d7e565b62000a575760405162461bcd60e51b8152600401620002289062001142565b8160005b82518110156200089657600083828151811062000a7c5762000a7c6200112c565b60200260200101519050826001600160a01b031663304743156040518163ffffffff1660e01b8152600401602060405180830381600087803b15801562000ac257600080fd5b505af115801562000ad7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000afd91906200116d565b1562000bb0576000836001600160a01b031663f322c7556040518163ffffffff1660e01b8152600401602060405180830381600087803b15801562000b4157600080fd5b505af115801562000b56573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000b7c919062001320565b9050336001600160a01b0382161462000ba95760405162461bcd60e51b8152600401620002289062001340565b5062000c4c565b60405163bb909c2b60e01b81523360048201526001600160a01b0384169063bb909c2b90602401602060405180830381600087803b15801562000bf257600080fd5b505af115801562000c07573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000c2d91906200116d565b62000c4c5760405162461bcd60e51b8152600401620002289062001340565b6040516302519eb160e61b81526001600160a01b038281166004830152841690639467ac4090602401600060405180830381600087803b15801562000c9057600080fd5b505af115801562000ca5573d6000803e3d6000fd5b50505050508062000cb6906200118d565b905062000a5b565b6002546001600160a01b0316331462000ceb5760405162461bcd60e51b81526004016200022890620010fc565b6001600160a01b03811662000d325760405162461bcd60e51b815260206004820152600c60248201526b5a45524f204144445245535360a01b604482015260640162000228565b6001600160a01b038116600081815260046020526040808220805460ff19166001179055517fffa4e6181777692565cf28528fc88fd1516ea86b56da075235fa575af6a4b8559190a250565b6001600160a01b038116600090815260018301602052604081205415155b90505b92915050565b600062000d9c836001600160a01b038416600081815260018301602052604081205462000dff5750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915562000d9f565b50600062000d9f565b61406f806200138083390190565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171562000e585762000e5862000e16565b604052919050565b6001600160a01b038116811462000e7657600080fd5b50565b600082601f83011262000e8b57600080fd5b8135602067ffffffffffffffff82111562000eaa5762000eaa62000e16565b8160051b62000ebb82820162000e2c565b928352848101820192828101908785111562000ed657600080fd5b83870192505b8483101562000f0257823562000ef28162000e60565b8252918301919083019062000edc565b979650505050505050565b60006020828403121562000f2057600080fd5b813567ffffffffffffffff81111562000f3857600080fd5b62000f468482850162000e79565b949350505050565b600082601f83011262000f6057600080fd5b813567ffffffffffffffff81111562000f7d5762000f7d62000e16565b62000f92601f8201601f191660200162000e2c565b81815284602083860101111562000fa857600080fd5b816020850160208301376000918101602001919091529392505050565b801515811462000e7657600080fd5b600080600080600060a0868803121562000fed57600080fd5b853567ffffffffffffffff808211156200100657600080fd5b6200101489838a0162000f4e565b965060208801359150808211156200102b57600080fd5b506200103a8882890162000f4e565b94505060408601356200104d8162000fc5565b925060608601356200105f8162000e60565b91506080860135620010718162000e60565b809150509295509295909350565b600080604083850312156200109357600080fd5b8235620010a08162000e60565b9150602083013567ffffffffffffffff811115620010bd57600080fd5b620010cb8582860162000e79565b9150509250929050565b600060208284031215620010e857600080fd5b8135620010f58162000e60565b9392505050565b6020808252601690820152752727aa1024a222a72a24aa2cafa1a7a6afa0a226a4a760511b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b6020808252601190820152702727aa1023a0aa22aba0ac902a27a5a2a760791b604082015260600190565b6000602082840312156200118057600080fd5b8151620010f58162000fc5565b6000600019821415620011b057634e487b7160e01b600052601160045260246000fd5b5060010190565b600081518084526020808501945080840160005b83811015620011f25781516001600160a01b031687529582019590820190600101620011cb565b509495945050505050565b604081526000620012126040830185620011b7565b905060018060a01b03831660208301529392505050565b6000815180845260005b81811015620012515760208185018101518683018201520162001233565b8181111562001264576000602083870101525b50601f01601f19169290920160200192915050565b60e0815260006200128e60e083018a62001229565b8281036020840152620012a2818a62001229565b6001600160a01b03988916604085015296151560608401525050928516608084015290841660a083015290921660c09092019190915292915050565b606081526000620012f3606083018662001229565b828103602084015262001307818662001229565b91505060018060a01b0383166040830152949350505050565b6000602082840312156200133357600080fd5b8151620010f58162000e60565b60208082526010908201526f494e434f52524543542041434345535360801b604082015260600190565b60208152600062000d9c6020830184620011b756fe60806040523480156200001157600080fd5b506040516200406f3803806200406f833981016040819052620000349162000619565b600080546001600160a01b0319166001600160a01b0383161790558651620000649060049060208a019062000489565b5085516200007a90600590602089019062000489565b5062000085620002e4565b600680546001600160a01b039283166001600160a01b0319909116179055600780549187166001600160a81b031990921691909117600160a01b179055620000cd8262000300565b620000f16000805160206200404f833981519152620000eb620002e4565b6200034a565b60075462000119906000805160206200404f833981519152906001600160a01b03166200034a565b60075462000141906000805160206200402f833981519152906001600160a01b03166200034a565b831562000292576007805460ff60a81b1916600160a81b861515021790556001600160a01b038316620001ae5760405162461bcd60e51b8152602060048201526011602482015270494e434f5252454354204144445245535360781b604482015260640160405180910390fd5b600880546001600160a01b0319166001600160a01b038516179055620001e46000805160206200400f833981519152846200034a565b620002026000805160206200400f833981519152620000eb620002e4565b6200021d6000805160206200404f833981519152846200034a565b620002386000805160206200402f833981519152846200034a565b620002626000805160206200404f8339815191526000805160206200400f8339815191526200035a565b6200028c6000805160206200402f8339815191526000805160206200400f8339815191526200035a565b620002d7565b620002ad6000805160206200404f833981519152806200035a565b620002d76000805160206200402f8339815191526000805160206200404f8339815191526200035a565b5050505050505062000723565b6000620002fb620003a760201b62001e101760201c565b905090565b600280546001600160a01b0319166001600160a01b0383169081179091556040517f5e4a30f4224898dbac86adca855a5edd3b8341a3aeb2b6ff0f0b5a82c013b65a90600090a250565b620003568282620003de565b5050565b6000828152600160208190526040808320909101805490849055905190918391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b600080546001600160a01b0316331415620003c9575060131936013560601c90565b620002fb6200048560201b62001e3b1760201c565b60008281526001602090815260408083206001600160a01b038516845290915290205460ff16620003565760008281526001602081815260408084206001600160a01b0386168552909152909120805460ff1916909117905562000441620002e4565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b3390565b8280546200049790620006e6565b90600052602060002090601f016020900481019282620004bb576000855562000506565b82601f10620004d657805160ff191683800117855562000506565b8280016001018555821562000506579182015b8281111562000506578251825591602001919060010190620004e9565b506200051492915062000518565b5090565b5b8082111562000514576000815560010162000519565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200055757600080fd5b81516001600160401b03808211156200057457620005746200052f565b604051601f8301601f19908116603f011681019082821181831017156200059f576200059f6200052f565b81604052838152602092508683858801011115620005bc57600080fd5b600091505b83821015620005e05785820183015181830184015290820190620005c1565b83821115620005f25760008385830101525b9695505050505050565b80516001600160a01b03811681146200061457600080fd5b919050565b600080600080600080600060e0888a0312156200063557600080fd5b87516001600160401b03808211156200064d57600080fd5b6200065b8b838c0162000545565b985060208a01519150808211156200067257600080fd5b50620006818a828b0162000545565b9650506200069260408901620005fc565b945060608801518015158114620006a857600080fd5b9350620006b860808901620005fc565b9250620006c860a08901620005fc565b9150620006d860c08901620005fc565b905092959891949750929550565b600181811c90821680620006fb57607f821691505b602082108114156200071d57634e487b7160e01b600052602260045260246000fd5b50919050565b6138dc80620007336000396000f3fe608060405234801561001057600080fd5b50600436106103d05760003560e01c80638423df79116101ff578063b88d4fde1161011a578063e985e9c5116100ad578063f62bce7d1161007c578063f62bce7d146108ee578063f77c479114610901578063fc9ca98714610914578063ff17e2321461092757600080fd5b8063e985e9c514610867578063f1537686146108a3578063f322c755146108b6578063f45fd0f3146108c957600080fd5b8063d5f39488116100e9578063d5f3948814610808578063d6fd31751461081b578063d7a78db814610830578063e4b50cb81461084357600080fd5b8063b88d4fde146107bc578063bb909c2b146107cf578063c87b56dd146107e2578063d547741f146107f557600080fd5b8063a1ac301711610192578063a647e8ec11610161578063a647e8ec14610763578063a9a3258314610776578063ab736d4f14610789578063b4bd85791461079c57600080fd5b8063a1ac301714610722578063a1e0891114610735578063a217fddf14610748578063a22cb4651461075057600080fd5b806391d14854116101ce57806391d14854146106e05780639467ac40146106f357806395d89b41146107065780639605f12f1461070e57600080fd5b80638423df791461069557806385e3f058146106a757806387b6aef5146106ba57806389f698e4146106cd57600080fd5b80634130276b116102ef5780636352211e116102825780636f7caf41116102515780636f7caf411461063e57806370a08231146106535780637adac0e61461066657806381e9ff191461066e57600080fd5b80636352211e146105f25780636623fc46146106055780636bd27471146106185780636e8d291e1461062b57600080fd5b806351da912d116102be57806351da912d14610597578063572b6c05146105aa578063598c064a146105cc578063603d0140146105df57600080fd5b80634130276b1461054b57806342842e0e1461055e57806342966c6814610571578063443ff4a11461058457600080fd5b806323b872dd11610367578063304743151161033657806330474315146104fe57806334e37b8a1461051257806336568abe14610525578063368e63331461053857600080fd5b806323b872dd14610493578063248a9ca3146104a65780632d33d27a146104d85780632f2ff15d146104eb57600080fd5b8063095ea7b3116103a3578063095ea7b314610452578063162094c41461046557806320c5429b146104785780632185810b1461048b57600080fd5b806301ffc9a7146103d557806306fdde03146103fd5780630703130514610412578063081812fc14610427575b600080fd5b6103e86103e33660046130f7565b61093a565b60405190151581526020015b60405180910390f35b610405610980565b6040516103f4919061316c565b61042561042036600461317f565b610a0e565b005b61043a6104353660046131a1565b610a8f565b6040516001600160a01b0390911681526020016103f4565b6104256104603660046131cf565b610af8565b610425610473366004613287565b610bf1565b6104256104863660046131a1565b610ca4565b6103e8610d2b565b6104256104a13660046132e2565b610ea9565b6104ca6104b43660046131a1565b6000908152600160208190526040909120015490565b6040519081526020016103f4565b60025461043a906001600160a01b031681565b6104256104f9366004613323565b610ee1565b6007546103e890600160a81b900460ff1681565b610425610520366004613353565b610f0f565b610425610533366004613323565b610f51565b6104256105463660046131cf565b610fdf565b6103e8610559366004613353565b6110b7565b61042561056c3660046132e2565b611134565b61042561057f3660046131a1565b61114f565b6104256105923660046131a1565b611223565b6104256105a536600461317f565b611262565b6103e86105b8366004613353565b6000546001600160a01b0391821691161490565b6104256105da36600461317f565b6112a2565b6104256105ed366004613370565b6112e2565b61043a6106003660046131a1565b611322565b6104256106133660046131a1565b611357565b610425610626366004613353565b6113c9565b610425610639366004613353565b6113e1565b6104ca60008051602061388783398151915281565b6104ca610661366004613353565b6113f9565b6103e861143d565b6104ca7ffca69b310bd19d275687ebe00b254b0772cf7a367c3f81a9a5a433f831fdc1dc81565b600754600160a01b900460ff166103e8565b6104056106b53660046131a1565b611598565b6104256106c8366004613353565b6115a3565b6104256106db3660046131a1565b611791565b6103e86106ee366004613323565b6117d0565b610425610701366004613353565b6117fb565b610405611813565b6007546103e890600160a01b900460ff1681565b610425610730366004613353565b611820565b6104ca6107433660046131a1565b611838565b6104ca600081565b61042561075e3660046133a9565b611872565b6104256107713660046133d7565b611968565b6103e861078436600461317f565b6119d8565b6103e8610797366004613353565b6119f3565b6104ca6107aa3660046131a1565b60009081526003602052604090205490565b6104256107ca366004613412565b611a0d565b6103e86107dd366004613353565b611a46565b6104056107f03660046131a1565b611a60565b610425610803366004613323565b611b26565b60075461043a906001600160a01b031681565b6104ca60008051602061386783398151915281565b61042561083e3660046131a1565b611b4f565b6108566108513660046131a1565b611bc1565b6040516103f4959493929190613492565b6103e86108753660046134d3565b6001600160a01b039182166000908152600c6020908152604080832093909416825291909152205460ff1690565b6104ca6108b1366004613353565b611cc4565b60085461043a906001600160a01b031681565b6108dc6108d73660046131a1565b611d08565b60405160ff90911681526020016103f4565b6104256108fc366004613370565b611d2b565b60065461043a906001600160a01b031681565b610425610922366004613370565b611d6b565b6103e86109353660046131cf565b611dab565b60006001600160e01b031982166380ac58cd60e01b148061096b57506001600160e01b03198216635b5e139f60e01b145b8061097a575061097a82611e3f565b92915050565b6004805461098d90613501565b80601f01602080910402602001604051908101604052809291908181526020018280546109b990613501565b8015610a065780601f106109db57610100808354040283529160200191610a06565b820191906000526020600020905b8154815290600101906020018083116109e957829003601f168201915b505050505081565b610a286000805160206138678339815191526106ee611e74565b610a4d5760405162461bcd60e51b8152600401610a449061353c565b60405180910390fd5b6000610a5883611322565b9050610a6381611e7e565b15610a805760405162461bcd60e51b8152600401610a4490613568565b610a8a8383611efc565b505050565b6000610a9a82611fa2565b610adc5760405162461bcd60e51b81526020600482015260136024820152721513d2d153881113d154d389d50811561254d5606a1b6044820152606401610a44565b506000908152600b60205260409020546001600160a01b031690565b6000610b0382611322565b9050806001600160a01b0316836001600160a01b03161415610b675760405162461bcd60e51b815260206004820152601d60248201527f494e434f525245435420415050524f56452044455354494e4154494f4e0000006044820152606401610a44565b806001600160a01b0316610b79611e74565b6001600160a01b031614610bc15760405162461bcd60e51b815260206004820152600f60248201526e24a721a7a92922a1aa1027aba722a960891b6044820152606401610a44565b610bca81611e7e565b15610be75760405162461bcd60e51b8152600401610a4490613568565b610a8a8383612064565b610c0b6000805160206138678339815191526106ee611e74565b610c275760405162461bcd60e51b8152600401610a449061353c565b610c3082611fa2565b610c4c5760405162461bcd60e51b8152600401610a4490613592565b6000610c5783611322565b9050610c6281611e7e565b15610c7f5760405162461bcd60e51b8152600401610a4490613568565b6000838152600d602090815260409091208351610c9e92850190613012565b50505050565b610cbe6000805160206138678339815191526106ee611e74565b610cda5760405162461bcd60e51b8152600401610a449061353c565b6000818152600e6020908152604091829020805460ff1916600217905590518281527fdb43aa42235c8d63908794a952603e8d43a549383d13123c3d893a3fc2e6249591015b60405180910390a150565b600754600090600160a01b900460ff16610d875760405162461bcd60e51b815260206004820152601860248201527f5452414e5346455253204e4f54205245535452494354454400000000000000006044820152606401610a44565b600660009054906101000a90046001600160a01b03166001600160a01b0316637e8895376040518163ffffffff1660e01b815260040160206040518083038186803b158015610dd557600080fd5b505afa158015610de9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e0d91906135df565b6001600160a01b0316336001600160a01b03161480610e3657506006546001600160a01b031633145b610e525760405162461bcd60e51b8152600401610a44906135fc565b6007805460ff60a01b191690557f3e9a3af5b34dbcee8465c0ec9f4f535cb0e3c6a44d1179ae105ced0edbc6d92e610e88611e74565b6040516001600160a01b03909116815260200160405180910390a150600190565b610eba610eb4611e74565b826120d2565b610ed65760405162461bcd60e51b8152600401610a4490613647565b610a8a8383836121ee565b60008281526001602081905260409091200154610f0581610f00611e74565b6123af565b610a8a8383612413565b610f296000805160206138678339815191526106ee611e74565b610f455760405162461bcd60e51b8152600401610a449061353c565b610f4e8161249b565b50565b610f59611e74565b6001600160a01b0316816001600160a01b031614610fd15760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610a44565b610fdb82826124e5565b5050565b610fe88161256a565b6110045760405162461bcd60e51b8152600401610a4490613592565b61101e6000805160206138678339815191526106ee611e74565b61103a5760405162461bcd60e51b8152600401610a449061353c565b600061104582611322565b9050826001600160a01b0316816001600160a01b03161461109a5760405162461bcd60e51b815260206004820152600f60248201526e24a721a7a92922a1aa1027aba722a960891b6044820152606401610a44565b506001600160a01b03909116600090815260106020526040902055565b6000806110c383611cc4565b90506110ce81611fa2565b6110db5750600092915050565b60006110e682611322565b9050836001600160a01b0316816001600160a01b03161461110b575060009392505050565b600061111685611e7e565b9050801561112957506000949350505050565b506001949350505050565b610a8a83838360405180602001604052806000815250611a0d565b600660009054906101000a90046001600160a01b03166001600160a01b0316637e8895376040518163ffffffff1660e01b815260040160206040518083038186803b15801561119d57600080fd5b505afa1580156111b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111d591906135df565b6001600160a01b0316336001600160a01b031614806111fe57506006546001600160a01b031633145b61121a5760405162461bcd60e51b8152600401610a44906135fc565b610f4e81612587565b61123d6000805160206138678339815191526106ee611e74565b6112595760405162461bcd60e51b8152600401610a449061353c565b610f4e816126b8565b61127c6000805160206138678339815191526106ee611e74565b6112985760405162461bcd60e51b8152600401610a449061353c565b610fdb82826126f0565b6112bc6000805160206138678339815191526106ee611e74565b6112d85760405162461bcd60e51b8152600401610a449061353c565b610fdb8282612736565b6112fc6000805160206138678339815191526106ee611e74565b6113185760405162461bcd60e51b8152600401610a449061353c565b610fdb8282612795565b6000818152600960205260408120546001600160a01b03168061097a5760405162461bcd60e51b8152600401610a449061368a565b6113716000805160206138678339815191526106ee611e74565b61138d5760405162461bcd60e51b8152600401610a449061353c565b600061139882611322565b90506113a381611e7e565b156113c05760405162461bcd60e51b8152600401610a4490613568565b610fdb826127b4565b610f4e60008051602061386783398151915282610ee1565b610f4e60008051602061388783398151915282611b26565b60006001600160a01b0382166114215760405162461bcd60e51b8152600401610a449061368a565b506001600160a01b03166000908152600a602052604090205490565b600754600090600160a01b900460ff16156114915760405162461bcd60e51b81526020600482015260146024820152731514905394d1915494c8149154d5149250d5115160621b6044820152606401610a44565b600660009054906101000a90046001600160a01b03166001600160a01b0316637e8895376040518163ffffffff1660e01b815260040160206040518083038186803b1580156114df57600080fd5b505afa1580156114f3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061151791906135df565b6001600160a01b0316336001600160a01b0316148061154057506006546001600160a01b031633145b61155c5760405162461bcd60e51b8152600401610a44906135fc565b6007805460ff60a01b1916600160a01b1790557fe4c361b3d777a0427514a30f90e63bc5728cf1365a8b12e93ae0bf113d8669be610e88611e74565b606061097a82611a60565b600754600160a81b900460ff166115ef5760405162461bcd60e51b815260206004820152601060248201526f1393d508111053c811d3d5915493915160821b6044820152606401610a44565b6008546001600160a01b0316331461163b5760405162461bcd60e51b815260206004820152600f60248201526e2727aa102220a79026a0a720a3a2a960891b6044820152606401610a44565b6001600160a01b0381166116615760405162461bcd60e51b8152600401610a449061368a565b61168b7ffca69b310bd19d275687ebe00b254b0772cf7a367c3f81a9a5a433f831fdc1dc82610ee1565b6116a360008051602061388783398151915282610ee1565b6116bb60008051602061386783398151915282610ee1565b6008546116e090600080516020613867833981519152906001600160a01b0316611b26565b60085461170590600080516020613887833981519152906001600160a01b0316611b26565b60085461173c907ffca69b310bd19d275687ebe00b254b0772cf7a367c3f81a9a5a433f831fdc1dc906001600160a01b0316611b26565b600880546001600160a01b0319166001600160a01b0383169081179091556040805133815260208101929092527f0f682333a6fa3e76317e29f29765b707dba149e3449fa176a2191835342ab30f9101610d20565b6117ab6000805160206138678339815191526106ee611e74565b6117c75760405162461bcd60e51b8152600401610a449061353c565b610f4e816128a5565b60009182526001602090815260408084206001600160a01b0393909316845291905290205460ff1690565b610f4e60008051602061388783398151915282610ee1565b6005805461098d90613501565b610f4e60008051602061386783398151915282611b26565b60006118438261256a565b61185f5760405162461bcd60e51b8152600401610a4490613592565b506000908152600f602052604090205490565b61187a611e74565b6001600160a01b0316826001600160a01b031614156118cf5760405162461bcd60e51b8152602060048201526011602482015270494e434f525245435420415050524f564560781b6044820152606401610a44565b80600c60006118dc611e74565b6001600160a01b03908116825260208083019390935260409182016000908120918716808252919093529120805460ff191692151592909217909155611920611e74565b6001600160a01b03167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405161195c911515815260200190565b60405180910390a35050565b8361197281611e7e565b1561198f5760405162461bcd60e51b8152600401610a4490613568565b6119a96000805160206138678339815191526106ee611e74565b6119c55760405162461bcd60e51b8152600401610a449061353c565b6119d18585858561297f565b5050505050565b600082815260036020526040812054821615155b9392505050565b600061097a600080516020613867833981519152836117d0565b611a1e611a18611e74565b836120d2565b611a3a5760405162461bcd60e51b8152600401610a4490613647565b610c9e84848484612add565b600061097a600080516020613887833981519152836117d0565b6060611a6b8261256a565b611a875760405162461bcd60e51b8152600401610a4490613592565b6000828152600d602052604081208054611aa090613501565b80601f0160208091040260200160405190810160405280929190818152602001828054611acc90613501565b8015611b195780601f10611aee57610100808354040283529160200191611b19565b820191906000526020600020905b815481529060010190602001808311611afc57829003601f168201915b5093979650505050505050565b60008281526001602081905260409091200154611b4581610f00611e74565b610a8a83836124e5565b611b696000805160206138678339815191526106ee611e74565b611b855760405162461bcd60e51b8152600401610a449061353c565b6000611b9082611322565b9050611b9b81611e7e565b15611bb85760405162461bcd60e51b8152600401610a4490613568565b610fdb82612b53565b6000806060600080611bd286611322565b6000878152600e602052604090205490955060ff166002811115611bf857611bf86135c9565b6000878152600d60205260409020805491955090611c1590613501565b80601f0160208091040260200160405190810160405280929190818152602001828054611c4190613501565b8015611c8e5780601f10611c6357610100808354040283529160200191611c8e565b820191906000526020600020905b815481529060010190602001808311611c7157829003601f168201915b5050506000898152600f60209081526040808320546003909252909120549396509450611cb9915050565b905091939590929450565b60006001600160a01b038216611cec5760405162461bcd60e51b8152600401610a449061368a565b506001600160a01b031660009081526010602052604090205490565b6000818152600e602052604081205460ff16600281111561097a5761097a6135c9565b611d456000805160206138678339815191526106ee611e74565b611d615760405162461bcd60e51b8152600401610a449061353c565b610fdb8282612bf6565b611d856000805160206138678339815191526106ee611e74565b611da15760405162461bcd60e51b8152600401610a449061353c565b610fdb8282612c3e565b6000611db682611fa2565b611dc25750600061097a565b6000611dcd83611322565b9050836001600160a01b0316816001600160a01b031614611df257600091505061097a565b6000611dfd85611e7e565b905080156111295760009250505061097a565b600080546001600160a01b0316331415611e31575060131936013560601c90565b503390565b905090565b3390565b60006001600160e01b03198216637965db0b60e01b148061097a57506301ffc9a760e01b6001600160e01b031983161461097a565b6000611e36611e10565b60065460405163fe575a8760e01b81526001600160a01b038381166004830152600092169063fe575a879060240160206040518083038186803b158015611ec457600080fd5b505afa158015611ed8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061097a91906136b0565b611f0582611fa2565b611f515760405162461bcd60e51b815260206004820152601e60248201527f544f4b454e20444f45534e275420455849535453204f522041435449564500006044820152606401610a44565b6000828152600f6020526040908190208290555182907f1ebc57da8b3ebab98506502fbb73232ea29fbe86e4963a5a8c004810ad11190d90611f969084815260200190565b60405180910390a25050565b6000818152600f602052604081205415612019576000828152600960205260409020546001600160a01b031615801590611ffc57506000828152600e602052604081205460ff166002811115611ffa57611ffa6135c9565b145b801561097a5750506000908152600f602052604090205442111590565b6000828152600960205260409020546001600160a01b03161580159061097a57506000828152600e602052604081205460ff16600281111561205d5761205d6135c9565b1492915050565b6000818152600b6020526040902080546001600160a01b0319166001600160a01b038416908117909155819061209982611322565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60006120dd8261256a565b61213e5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610a44565b600061214983611322565b9050806001600160a01b0316846001600160a01b0316141561217b57600754600160a01b900460ff161591505061097a565b836001600160a01b031661218e84610a8f565b6001600160a01b031614806121c857506001600160a01b038082166000908152600c602090815260408083209388168352929052205460ff165b806121e657506121e6600080516020613867833981519152856117d0565b91505061097a565b826001600160a01b031661220182611322565b6001600160a01b03161461224f5760405162461bcd60e51b815260206004820152601560248201527424a721a7a92922a1aa102a27a5a2a71027aba722a960591b6044820152606401610a44565b6001600160a01b0382166122a55760405162461bcd60e51b815260206004820152601860248201527f5452414e5346455220544f205a45524f204144445245535300000000000000006044820152606401610a44565b6122b0600082612064565b6001600160a01b0383166000908152601060205260409020548114156122f7576001600160a01b038084166000908152601060205260408082208290559184168152208190555b6001600160a01b0383166000908152600a602052604081208054600192906123209084906136e3565b90915550506001600160a01b0382166000908152600a6020526040812080546001929061234e9084906136fa565b909155505060008181526009602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6123b982826117d0565b610fdb576123d1816001600160a01b03166014612c5c565b6123dc836020612c5c565b6040516020016123ed929190613712565b60408051601f198184030181529082905262461bcd60e51b8252610a449160040161316c565b61241d82826117d0565b610fdb5760008281526001602081815260408084206001600160a01b0386168552909152909120805460ff19169091179055612457611e74565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b600280546001600160a01b0319166001600160a01b0383169081179091556040517f5e4a30f4224898dbac86adca855a5edd3b8341a3aeb2b6ff0f0b5a82c013b65a90600090a250565b6124ef82826117d0565b15610fdb5760008281526001602090815260408083206001600160a01b03851684529091529020805460ff19169055612526611e74565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b6000908152600960205260409020546001600160a01b0316151590565b600061259282611322565b905061259f600083612064565b6000828152600e60209081526040808320805460ff19169055600f8252808320839055600d909152902080546125d490613501565b1590506125f2576000828152600d602052604081206125f291613096565b6125fb826126b8565b6001600160a01b038116600090815260106020526040902054821415612635576001600160a01b0381166000908152601060205260408120555b6001600160a01b0381166000908152600a6020526040812080546001929061265e9084906136e3565b909155505060008281526009602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b6000818152600360205260408082208290555160008051602061384783398151915291610d2091849190918252602082015260400190565b6126f981612df8565b6000828152600360209081526040918290208390558151848152908101839052600080516020613847833981519152910160405180910390a15050565b600082815260036020526040812054908282175b905061275581612df8565b600084815260036020908152604091829020839055815186815290810183905260008051602061384783398151915291015b60405180910390a150505050565b60008281526003602052604081205490600160ff84161b19821661274a565b6127bd8161256a565b6128005760405162461bcd60e51b8152602060048201526014602482015273544f4b454e20444f45534e27542045584953545360601b6044820152606401610a44565b60016000828152600e602052604090205460ff166002811115612825576128256135c9565b146128655760405162461bcd60e51b815260206004820152601060248201526f2a27a5a2a7102727aa10232927ad22a760811b6044820152606401610a44565b6000818152600e6020526040808220805460ff191690555182917fe2babfd5e77285a3c3dbc4b25592cbe4a7a26e97a7ac63067a22ebdaa9b82add91a250565b600254604080516326bc72ad60e11b815290516000926001600160a01b031691634d78e55a916004808301926020929190829003018186803b1580156128ea57600080fd5b505afa1580156128fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129229190613787565b6000838152600360205260409020549091508181168015610c9e5760008481526003602090815260409182902060001994851884179094189384905581518681529081018490526000805160206138478339815191529101612787565b6001600160a01b0384166129a55760405162461bcd60e51b8152600401610a449061368a565b6129ae8361256a565b156129f25760405162461bcd60e51b8152602060048201526014602482015273544f4b454e20414c52454144592045584953545360601b6044820152606401610a44565b6001600160a01b0384166000908152600a60205260408120805460019290612a1b9084906136fa565b9091555050600083815260096020908152604080832080546001600160a01b0319166001600160a01b03891690811790915583526010909152902054612a77576001600160a01b03841660009081526010602052604090208390555b8115612a8f576000838152600f602052604090208290555b8015612a9f57612a9f83826126f0565b60405183906001600160a01b038616906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a450505050565b612ae88484846121ee565b612af484848484612ebb565b610c9e5760405162461bcd60e51b815260206004820152602a60248201527f5452414e5346455220544f204e4f4e204552433732315265636569766572204960448201526926a82622a6a2a72a22a960b11b6064820152608401610a44565b612b5c81611fa2565b612bb35760405162461bcd60e51b815260206004820152602260248201527f544f4b454e20444f45534e275420455849535453204f52204e4f542041435449604482015261564560f01b6064820152608401610a44565b6000818152600e6020526040808220805460ff191660011790555182917f779fbee689bbd6f006ecb329206d35c7db7380f9837a8826fb8dc5cfcd3d33dd91a250565b600082815260036020908152604091829020805460001980821860ff871617189182905583518681529283018290529290916000805160206138478339815191529101612787565b60008281526003602052604081205490600160ff84161b821761274a565b60606000612c6b8360026137a0565b612c769060026136fa565b67ffffffffffffffff811115612c8e57612c8e6131fb565b6040519080825280601f01601f191660200182016040528015612cb8576020820181803683370190505b509050600360fc1b81600081518110612cd357612cd36137bf565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110612d0257612d026137bf565b60200101906001600160f81b031916908160001a9053506000612d268460026137a0565b612d319060016136fa565b90505b6001811115612da9576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110612d6557612d656137bf565b1a60f81b828281518110612d7b57612d7b6137bf565b60200101906001600160f81b031916908160001a90535060049490941c93612da2816137d5565b9050612d34565b5083156119ec5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610a44565b6002546040805163243da6a760e01b815290516000926001600160a01b03169163243da6a7916004808301926020929190829003018186803b158015612e3d57600080fd5b505afa158015612e51573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e759190613787565b90508181178114610fdb5760405162461bcd60e51b815260206004820152601060248201526f554e535550504f52544544204249545360801b6044820152606401610a44565b60006001600160a01b0384163b1561112957836001600160a01b031663150b7a02612ee4611e74565b8786866040518563ffffffff1660e01b8152600401612f0694939291906137ec565b602060405180830381600087803b158015612f2057600080fd5b505af1925050508015612f50575060408051601f3d908101601f19168201909252612f4d91810190613829565b60015b612ff5573d808015612f7e576040519150601f19603f3d011682016040523d82523d6000602084013e612f83565b606091505b508051612fed5760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b6064820152608401610a44565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050949350505050565b82805461301e90613501565b90600052602060002090601f0160209004810192826130405760008555613086565b82601f1061305957805160ff1916838001178555613086565b82800160010185558215613086579182015b8281111561308657825182559160200191906001019061306b565b506130929291506130cc565b5090565b5080546130a290613501565b6000825580601f106130b2575050565b601f016020900490600052602060002090810190610f4e91905b5b8082111561309257600081556001016130cd565b6001600160e01b031981168114610f4e57600080fd5b60006020828403121561310957600080fd5b81356119ec816130e1565b60005b8381101561312f578181015183820152602001613117565b83811115610c9e5750506000910152565b60008151808452613158816020860160208601613114565b601f01601f19169290920160200192915050565b6020815260006119ec6020830184613140565b6000806040838503121561319257600080fd5b50508035926020909101359150565b6000602082840312156131b357600080fd5b5035919050565b6001600160a01b0381168114610f4e57600080fd5b600080604083850312156131e257600080fd5b82356131ed816131ba565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff8084111561322c5761322c6131fb565b604051601f8501601f19908116603f01168101908282118183101715613254576132546131fb565b8160405280935085815286868601111561326d57600080fd5b858560208301376000602087830101525050509392505050565b6000806040838503121561329a57600080fd5b82359150602083013567ffffffffffffffff8111156132b857600080fd5b8301601f810185136132c957600080fd5b6132d885823560208401613211565b9150509250929050565b6000806000606084860312156132f757600080fd5b8335613302816131ba565b92506020840135613312816131ba565b929592945050506040919091013590565b6000806040838503121561333657600080fd5b823591506020830135613348816131ba565b809150509250929050565b60006020828403121561336557600080fd5b81356119ec816131ba565b6000806040838503121561338357600080fd5b82359150602083013560ff8116811461334857600080fd5b8015158114610f4e57600080fd5b600080604083850312156133bc57600080fd5b82356133c7816131ba565b915060208301356133488161339b565b600080600080608085870312156133ed57600080fd5b84356133f8816131ba565b966020860135965060408601359560600135945092505050565b6000806000806080858703121561342857600080fd5b8435613433816131ba565b93506020850135613443816131ba565b925060408501359150606085013567ffffffffffffffff81111561346657600080fd5b8501601f8101871361347757600080fd5b61348687823560208401613211565b91505092959194509250565b6001600160a01b038616815260ff8516602082015260a0604082018190526000906134bf90830186613140565b606083019490945250608001529392505050565b600080604083850312156134e657600080fd5b82356134f1816131ba565b91506020830135613348816131ba565b600181811c9082168061351557607f821691505b6020821081141561353657634e487b7160e01b600052602260045260246000fd5b50919050565b60208082526012908201527126aaa9aa1021229023a0aa22a5a2a2a822a960711b604082015260600190565b60208082526010908201526f212620a1a5a624a9aa22a2102aa9a2a960811b604082015260600190565b6020808252601d908201527f544f4b454e20444f45534e2754204558495354204f522046524f5a454e000000604082015260600190565b634e487b7160e01b600052602160045260246000fd5b6000602082840312156135f157600080fd5b81516119ec816131ba565b6020808252602b908201527f4e4f54204944454e544954592e434f4d2041444d494e204e4f5220544f4b454e60408201526a1021a7a72a2927a62622a960a91b606082015260800190565b60208082526023908201527f4d53472e53454e444552204e4f54204f574e4552204e4f5220474154454b45456040820152622822a960e91b606082015260800190565b6020808252600c908201526b5a45524f204144445245535360a01b604082015260600190565b6000602082840312156136c257600080fd5b81516119ec8161339b565b634e487b7160e01b600052601160045260246000fd5b6000828210156136f5576136f56136cd565b500390565b6000821982111561370d5761370d6136cd565b500190565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161374a816017850160208801613114565b7001034b99036b4b9b9b4b733903937b6329607d1b601791840191820152835161377b816028840160208801613114565b01602801949350505050565b60006020828403121561379957600080fd5b5051919050565b60008160001904831182151516156137ba576137ba6136cd565b500290565b634e487b7160e01b600052603260045260246000fd5b6000816137e4576137e46136cd565b506000190190565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061381f90830184613140565b9695505050505050565b60006020828403121561383b57600080fd5b81516119ec816130e156fe5e07998cef9cea674942c66f0ea7b0bce89ab9473ce240cc93d616c3491f8aeb3c63e605be3290ab6b04cfc46c6e1516e626d43236b034f09d7ede1d017beb0c449b0a7e0acc0a95c71947cb19fdd122b42abca9bdfbd6707ca4f1e3fdaef05ea2646970667358221220f0f0c8c61e554e15a820d8c62ad57c71e796b2609bdccb6715833c069364f85e64736f6c63430008090033fca69b310bd19d275687ebe00b254b0772cf7a367c3f81a9a5a433f831fdc1dc3c63e605be3290ab6b04cfc46c6e1516e626d43236b034f09d7ede1d017beb0c449b0a7e0acc0a95c71947cb19fdd122b42abca9bdfbd6707ca4f1e3fdaef05ea2646970667358221220b20bf5c35d9487b2701b84e5f828f44867d07dc7da330a3d03c590b38c53703464736f6c63430008090033",
  "devdoc": {
    "details": "Gateway Token Controller contract is responsible for managing Identity.com KYC gateway token set of smart contracts Contract handles multiple levels of access such as Network Authority (may represent a specific regulator body)  Gatekeepers (Identity.com network parties who can mint/burn/freeze gateway tokens) and overall system Admin who can add new Network Authorities",
    "kind": "dev",
    "methods": {
      "acceptTransfersBatch(address[])": {
        "details": "Accepts owner's transfers for specified gateway tokens",
        "params": {
          "tokens": "Gateway Token contracts address array"
        }
      },
      "addNetworkAuthorities(address,address[])": {
        "details": "Triggers to add multiple network authorities in gateway token contract. ",
        "params": {
          "authorities": "Network Authorities array",
          "token": "Gateway Token contract address"
        }
      },
      "blacklist(address)": {
        "details": "Blacklists specified `user` completely, user can't get KYC verification on any gateway token networks.",
        "params": {
          "user": "Address to blacklist."
        }
      },
      "blacklistBatch(address[])": {
        "details": "Blacklist multiple `users`, user can't get KYC verification on any gateway token networks.",
        "params": {
          "users": "User addresses to blacklist."
        }
      },
      "constructor": {
        "details": "Gateway Token Controller contract constructor.  Grants admin role to contract deployer"
      },
      "createGatekeeperNetwork(string,string,bool,address,address)": {
        "details": "Deploys new Gateway Token and save address at gatewayTokens address set.",
        "params": {
          "_name": "Gateway Token name",
          "_symbol": "Gateway Token symbol"
        }
      },
      "isBlacklisted(address)": {
        "details": "Checks if specified `user` blacklisted completely.  If user blacklisted gateway token clients not able to verify identity,  and gatekeepers have to burn tokens owned by blacklisted users.",
        "params": {
          "user": "Address to check."
        }
      },
      "removeNetworkAuthorities(address,address[])": {
        "details": "Triggers to remove multiple network authorities in gateway token contract. ",
        "params": {
          "authorities": "Network Authorities array",
          "token": "Gateway Token contract address"
        }
      },
      "restrictTransfersBatch(address[])": {
        "details": "Restricts owner's transfers for specified gateway tokens",
        "params": {
          "tokens": "Gateway Token contracts address array"
        }
      },
      "transferAdmin(address)": {
        "details": "Transfers Gateway Token system admin access in case Identity.com changes the main management address",
        "params": {
          "newAdmin": "Address to transfer admin role for."
        }
      }
    },
    "stateVariables": {
      "identityAdmin": {
        "details": "Triggers to get Identity.com System Admin"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addNetworkAuthorities(address,address[])": {
        "notice": "Only triggered by identityAdmin"
      },
      "blacklist(address)": {
        "notice": "Once user is blacklisted there is no way to whitelist, please use this function carefully."
      },
      "blacklistBatch(address[])": {
        "notice": "Once user is blacklisted there is no way to whitelist, please use this function carefully."
      },
      "removeNetworkAuthorities(address,address[])": {
        "notice": "Only triggered by identityAdmin"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4336,
        "contract": "contracts/GatewayTokenController.sol:GatewayTokenController",
        "label": "gatewayTokens",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(AddressSet)1487_storage"
      },
      {
        "astId": 4339,
        "contract": "contracts/GatewayTokenController.sol:GatewayTokenController",
        "label": "identityAdmin",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 4341,
        "contract": "contracts/GatewayTokenController.sol:GatewayTokenController",
        "label": "flagsStorage",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 4345,
        "contract": "contracts/GatewayTokenController.sol:GatewayTokenController",
        "label": "_isBlacklisted",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)1487_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 1486,
            "contract": "contracts/GatewayTokenController.sol:GatewayTokenController",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)1186_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)1186_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 1181,
            "contract": "contracts/GatewayTokenController.sol:GatewayTokenController",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 1185,
            "contract": "contracts/GatewayTokenController.sol:GatewayTokenController",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}