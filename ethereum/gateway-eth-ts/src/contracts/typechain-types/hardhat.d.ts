/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "AccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControl__factory>;
    getContractFactory(
      name: "IAccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccessControl__factory>;
    getContractFactory(
      name: "MinimalForwarder",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MinimalForwarder__factory>;
    getContractFactory(
      name: "IERC721Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Metadata__factory>;
    getContractFactory(
      name: "IERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721__factory>;
    getContractFactory(
      name: "IERC721Receiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Receiver__factory>;
    getContractFactory(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "FlagsStorage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FlagsStorage__factory>;
    getContractFactory(
      name: "Forwarder",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Forwarder__factory>;
    getContractFactory(
      name: "GatewayToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GatewayToken__factory>;
    getContractFactory(
      name: "GatewayTokenController",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GatewayTokenController__factory>;
    getContractFactory(
      name: "IERC721Expirable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Expirable__factory>;
    getContractFactory(
      name: "IERC721Freezeble",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Freezeble__factory>;
    getContractFactory(
      name: "IERC721Revokable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Revokable__factory>;
    getContractFactory(
      name: "IFlagsStorage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFlagsStorage__factory>;
    getContractFactory(
      name: "IGatewayToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IGatewayToken__factory>;
    getContractFactory(
      name: "IGatewayTokenController",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IGatewayTokenController__factory>;
    getContractFactory(
      name: "IGatewayTokenVerifier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IGatewayTokenVerifier__factory>;
    getContractFactory(
      name: "MultiERC2771Context",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MultiERC2771Context__factory>;
    getContractFactory(
      name: "TokenBitMask",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TokenBitMask__factory>;

    getContractAt(
      name: "AccessControl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControl>;
    getContractAt(
      name: "IAccessControl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccessControl>;
    getContractAt(
      name: "MinimalForwarder",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MinimalForwarder>;
    getContractAt(
      name: "IERC721Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Metadata>;
    getContractAt(
      name: "IERC721",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721>;
    getContractAt(
      name: "IERC721Receiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Receiver>;
    getContractAt(
      name: "ERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165>;
    getContractAt(
      name: "IERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "FlagsStorage",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FlagsStorage>;
    getContractAt(
      name: "Forwarder",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Forwarder>;
    getContractAt(
      name: "GatewayToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GatewayToken>;
    getContractAt(
      name: "GatewayTokenController",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GatewayTokenController>;
    getContractAt(
      name: "IERC721Expirable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Expirable>;
    getContractAt(
      name: "IERC721Freezeble",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Freezeble>;
    getContractAt(
      name: "IERC721Revokable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Revokable>;
    getContractAt(
      name: "IFlagsStorage",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IFlagsStorage>;
    getContractAt(
      name: "IGatewayToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IGatewayToken>;
    getContractAt(
      name: "IGatewayTokenController",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IGatewayTokenController>;
    getContractAt(
      name: "IGatewayTokenVerifier",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IGatewayTokenVerifier>;
    getContractAt(
      name: "MultiERC2771Context",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MultiERC2771Context>;
    getContractAt(
      name: "TokenBitMask",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TokenBitMask>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
