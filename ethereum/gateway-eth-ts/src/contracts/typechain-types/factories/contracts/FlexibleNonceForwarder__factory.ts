/* Autogenerated file. Do not edit manually. */
// @ts-nocheck
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  FlexibleNonceForwarder,
  FlexibleNonceForwarderInterface,
} from "../../contracts/FlexibleNonceForwarder";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_blockAgeTolerance",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "signer",
        type: "address",
      },
      {
        internalType: "address",
        name: "expectedSigner",
        type: "address",
      },
    ],
    name: "FlexibleNonceForwarder__InvalidSigner",
    type: "error",
  },
  {
    inputs: [],
    name: "FlexibleNonceForwarder__TxAlreadySeen",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "blockNumber",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "blockAgeTolerance",
        type: "uint256",
      },
    ],
    name: "FlexibleNonceForwarder__TxTooOld",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    name: "ForwardResult",
    type: "event",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "from",
            type: "address",
          },
          {
            internalType: "address",
            name: "to",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "value",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "gas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
        ],
        internalType: "struct IForwarder.ForwardRequest",
        name: "req",
        type: "tuple",
      },
      {
        internalType: "bytes",
        name: "signature",
        type: "bytes",
      },
    ],
    name: "execute",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
    ],
    name: "getNonce",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x61014060405234801561001157600080fd5b50604051610df4380380610df483398101604081905261003091610142565b604080518082018252601681527f466c657869626c654e6f6e6365466f7277617264657200000000000000000000602080830191825283518085019094526005845264302e302e3160d81b908401528151902060e08190527fae209a0b48f21c054280f2455d32cf309387644879d9acbd8ffc1991638118856101008190524660a0529192917f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f6101268184846040805160208101859052908101839052606081018290524660808201523060a082015260009060c0016040516020818303038152906040528051906020012090509392505050565b6080523060c0526101205250506001600055505060025561015b565b60006020828403121561015457600080fd5b5051919050565b60805160a05160c05160e0516101005161012051610c4a6101aa60003960006106f901526000610748015260006107230152600061067c015260006106a6015260006106d00152610c4a6000f3fe6080604052600436106100295760003560e01c80632d0335ab1461002e57806347153f8214610077575b600080fd5b34801561003a57600080fd5b506100646100493660046109e2565b6001600160a01b031660009081526001602052604090205490565b6040519081526020015b60405180910390f35b61008a610085366004610a12565b610098565b60405161006e929190610ae1565b600060606100a46101c7565b6100af858585610226565b6000806100c260408801602089016109e2565b6001600160a01b0316606088013560408901356100e260a08b018b610b1d565b6100ef60208d018d6109e2565b60405160200161010193929190610b64565b60408051601f198184030181529082905261011b91610b8a565b600060405180830381858888f193505050503d8060008114610159576040519150601f19603f3d011682016040523d82523d6000602084013e61015e565b606091505b509092509050610173603f6060890135610ba6565b5a1161017b57fe5b60405182151581527fed0603e97c834a591ced7b3c6ce727a087f9d1748098dc815b12a2516993d68c9060200160405180910390a190925090506101bf6001600055565b935093915050565b6002600054141561021f5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b6002600055565b600061033883838080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061033292507fdd8f4b70b0f4393e889bd39128a30628a78b61816a9eb8199759e7a349657e489150610295905060208901896109e2565b6102a560408a0160208b016109e2565b60408a013560608b013560808c01356102c160a08e018e610b1d565b6040516102cf929190610bc8565b6040805191829003822060208301989098526001600160a01b0396871690820152949093166060850152608084019190915260a083015260c082015260e081019190915261010001604051602081830303815290604052805190602001206105f7565b9061064b565b905061034760208501856109e2565b6001600160a01b0316816001600160a01b031614610399578061036d60208601866109e2565b604051635e4cf60960e11b81526001600160a01b03928316600482015291166024820152604401610216565b6080840135600160006103af60208801886109e2565b6001600160a01b031681526020810191909152604001600020541415610442576103de60808501356001610bd8565b600160006103ef60208801886109e2565b6001600160a01b031681526020808201929092526040016000908120929092554391600191610420908801886109e2565b6001600160a01b03168152602081019190915260400160002060010155610574565b6001600061045360208701876109e2565b6001600160a01b03166001600160a01b03168152602001908152602001600020600201600085608001358152602001908152602001600020600001838360405161049e929190610bc8565b9081526040519081900360200190205460ff16156104cf57604051630c3294e760e41b815260040160405180910390fd5b6002544390600160006104e560208901896109e2565b6001600160a01b03166001600160a01b03168152602001908152602001600020600101546105139190610bd8565b1015610574576001600061052a60208701876109e2565b6001600160a01b03166001600160a01b03168152602001908152602001600020600101546002546040516264f5c360e21b8152600401610216929190918252602082015260400190565b600180600061058660208801886109e2565b6001600160a01b03166001600160a01b0316815260200190815260200160002060020160008660800135815260200190815260200160002060000184846040516105d1929190610bc8565b908152604051908190036020019020805491151560ff1990921691909117905550505050565b600061064561060461066f565b8360405161190160f01b6020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b92915050565b600080600061065a8585610796565b91509150610667816107dc565b509392505050565b6000306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161480156106c857507f000000000000000000000000000000000000000000000000000000000000000046145b156106f257507f000000000000000000000000000000000000000000000000000000000000000090565b50604080517f00000000000000000000000000000000000000000000000000000000000000006020808301919091527f0000000000000000000000000000000000000000000000000000000000000000828401527f000000000000000000000000000000000000000000000000000000000000000060608301524660808301523060a0808401919091528351808403909101815260c0909201909252805191012090565b6000808251604114156107cd5760208301516040840151606085015160001a6107c187828585610928565b945094505050506107d5565b506000905060025b9250929050565b60008160048111156107f0576107f0610bfe565b14156107f95750565b600181600481111561080d5761080d610bfe565b14156108565760405162461bcd60e51b815260206004820152601860248201527745434453413a20696e76616c6964207369676e617475726560401b6044820152606401610216565b600281600481111561086a5761086a610bfe565b14156108b85760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610216565b60038160048111156108cc576108cc610bfe565b14156109255760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610216565b50565b6000806fa2a8918ca85bafe22016d0b997e4df60600160ff1b0383111561095557506000905060036109d9565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa1580156109a9573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166109d2576000600192509250506109d9565b9150600090505b94509492505050565b6000602082840312156109f457600080fd5b81356001600160a01b0381168114610a0b57600080fd5b9392505050565b600080600060408486031215610a2757600080fd5b833567ffffffffffffffff80821115610a3f57600080fd5b9085019060c08288031215610a5357600080fd5b90935060208501359080821115610a6957600080fd5b818601915086601f830112610a7d57600080fd5b813581811115610a8c57600080fd5b876020828501011115610a9e57600080fd5b6020830194508093505050509250925092565b60005b83811015610acc578181015183820152602001610ab4565b83811115610adb576000848401525b50505050565b82151581526040602082015260008251806040840152610b08816060850160208701610ab1565b601f01601f1916919091016060019392505050565b6000808335601e19843603018112610b3457600080fd5b83018035915067ffffffffffffffff821115610b4f57600080fd5b6020019150368190038213156107d557600080fd5b8284823760609190911b6bffffffffffffffffffffffff19169101908152601401919050565b60008251610b9c818460208701610ab1565b9190910192915050565b600082610bc357634e487b7160e01b600052601260045260246000fd5b500490565b8183823760009101908152919050565b60008219821115610bf957634e487b7160e01b600052601160045260246000fd5b500190565b634e487b7160e01b600052602160045260246000fdfea2646970667358221220af775f2fcedd8be7a8d9870aa5aee198522a7c9a9360cf5f8de4ecd15b37ed3164736f6c63430008090033";

type FlexibleNonceForwarderConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: FlexibleNonceForwarderConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class FlexibleNonceForwarder__factory extends ContractFactory {
  constructor(...args: FlexibleNonceForwarderConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _blockAgeTolerance: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<FlexibleNonceForwarder> {
    return super.deploy(
      _blockAgeTolerance,
      overrides || {}
    ) as Promise<FlexibleNonceForwarder>;
  }
  override getDeployTransaction(
    _blockAgeTolerance: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_blockAgeTolerance, overrides || {});
  }
  override attach(address: string): FlexibleNonceForwarder {
    return super.attach(address) as FlexibleNonceForwarder;
  }
  override connect(signer: Signer): FlexibleNonceForwarder__factory {
    return super.connect(signer) as FlexibleNonceForwarder__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): FlexibleNonceForwarderInterface {
    return new utils.Interface(_abi) as FlexibleNonceForwarderInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): FlexibleNonceForwarder {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as FlexibleNonceForwarder;
  }
}
