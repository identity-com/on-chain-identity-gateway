/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface IFlagsStorageInterface extends utils.Interface {
  functions: {
    "addFlag(bytes32,uint8)": FunctionFragment;
    "addFlags(bytes32[],uint8[])": FunctionFragment;
    "daoController()": FunctionFragment;
    "flagIndexes(bytes32)": FunctionFragment;
    "isFlagSupported(bytes32)": FunctionFragment;
    "isFlagsSupported(bytes32[])": FunctionFragment;
    "removeFlag(bytes32)": FunctionFragment;
    "removeFlags(bytes32[])": FunctionFragment;
    "supportedFlagsMask()": FunctionFragment;
    "unsupportedFlagsMask()": FunctionFragment;
    "updateDAOManager(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addFlag"
      | "addFlags"
      | "daoController"
      | "flagIndexes"
      | "isFlagSupported"
      | "isFlagsSupported"
      | "removeFlag"
      | "removeFlags"
      | "supportedFlagsMask"
      | "unsupportedFlagsMask"
      | "updateDAOManager"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addFlag",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "addFlags",
    values: [PromiseOrValue<BytesLike>[], PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "daoController",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "flagIndexes",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "isFlagSupported",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "isFlagsSupported",
    values: [PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "removeFlag",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeFlags",
    values: [PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "supportedFlagsMask",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "unsupportedFlagsMask",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateDAOManager",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "addFlag", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addFlags", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "daoController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "flagIndexes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isFlagSupported",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isFlagsSupported",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "removeFlag", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeFlags",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportedFlagsMask",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unsupportedFlagsMask",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateDAOManager",
    data: BytesLike
  ): Result;

  events: {
    "DAOControllerUpdated(address,address)": EventFragment;
    "FlagAdded(bytes32,uint8)": EventFragment;
    "FlagRemoved(bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DAOControllerUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FlagAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FlagRemoved"): EventFragment;
}

export interface DAOControllerUpdatedEventObject {
  prevDAOController: string;
  daoController: string;
}
export type DAOControllerUpdatedEvent = TypedEvent<
  [string, string],
  DAOControllerUpdatedEventObject
>;

export type DAOControllerUpdatedEventFilter =
  TypedEventFilter<DAOControllerUpdatedEvent>;

export interface FlagAddedEventObject {
  flag: string;
  index: number;
}
export type FlagAddedEvent = TypedEvent<[string, number], FlagAddedEventObject>;

export type FlagAddedEventFilter = TypedEventFilter<FlagAddedEvent>;

export interface FlagRemovedEventObject {
  flag: string;
}
export type FlagRemovedEvent = TypedEvent<[string], FlagRemovedEventObject>;

export type FlagRemovedEventFilter = TypedEventFilter<FlagRemovedEvent>;

export interface IFlagsStorage extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IFlagsStorageInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addFlag(
      _flag: PromiseOrValue<BytesLike>,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addFlags(
      _flags: PromiseOrValue<BytesLike>[],
      _indexes: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    daoController(overrides?: CallOverrides): Promise<[string]>;

    flagIndexes(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    isFlagSupported(
      _flag: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isFlagsSupported(
      _flags: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<[boolean[]]>;

    removeFlag(
      _flag: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeFlags(
      _flags: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supportedFlagsMask(overrides?: CallOverrides): Promise<[BigNumber]>;

    unsupportedFlagsMask(overrides?: CallOverrides): Promise<[BigNumber]>;

    updateDAOManager(
      _newDAOController: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  addFlag(
    _flag: PromiseOrValue<BytesLike>,
    _index: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addFlags(
    _flags: PromiseOrValue<BytesLike>[],
    _indexes: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  daoController(overrides?: CallOverrides): Promise<string>;

  flagIndexes(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<number>;

  isFlagSupported(
    _flag: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isFlagsSupported(
    _flags: PromiseOrValue<BytesLike>[],
    overrides?: CallOverrides
  ): Promise<boolean[]>;

  removeFlag(
    _flag: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeFlags(
    _flags: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supportedFlagsMask(overrides?: CallOverrides): Promise<BigNumber>;

  unsupportedFlagsMask(overrides?: CallOverrides): Promise<BigNumber>;

  updateDAOManager(
    _newDAOController: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addFlag(
      _flag: PromiseOrValue<BytesLike>,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    addFlags(
      _flags: PromiseOrValue<BytesLike>[],
      _indexes: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    daoController(overrides?: CallOverrides): Promise<string>;

    flagIndexes(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<number>;

    isFlagSupported(
      _flag: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isFlagsSupported(
      _flags: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<boolean[]>;

    removeFlag(
      _flag: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeFlags(
      _flags: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    supportedFlagsMask(overrides?: CallOverrides): Promise<BigNumber>;

    unsupportedFlagsMask(overrides?: CallOverrides): Promise<BigNumber>;

    updateDAOManager(
      _newDAOController: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "DAOControllerUpdated(address,address)"(
      prevDAOController?: PromiseOrValue<string> | null,
      daoController?: PromiseOrValue<string> | null
    ): DAOControllerUpdatedEventFilter;
    DAOControllerUpdated(
      prevDAOController?: PromiseOrValue<string> | null,
      daoController?: PromiseOrValue<string> | null
    ): DAOControllerUpdatedEventFilter;

    "FlagAdded(bytes32,uint8)"(
      flag?: PromiseOrValue<BytesLike> | null,
      index?: null
    ): FlagAddedEventFilter;
    FlagAdded(
      flag?: PromiseOrValue<BytesLike> | null,
      index?: null
    ): FlagAddedEventFilter;

    "FlagRemoved(bytes32)"(
      flag?: PromiseOrValue<BytesLike> | null
    ): FlagRemovedEventFilter;
    FlagRemoved(
      flag?: PromiseOrValue<BytesLike> | null
    ): FlagRemovedEventFilter;
  };

  estimateGas: {
    addFlag(
      _flag: PromiseOrValue<BytesLike>,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addFlags(
      _flags: PromiseOrValue<BytesLike>[],
      _indexes: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    daoController(overrides?: CallOverrides): Promise<BigNumber>;

    flagIndexes(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isFlagSupported(
      _flag: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isFlagsSupported(
      _flags: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeFlag(
      _flag: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeFlags(
      _flags: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supportedFlagsMask(overrides?: CallOverrides): Promise<BigNumber>;

    unsupportedFlagsMask(overrides?: CallOverrides): Promise<BigNumber>;

    updateDAOManager(
      _newDAOController: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addFlag(
      _flag: PromiseOrValue<BytesLike>,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addFlags(
      _flags: PromiseOrValue<BytesLike>[],
      _indexes: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    daoController(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    flagIndexes(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isFlagSupported(
      _flag: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isFlagsSupported(
      _flags: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeFlag(
      _flag: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeFlags(
      _flags: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supportedFlagsMask(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unsupportedFlagsMask(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateDAOManager(
      _newDAOController: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
