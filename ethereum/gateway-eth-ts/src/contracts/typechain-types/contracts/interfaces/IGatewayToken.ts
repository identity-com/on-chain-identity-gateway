/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface IGatewayTokenInterface extends utils.Interface {
  functions: {
    "addNetworkAuthority(address)": FunctionFragment;
    "allowTransfers()": FunctionFragment;
    "daoManager()": FunctionFragment;
    "getToken(uint256)": FunctionFragment;
    "getTokenId(address)": FunctionFragment;
    "getTokenState(uint256)": FunctionFragment;
    "isDAOGoverned()": FunctionFragment;
    "isGatekeeper(address)": FunctionFragment;
    "isNetworkAuthority(address)": FunctionFragment;
    "removeNetworkAuthority(address)": FunctionFragment;
    "setDefaultTokenId(address,uint256)": FunctionFragment;
    "stopTransfers()": FunctionFragment;
    "transferDAOManager(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addNetworkAuthority"
      | "allowTransfers"
      | "daoManager"
      | "getToken"
      | "getTokenId"
      | "getTokenState"
      | "isDAOGoverned"
      | "isGatekeeper"
      | "isNetworkAuthority"
      | "removeNetworkAuthority"
      | "setDefaultTokenId"
      | "stopTransfers"
      | "transferDAOManager"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addNetworkAuthority",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "allowTransfers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "daoManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getToken",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenId",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenState",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isDAOGoverned",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isGatekeeper",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isNetworkAuthority",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeNetworkAuthority",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setDefaultTokenId",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "stopTransfers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferDAOManager",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "addNetworkAuthority",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowTransfers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "daoManager", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getTokenId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTokenState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isDAOGoverned",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isGatekeeper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isNetworkAuthority",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeNetworkAuthority",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDefaultTokenId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stopTransfers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferDAOManager",
    data: BytesLike
  ): Result;

  events: {
    "DAOManagerTransfered(address,address)": EventFragment;
    "TransfersAccepted(address)": EventFragment;
    "TransfersRestricted(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DAOManagerTransfered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransfersAccepted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransfersRestricted"): EventFragment;
}

export interface DAOManagerTransferedEventObject {
  previousDAOManager: string;
  newDAOManager: string;
}
export type DAOManagerTransferedEvent = TypedEvent<
  [string, string],
  DAOManagerTransferedEventObject
>;

export type DAOManagerTransferedEventFilter =
  TypedEventFilter<DAOManagerTransferedEvent>;

export interface TransfersAcceptedEventObject {
  account: string;
}
export type TransfersAcceptedEvent = TypedEvent<
  [string],
  TransfersAcceptedEventObject
>;

export type TransfersAcceptedEventFilter =
  TypedEventFilter<TransfersAcceptedEvent>;

export interface TransfersRestrictedEventObject {
  account: string;
}
export type TransfersRestrictedEvent = TypedEvent<
  [string],
  TransfersRestrictedEventObject
>;

export type TransfersRestrictedEventFilter =
  TypedEventFilter<TransfersRestrictedEvent>;

export interface IGatewayToken extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IGatewayTokenInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addNetworkAuthority(
      authority: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    allowTransfers(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    daoManager(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getToken(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, number, string, BigNumber, BigNumber] & {
        owner: string;
        state: number;
        identity: string;
        expiration: BigNumber;
        bitmask: BigNumber;
      }
    >;

    getTokenId(
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getTokenState(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number] & { state: number }>;

    isDAOGoverned(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isGatekeeper(
      gatekeeper: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isNetworkAuthority(
      authority: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeNetworkAuthority(
      authority: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setDefaultTokenId(
      owner: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stopTransfers(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferDAOManager(
      newManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  addNetworkAuthority(
    authority: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  allowTransfers(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  daoManager(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getToken(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, number, string, BigNumber, BigNumber] & {
      owner: string;
      state: number;
      identity: string;
      expiration: BigNumber;
      bitmask: BigNumber;
    }
  >;

  getTokenId(
    owner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getTokenState(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<number>;

  isDAOGoverned(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isGatekeeper(
    gatekeeper: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isNetworkAuthority(
    authority: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeNetworkAuthority(
    authority: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setDefaultTokenId(
    owner: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stopTransfers(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferDAOManager(
    newManager: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addNetworkAuthority(
      authority: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    allowTransfers(overrides?: CallOverrides): Promise<boolean>;

    daoManager(overrides?: CallOverrides): Promise<string>;

    getToken(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, number, string, BigNumber, BigNumber] & {
        owner: string;
        state: number;
        identity: string;
        expiration: BigNumber;
        bitmask: BigNumber;
      }
    >;

    getTokenId(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenState(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<number>;

    isDAOGoverned(overrides?: CallOverrides): Promise<boolean>;

    isGatekeeper(
      gatekeeper: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isNetworkAuthority(
      authority: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    removeNetworkAuthority(
      authority: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setDefaultTokenId(
      owner: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    stopTransfers(overrides?: CallOverrides): Promise<boolean>;

    transferDAOManager(
      newManager: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "DAOManagerTransfered(address,address)"(
      previousDAOManager?: null,
      newDAOManager?: null
    ): DAOManagerTransferedEventFilter;
    DAOManagerTransfered(
      previousDAOManager?: null,
      newDAOManager?: null
    ): DAOManagerTransferedEventFilter;

    "TransfersAccepted(address)"(account?: null): TransfersAcceptedEventFilter;
    TransfersAccepted(account?: null): TransfersAcceptedEventFilter;

    "TransfersRestricted(address)"(
      account?: null
    ): TransfersRestrictedEventFilter;
    TransfersRestricted(account?: null): TransfersRestrictedEventFilter;
  };

  estimateGas: {
    addNetworkAuthority(
      authority: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    allowTransfers(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    daoManager(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getToken(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenId(
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getTokenState(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isDAOGoverned(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isGatekeeper(
      gatekeeper: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isNetworkAuthority(
      authority: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeNetworkAuthority(
      authority: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setDefaultTokenId(
      owner: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stopTransfers(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferDAOManager(
      newManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addNetworkAuthority(
      authority: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    allowTransfers(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    daoManager(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getToken(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenId(
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getTokenState(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isDAOGoverned(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isGatekeeper(
      gatekeeper: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isNetworkAuthority(
      authority: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeNetworkAuthority(
      authority: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setDefaultTokenId(
      owner: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stopTransfers(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferDAOManager(
      newManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
