{
  "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "admin",
          "type": "address"
        }
      ],
      "name": "AdminTransfered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "Blacklisted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "users",
          "type": "address[]"
        }
      ],
      "name": "BlacklistedBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "deployer",
          "type": "address"
        }
      ],
      "name": "GatekeeperNetworkCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "TransfersAcceptedBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "TransfersRestrictedBatch",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        }
      ],
      "name": "acceptTransfersBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "authorities",
          "type": "address[]"
        }
      ],
      "name": "addNetworkAuthorities",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "blacklist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "users",
          "type": "address[]"
        }
      ],
      "name": "blacklistBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        }
      ],
      "name": "createGatekeeperNetwork",
      "outputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "identityAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "isBlacklisted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "authorities",
          "type": "address[]"
        }
      ],
      "name": "removeNetworkAuthorities",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        }
      ],
      "name": "restrictTransfersBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "transferAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xe10d62a41c85c491faf0dfe2b519f667d9d874bbdae4aa9fbc8ce341aa99c7eb",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "transactionIndex": 0,
    "gasUsed": "3410011",
    "logsBloom": "0x
    "blockHash": "0xd67499c1327de1c6fd26bbf32f36937550339cd9d80ab24f576355f76f676d80",
    "transactionHash": "0xe10d62a41c85c491faf0dfe2b519f667d9d874bbdae4aa9fbc8ce341aa99c7eb",
    "logs": [],
    "blockNumber": 1,
    "cumulativeGasUsed": "3410011",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "68273a145db016064e86539e8d62f89e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"AdminTransfered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"Blacklisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"}],\"name\":\"BlacklistedBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"deployer\",\"type\":\"address\"}],\"name\":\"GatekeeperNetworkCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"TransfersAcceptedBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"TransfersRestrictedBatch\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"acceptTransfersBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"authorities\",\"type\":\"address[]\"}],\"name\":\"addNetworkAuthorities\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"blacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"}],\"name\":\"blacklistBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"createGatekeeperNetwork\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"identityAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"isBlacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"authorities\",\"type\":\"address[]\"}],\"name\":\"removeNetworkAuthorities\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"restrictTransfersBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"transferAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Gateway Token Controller contract is responsible for managing Identity.com KYC gateway token set of smart contracts Contract handles multiple levels of access such as Network Authority (may represent a specific regulator body)  Gatekeepers (Identity.com network parties who can mint/burn/freeze gateway tokens) and overall system Admin who can add new Network Authorities\",\"kind\":\"dev\",\"methods\":{\"acceptTransfersBatch(address[])\":{\"details\":\"Accepts owner's transfers for specified gateway tokens\",\"params\":{\"tokens\":\"Gateway Token contracts address array\"}},\"addNetworkAuthorities(address,address[])\":{\"details\":\"Triggers to add multiple network authorities in gateway token contract. \",\"params\":{\"authorities\":\"Network Authorities array\",\"token\":\"Gateway Token contract address\"}},\"blacklist(address)\":{\"details\":\"Blacklists specified `user` completely, user can't get KYC verification on any gateway token networks.\",\"params\":{\"user\":\"Address to blacklist.\"}},\"blacklistBatch(address[])\":{\"details\":\"Blacklist multiple `users`, user can't get KYC verification on any gateway token networks.\",\"params\":{\"users\":\"User addresses to blacklist.\"}},\"constructor\":{\"details\":\"Gateway Token Controller contract constructor.  Grants admin role to contract deployer\"},\"createGatekeeperNetwork(string,string)\":{\"details\":\"Deploys new Gateway Token and save address at gatewayTokens address set.\",\"params\":{\"_name\":\"Gateway Token name\",\"_symbol\":\"Gateway Token symbol\"}},\"isBlacklisted(address)\":{\"details\":\"Checks if specified `user` blacklisted completely.  If user blacklisted gateway token clients not able to verify identity,  and gatekeepers have to burn tokens owned by blacklisted users.\",\"params\":{\"user\":\"Address to check.\"}},\"removeNetworkAuthorities(address,address[])\":{\"details\":\"Triggers to remove multiple network authorities in gateway token contract. \",\"params\":{\"authorities\":\"Network Authorities array\",\"token\":\"Gateway Token contract address\"}},\"restrictTransfersBatch(address[])\":{\"details\":\"Restricts owner's transfers for specified gateway tokens\",\"params\":{\"tokens\":\"Gateway Token contracts address array\"}},\"transferAdmin(address)\":{\"details\":\"Transfers Gateway Token system admin access in case Identity.com changes the main management address\",\"params\":{\"newAdmin\":\"Address to transfer admin role for.\"}}},\"stateVariables\":{\"identityAdmin\":{\"details\":\"Triggers to get Identity.com System Admin\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addNetworkAuthorities(address,address[])\":{\"notice\":\"Only triggered by identityAdmin\"},\"blacklist(address)\":{\"notice\":\"Once user is blacklisted there is no way to whitelist, please use this function carefully.\"},\"blacklistBatch(address[])\":{\"notice\":\"Once user is blacklisted there is no way to whitelist, please use this function carefully.\"},\"removeNetworkAuthorities(address,address[])\":{\"notice\":\"Only triggered by identityAdmin\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/GatewayTokenController.sol\":\"GatewayTokenController\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n    function grantRole(bytes32 role, address account) external;\\n    function revokeRole(bytes32 role, address account) external;\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping (address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping (bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId\\n            || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if(!hasRole(role, account)) {\\n            revert(string(abi.encodePacked(\\n                \\\"AccessControl: account \\\",\\n                Strings.toHexString(uint160(account), 20),\\n                \\\" is missing role \\\",\\n                Strings.toHexString(uint256(role), 32)\\n            )));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, getRoleAdmin(role), adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x98fac37221212c8f126f198d262a4df86394bd1a9969f61e40739fe8ac013dd8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n      * - `from` cannot be the zero address.\\n      * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0xc1c941ad1e580b4623007305921efe2f26fc7320a4edc226234dd707c658a428\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x96877bb2eb8ca360e949ee1bd77b47a14e92e42f79897c350f088f87a3c231d4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xb8d11e77eb1ed34a33720edb551d7d6a6b0eee2bfaa40a7024020e1fdf879b16\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x069b2631bb5b5193a58ccf7a06266c7361bd2c20095667af4402817605627f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant alphabet = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = alphabet[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x456e9b3a2bfe189b5249857f624f4139e59331db518483b456c4e587a20552e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0x4878ef6c288f4cef3c2a288d32cc548c648831cc55503ad3d9a581ed3b93aad9\",\"license\":\"MIT\"},\"contracts/GatewayToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport \\\"./interfaces/IERC721Freezeble.sol\\\";\\nimport \\\"./interfaces/IGatewayToken.sol\\\";\\nimport \\\"./interfaces/IGatewayTokenController.sol\\\";\\nimport \\\"./interfaces/IERC721Expirable.sol\\\";\\n\\n/**\\n * @dev Gateway Token contract is responsible for managing Identity.com KYC gateway tokens \\n * those tokens represent completed KYC with attached identity. \\n * Gateway tokens using ERC721 standard with custom extentions.\\n *\\n * Contract handles multiple levels of access such as Network Authority (may represent a specific regulator body) \\n * Gatekeepers (Identity.com network parties who can mint/burn/freeze gateway tokens) and overall system Admin who can add\\n * new Gatekeepers and Network Authorities\\n */\\ncontract GatewayToken is ERC165, AccessControl, IERC721, IERC721Metadata, IERC721Freezeble, IERC721Expirable, IGatewayToken {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Gateway Token name\\n    string public override name;\\n\\n    // Gateway Token symbol\\n    string public override symbol;\\n\\n    // Gateway Token controller contract address\\n    address public controller;\\n    address public deployer;\\n\\n    // Gateway token transfer restrictions\\n    bool public isTransfersRestricted;\\n\\n    // Access control roles\\n    bytes32 public constant GATEWAY_TOKEN_CONTROLLER = keccak256(\\\"GATEWAY_TOKEN_CONTROLLER\\\");\\n    bytes32 public constant GATEKEEPER_ROLE = keccak256(\\\"GATEKEEPER_ROLE\\\");\\n    bytes32 public constant NETWORK_AUTHORITY_ROLE = keccak256(\\\"NETWORK_AUTHORITY_ROLE\\\");\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping (address => mapping (address => bool)) private _operatorApprovals;\\n\\n    // Mapping from token ID to freeze param\\n    mapping(uint256 => bool) private _isFreezed;\\n\\n    // Optional mapping for gateway token Identities (via TokenURI)\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    // Optional Mapping from token ID to expiration date\\n    mapping(uint256 => uint256) private _expirations;\\n\\n    // @dev Modifier to prevent calls from anyone except Identity.com Admin\\n    modifier onlyIdentityAdmin() {\\n        require(msg.sender == IGatewayTokenController(controller).identityAdmin());\\n        _;\\n    }\\n\\n    // @dev Modifier to prevent calls for blacklisted users\\n    modifier onlyNonBlacklistedUser(address user) {\\n        require(!_isBlacklisted(user), \\\"BLACKLISTED USER\\\");\\n        _;\\n    }\\n\\n    // @dev Modifier to make a function callable only when token transfers not restricted.\\n    modifier whenTransfersNotRestricted() {\\n        require(!transfersRestricted(), \\\"TRANSFERS RESTRICTED\\\");\\n        _;\\n    }\\n\\n    // @dev Modifier to make a function callable only when token transfers restricted.\\n    modifier whenTransfersRestricted() {\\n        require(transfersRestricted(), \\\"TRANSFERS NOT RESTRICTED\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Gateway Token constructor initializes the contract by \\n     * setting a `name` and a `symbol` to the gateway token.\\n     *\\n     * Initiates gateway token roles with main system admin `GATEWAY_TOKEN_CONTROLLER`,\\n     * `NETWORK_AUTHORITY_ROLE` responsible for adding/removing Gatekeepers and \\n     * `GATEKEEPER_ROLE` responsible for minting/burning/transfering tokens\\n     */\\n    constructor(string memory _name, string memory _symbol, address _deployer) public {\\n        name = _name;\\n        symbol = _symbol;\\n        controller = _msgSender();\\n        isTransfersRestricted = true;\\n        deployer = _deployer;\\n\\n        _setupRole(GATEWAY_TOKEN_CONTROLLER, _msgSender());\\n\\n        _setupRole(NETWORK_AUTHORITY_ROLE, deployer);\\n        _setRoleAdmin(NETWORK_AUTHORITY_ROLE, GATEWAY_TOKEN_CONTROLLER);\\n\\n        _setupRole(GATEKEEPER_ROLE, deployer);\\n        _setRoleAdmin(GATEKEEPER_ROLE, NETWORK_AUTHORITY_ROLE);\\n    }\\n\\n    /**\\n     * @dev Returns true if gateway token owner transfers reestricted, and false otherwise.\\n     */\\n    function transfersRestricted() public view virtual returns (bool) {\\n        return isTransfersRestricted;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165, AccessControl) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n    * @dev Triggers to check total amount of gateway tokens hold by specific address. \\n    * @param owner Token owner address\\n    */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ZERO ADDRESS\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n    * @dev Triggers to get owner for specific gateway token\\n    * @param tokenId Gateway token id\\n    */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ZERO ADDRESS\\\");\\n        return owner;\\n    }\\n\\n    /**\\n    * @dev Triggers to get identity attached to specific gateway token\\n    * @param tokenId Gateway token id\\n    */\\n    function getIdentity(uint256 tokenId) public view virtual returns (string memory) {\\n        return tokenURI(tokenId);\\n    }\\n\\n    /**\\n    * @dev Triggers to get tokenURI attached to specificied `tokenId`\\n    * @param tokenId Gateway token id\\n    */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"TOKEN DOESN'T EXIST OR FREEZED\\\");\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n\\n        return _tokenURI;\\n    }\\n\\n    /**\\n    * @dev Triggers to attach identity string to specific gateway token\\n    * @param tokenId Gateway token id\\n    * @param tokenURI Gateway token identity in a form of TokenURI\\n    *\\n    * @notice Only executable by gatekeepers\\n    */\\n    function setTokenURI(uint256 tokenId, string memory tokenURI) public virtual {\\n        require(hasRole(GATEKEEPER_ROLE, _msgSender()), \\\"MUST BE GATEKEEPER\\\");\\n        require(_existsAndActive(tokenId), \\\"TOKEN DOESN'T EXIST OR FREEZED\\\");\\n        address tokenOwner = ownerOf(tokenId);\\n        require(!_isBlacklisted(tokenOwner), \\\"BLACKLISTED USER\\\");\\n\\n        _tokenURIs[tokenId] = tokenURI;\\n    }\\n\\n    /**\\n    * @dev Triggered by external contract to verify if `tokenId` and token `owner` are correct.\\n    *\\n    * Checks if token exists in gateway token contract, `tokenId` still active, and not expired.\\n    * Performs additional checks to verify that `owner` is not blacklisted globally.\\n    */\\n    function verifyToken(uint256 tokenId, address owner) external view virtual returns (bool) {\\n        if(!_existsAndActive(tokenId)) return false;\\n        address tokenOwner = ownerOf(tokenId);\\n        if (tokenOwner != owner) return false;\\n        bool _blacklisted = _isBlacklisted(owner);\\n        if(_blacklisted) return false;\\n\\n        return true;\\n    }\\n\\n    /**\\n    * @dev Returns whether `tokenId` exists.\\n    *\\n    * Tokens start existing when they are minted (`_mint`),\\n    * pause when they are freezed (`_freeze`), and \\n    * stop existing when they are burned (`_burn`).\\n    */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n    * @dev Returns whether `tokenId` exists and not freezed.\\n    */\\n    function _existsAndActive(uint256 tokenId) internal view virtual returns (bool) {\\n        if (_expirations[tokenId] != 0) {\\n            return _owners[tokenId] != address(0) && !_isFreezed[tokenId] && block.timestamp <= _expirations[tokenId];\\n        } else {\\n            return _owners[tokenId] != address(0) && !_isFreezed[tokenId];\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ownerOf(tokenId);\\n        if (spender == owner) {\\n            return !transfersRestricted();\\n        } else {\\n            return (getApproved(tokenId) == spender || isApprovedForAll(owner, spender) || hasRole(GATEKEEPER_ROLE, spender));\\n        }\\n    }\\n\\n    /**\\n    * @dev Triggers to request token ownership transfer\\n    * @param to Address to transfer token ownership\\n    * @param tokenId Gateway token id\\n    *\\n    * @notice Only executable by token owner\\n    */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = GatewayToken.ownerOf(tokenId);\\n        require(to != owner, \\\"INCORRECT APPROVE DESTINATION\\\");\\n        require(_msgSender() == owner, \\\"INCORRECT OWNER\\\");\\n        require(!_isBlacklisted(owner), \\\"BLACKLISTED USER\\\");\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_existsAndActive(tokenId), \\\"TOKEN DOESN'T EXIST\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"INCORRECT APPROVE\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"MSG.SENDER NOT OWNER NOR GATEKEEPER\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"MSG.SENDER NOT OWNER NOR GATEKEEPER\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"TRANSFER TO NON ERC721Receiver IMPLEMENTER\\\");\\n    }\\n\\n    /**\\n    * @dev Triggers to burn gateway token\\n    * @param tokenId Gateway token id\\n    */\\n    function burn(uint256 tokenId) public virtual {\\n        //solhint-disable-next-line max-line-length\\n        require(hasRole(GATEKEEPER_ROLE, _msgSender()), \\\"MUST BE GATEKEEPER\\\");\\n\\n        _burn(tokenId);\\n    }\\n\\n    /**\\n    * @dev Triggers to mint gateway token\\n    * @param tokenId Gateway token id\\n    */\\n    function mint(address to, uint256 tokenId) public virtual onlyNonBlacklistedUser(to) {\\n        //solhint-disable-next-line max-line-length\\n        require(hasRole(GATEKEEPER_ROLE, _msgSender()), \\\"MUST BE GATEKEEPER\\\");\\n\\n        _mint(to, tokenId);\\n    }\\n\\n    /**\\n    * @dev Triggers to freeze gateway token\\n    * @param tokenId Gateway token id\\n    */\\n    function freeze(uint256 tokenId) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(hasRole(GATEKEEPER_ROLE, _msgSender()), \\\"MUST BE GATEKEEPER\\\");\\n        address tokenOwner = ownerOf(tokenId);\\n        require(!_isBlacklisted(tokenOwner), \\\"BLACKLISTED USER\\\");\\n\\n        _freeze(tokenId);\\n    }\\n\\n    /**\\n    * @dev Triggers to unfreeze gateway token\\n    * @param tokenId Gateway token id\\n    */\\n    function unfreeze(uint256 tokenId) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(hasRole(GATEKEEPER_ROLE, _msgSender()), \\\"MUST BE GATEKEEPER\\\");\\n        address tokenOwner = ownerOf(tokenId);\\n        require(!_isBlacklisted(tokenOwner), \\\"BLACKLISTED USER\\\");\\n\\n        _unfreeze(tokenId);\\n    }\\n\\n\\n    /**\\n    * @dev Triggers to get specificied `tokenId` expiration timestamp\\n    * @param tokenId Gateway token id\\n    */\\n    function expiration(uint256 tokenId) public view virtual override returns (uint256) {\\n        require(_exists(tokenId), \\\"TOKEN DOESN'T EXIST OR FREEZED\\\");\\n        uint256 _expiration = _expirations[tokenId];\\n\\n        return _expiration;\\n    }\\n\\n    /**\\n    * @dev Triggers to set expiration for tokenId\\n    * @param tokenId Gateway token id\\n    */\\n    function setExpiration(uint256 tokenId, uint256 timestamp) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(hasRole(GATEKEEPER_ROLE, _msgSender()), \\\"MUST BE GATEKEEPER\\\");\\n        address tokenOwner = ownerOf(tokenId);\\n        require(!_isBlacklisted(tokenOwner), \\\"BLACKLISTED USER\\\");\\n\\n        _setExpiration(tokenId, timestamp);\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ZERO ADDRESS\\\");\\n        require(!_exists(tokenId), \\\"TOKEN ALREADY EXISTS\\\");\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = GatewayToken.ownerOf(tokenId);\\n\\n        // Clear all state associated with `tokenId`\\n        _approve(address(0), tokenId);\\n        delete _isFreezed[tokenId];\\n        delete _expirations[tokenId];\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n    * @dev Freezes `tokenId` and it's usage by gateway token owner.\\n    *\\n    * Emits a {Freeze} event.\\n    */\\n    function _freeze(uint256 tokenId) internal virtual {\\n        require(_existsAndActive(tokenId), \\\"TOKEN DOESN'T EXISTS OR NOT ACTIVE\\\");\\n\\n        _isFreezed[tokenId] = true;\\n\\n        emit Freeze(tokenId);\\n    }\\n\\n    /**\\n    * @dev Unfreezes `tokenId` and it's usage by gateway token owner.\\n    *\\n    * Emits a {Unfreeze} event.\\n    */\\n    function _unfreeze(uint256 tokenId) internal virtual {\\n        require(_exists(tokenId), \\\"TOKEN DOESN'T EXISTS\\\");\\n        require(_isFreezed[tokenId], \\\"TOKEN NOT FREEZED\\\");\\n\\n        _isFreezed[tokenId] = false;\\n\\n        emit Unfreeze(tokenId);\\n    }\\n\\n    /**\\n    * @dev Sets expiration time for `tokenId`.\\n    */\\n    function _setExpiration(uint256 tokenId, uint256 timestamp) internal virtual {\\n        require(_existsAndActive(tokenId), \\\"TOKEN DOESN'T EXISTS OR ACTIVE\\\");\\n\\n        _expirations[tokenId] = timestamp;\\n        emit Expiration(tokenId, timestamp);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ownerOf(tokenId) == from, \\\"INCORRECT TOKEN OWNER\\\");\\n        require(to != address(0), \\\"TRANSFER TO ZERO ADDRESS\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(GatewayToken.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver(to).onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    function _isBlacklisted(address user) private view returns (bool) {\\n        return IGatewayTokenController(controller).isBlacklisted(user);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    // ===========  ACCESS CONTROLL SECTION ============\\n\\n    /**\\n    * @dev Triggers to add new gatekeeper into the system. \\n    * @param gatekeeper Gatekeeper address\\n    */\\n    function addGatekeeper(address gatekeeper) public virtual {\\n        grantRole(GATEKEEPER_ROLE, gatekeeper);\\n    }\\n\\n    /**\\n    * @dev Triggers to remove existing gatekeeper from gateway token. \\n    * @param gatekeeper Gatekeeper address\\n    */\\n    function removeGatekeeper(address gatekeeper) public virtual {\\n        revokeRole(GATEKEEPER_ROLE, gatekeeper);\\n    }\\n\\n    /**\\n    * @dev Triggers to add new network authority into the system. \\n    * @param authority Network Authority address\\n    *\\n    * @notice Only triggered by Identity.com Admin\\n    */\\n    function addNetworkAuthority(address authority) external virtual override returns (bool) {\\n        grantRole(NETWORK_AUTHORITY_ROLE, authority);\\n    }\\n\\n    /**\\n    * @dev Triggers to remove existing network authority from gateway token. \\n    * @param authority Network Authority address\\n    *\\n    * @notice Only triggered by Identity.com Admin\\n    */\\n    function removeNetworkAuthority(address authority) external virtual override returns (bool) {\\n        revokeRole(NETWORK_AUTHORITY_ROLE, authority);\\n    }\\n\\n    // ===========  ACCESS CONTROLL SECTION ============\\n\\n    /**\\n    * @dev Triggers to allow token transfers by token owners. \\n    *\\n    * @notice Only triggered by Identity.com Admin\\n    */\\n    function allowTransfers() external virtual override whenTransfersRestricted returns (bool) {\\n        require(hasRole(GATEWAY_TOKEN_CONTROLLER, _msgSender()), \\\"MUST BE GATEWAY TOKEN CONTROLLER\\\");\\n        isTransfersRestricted = false;\\n        emit TransfersAccepted(_msgSender());\\n\\n        return true;\\n    }\\n\\n    /**\\n    * @dev Triggers to stop token transfers by token owners. \\n    *\\n    * @notice Only triggered by Identity.com Admin\\n    */\\n    function stopTransfers() external virtual override whenTransfersNotRestricted returns (bool) {\\n        require(hasRole(GATEWAY_TOKEN_CONTROLLER, _msgSender()), \\\"MUST BE GATEWAY TOKEN CONTROLLER\\\");\\n        isTransfersRestricted = true;\\n        emit TransfersRestricted(_msgSender());\\n\\n        return true;\\n    }\\n}\",\"keccak256\":\"0x37482c4484500010510f7d2e3eed93aa5d0c119ddadccbdc4462035d34b58b08\",\"license\":\"MIT\"},\"contracts/GatewayTokenController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"./GatewayToken.sol\\\";\\nimport \\\"./interfaces/IGatewayToken.sol\\\";\\nimport \\\"./interfaces/IGatewayTokenController.sol\\\";\\n\\n/**\\n * @dev Gateway Token Controller contract is responsible for managing Identity.com KYC gateway token set of smart contracts\\n *\\n * Contract handles multiple levels of access such as Network Authority (may represent a specific regulator body) \\n * Gatekeepers (Identity.com network parties who can mint/burn/freeze gateway tokens) and overall system Admin who can add\\n * new Network Authorities\\n */\\ncontract GatewayTokenController is IGatewayTokenController {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    EnumerableSet.AddressSet private gatewayTokens;\\n    address public override identityAdmin;\\n\\n    // Mapping from user address to blacklisted boolean\\n    mapping(address => bool) private _isBlacklisted;\\n\\n    // @dev Modifier to prevent calls from anyone except Identity.com Admin\\n    modifier onlyAdmin() {\\n        require(identityAdmin == msg.sender, \\\"NOT IDENTITY_COM_ADMIN\\\");\\n        _;\\n    }\\n\\n    /**\\n    * @dev Gateway Token Controller contract constructor. \\n    * Grants admin role to contract deployer\\n    */\\n    constructor() public {\\n        identityAdmin = msg.sender;\\n    }\\n\\n    // ===========  ADMIN CONTROLL SECTION ============\\n\\n    /**\\n    * @dev Transfers Gateway Token system admin access in case Identity.com changes the main management address\\n    * @param newAdmin Address to transfer admin role for.\\n    */\\n    function transferAdmin(address newAdmin) public onlyAdmin override {\\n        identityAdmin = newAdmin;\\n\\n        emit AdminTransfered(msg.sender, newAdmin);\\n    }\\n\\n    // ===========  TOKEN MANAGEMENT SECTION ============\\n\\n    /**\\n    * @dev Accepts owner's transfers for specified gateway tokens\\n    * @param tokens Gateway Token contracts address array\\n    */\\n    function acceptTransfersBatch(address[] memory tokens) public onlyAdmin override {\\n        for (uint256 i = 0; i < tokens.length; ++i) {\\n            address token = tokens[i];\\n            require(gatewayTokens.contains(token), \\\"NOT GATEWAY TOKEN\\\");\\n            IGatewayToken gt = IGatewayToken(token);\\n\\n            require(gt.allowTransfers(), \\\"TRANSFERS NOT ALLOWED\\\");\\n        }\\n\\n        emit TransfersAcceptedBatch(tokens, msg.sender);\\n    }\\n\\n    /**\\n    * @dev Restricts owner's transfers for specified gateway tokens\\n    * @param tokens Gateway Token contracts address array\\n    */\\n    function restrictTransfersBatch(address[] memory tokens) public onlyAdmin override {\\n        for (uint256 i = 0; i < tokens.length; ++i) {\\n            address token = tokens[i];\\n            require(gatewayTokens.contains(token), \\\"NOT GATEWAY TOKEN\\\");\\n            IGatewayToken gt = IGatewayToken(token);\\n\\n            require(gt.stopTransfers(), \\\"TRANSFERS NOT ALLOWED\\\");\\n        }\\n\\n        emit TransfersRestrictedBatch(tokens, msg.sender);\\n    }\\n\\n    // ===========  USER RESTRICTIONS SECTION ============\\n\\n    /**\\n    * @dev Blacklists specified `user` completely, user can't get KYC verification on any gateway token networks.\\n    * @param user Address to blacklist.\\n    *\\n    * @notice Once user is blacklisted there is no way to whitelist, please use this function carefully.\\n    */\\n    function blacklist(address user) public onlyAdmin override {\\n        require(user != address(0), \\\"ZERO ADDRESS\\\");\\n        _isBlacklisted[user] = true;\\n\\n        emit Blacklisted(user);\\n    }\\n\\n    /**\\n    * @dev Blacklist multiple `users`, user can't get KYC verification on any gateway token networks.\\n    * @param users User addresses to blacklist.\\n    *\\n    * @notice Once user is blacklisted there is no way to whitelist, please use this function carefully.\\n    */\\n    function blacklistBatch(address[] memory users) public onlyAdmin override {\\n        for (uint256 i = 0; i < users.length; ++i) {\\n            address _user = users[i];\\n    \\n            require(_user != address(0), \\\"ZERO ADDRESS\\\");\\n            _isBlacklisted[_user] = true;\\n        }\\n\\n        emit BlacklistedBatch(users);\\n    }\\n\\n    /**\\n    * @dev Checks if specified `user` blacklisted completely. \\n    * If user blacklisted gateway token clients not able to verify identity, \\n    * and gatekeepers have to burn tokens owned by blacklisted users.\\n    *\\n    * @param user Address to check.\\n    */\\n    function isBlacklisted(address user) public view override returns (bool) {\\n        return _isBlacklisted[user];\\n    }\\n\\n    // ===========  GATEWAY TOKEN FACTORY SECTION ============\\n\\n    /**\\n    * @dev Deploys new Gateway Token and save address at gatewayTokens address set.\\n    * @param _name Gateway Token name\\n    * @param _symbol Gateway Token symbol\\n    */\\n    function createGatekeeperNetwork(string memory _name, string memory _symbol) public onlyAdmin override returns (address tokenAddress) {\\n        tokenAddress = address(new GatewayToken(_name, _symbol, msg.sender));\\n        gatewayTokens.add(tokenAddress);\\n\\n        emit GatekeeperNetworkCreated(tokenAddress, _name, _symbol, msg.sender);\\n        return tokenAddress;\\n    }\\n\\n    // ===========  ACCESS CONTROLL SECTION ============\\n\\n    /**\\n    * @dev Triggers to add multiple network authorities in gateway token contract. \\n    * @param token Gateway Token contract address\\n    * @param authorities Network Authorities array\\n    *\\n    * @notice Only triggered by identityAdmin\\n    */\\n    function addNetworkAuthorities(address token, address[] memory authorities) public onlyAdmin virtual override {\\n        require(gatewayTokens.contains(token), \\\"NOT GATEWAY TOKEN\\\");\\n        IGatewayToken gt = IGatewayToken(token);\\n\\n        for (uint256 i = 0; i < authorities.length; ++i) {\\n            address authority = authorities[i];\\n\\n            gt.addNetworkAuthority(authority);\\n        }\\n    }\\n\\n    /**\\n    * @dev Triggers to remove multiple network authorities in gateway token contract. \\n    * @param token Gateway Token contract address\\n    * @param authorities Network Authorities array\\n    *\\n    * @notice Only triggered by identityAdmin\\n    */\\n    function removeNetworkAuthorities(address token, address[] memory authorities) public onlyAdmin virtual override {\\n        require(gatewayTokens.contains(token), \\\"NOT GATEWAY TOKEN\\\");\\n        IGatewayToken gt = IGatewayToken(token);\\n\\n        for (uint256 i = 0; i < authorities.length; ++i) {\\n            address authority = authorities[i];\\n\\n            gt.removeNetworkAuthority(authority);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9ce48940655ee7dca893e8d879be7e3bf59f2efe746fd3e66db00933517f9a66\",\"license\":\"MIT\"},\"contracts/interfaces/IERC721Expirable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IERC721Expirable {\\n    /**\\n    * @dev Emitted when expiration set to `tokenId`\\n    */\\n    event Expiration(uint256 indexed tokenId, uint256 timestamp);\\n\\n    /**\\n    * @dev Triggers to freeze gateway token\\n    * @param tokenId Gateway token id\\n    */\\n    function expiration(uint256 tokenId) external view returns (uint256);\\n\\n    /**\\n    * @dev Triggers to unfreeze gateway token\\n    * @param tokenId Gateway token id\\n    * @param tokenId Expiration timestamp\\n    */\\n    function setExpiration(uint256 tokenId, uint256 timestamp) external;\\n}\",\"keccak256\":\"0x8db1e147eb1422d04a4d2734449e72450ffa8997ec92f85fd41c3f2a8daf07a5\",\"license\":\"MIT\"},\"contracts/interfaces/IERC721Freezeble.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IERC721Freezeble {\\n    /**\\n    * @dev Emitted when token freezed by gatekeeper\\n    */\\n    event Freeze(uint256 indexed tokenId);\\n\\n    /**\\n    * @dev Emitted when token unfreezed by gatekeeper\\n    */\\n    event Unfreeze(uint256 indexed tokenId);\\n\\n    /**\\n    * @dev Triggers to freeze gateway token\\n    * @param tokenId Gateway token id\\n    */\\n    function freeze(uint256 tokenId) external;\\n\\n    /**\\n    * @dev Triggers to unfreeze gateway token\\n    * @param tokenId Gateway token id\\n    */\\n    function unfreeze(uint256 tokenId) external;\\n}\",\"keccak256\":\"0x2dfb4fa07d16024f1d8bc6ca95958ef3330573ebccc1ca3190e46ab711ca1378\",\"license\":\"MIT\"},\"contracts/interfaces/IGatewayToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IGatewayToken {\\n    /**\\n    * @dev Emitted when GatewayToken allowed to transfer for token owners by `account`.\\n    */\\n    event TransfersAccepted(address account);\\n\\n    /**\\n    * @dev Emitted when GatewayToken restricted to transfer for token owners by `account`.\\n    */\\n    event TransfersRestricted(address account);\\n\\n    /**\\n    * @dev Triggers to add new network authority into the system. \\n    * @param authority Network Authority address\\n    *\\n    * @notice Only triggered by Identity.com Admin\\n    */\\n    function addNetworkAuthority(address authority) external returns (bool);\\n\\n    /**\\n    * @dev Triggers to remove existing network authority from gateway token. \\n    * @param authority Network Authority address\\n    *\\n    * @notice Only triggered by Identity.com Admin\\n    */\\n    function removeNetworkAuthority(address authority) external returns (bool);\\n\\n    /**\\n    * @dev Triggers to allow token transfers by token owners. \\n    *\\n    * @notice Only triggered by Identity.com Admin\\n    */\\n    function allowTransfers() external returns (bool);\\n\\n    /**\\n    * @dev Triggers to stop token transfers by token owners. \\n    *\\n    * @notice Only triggered by Identity.com Admin\\n    */\\n    function stopTransfers() external returns (bool);\\n}\",\"keccak256\":\"0xc16206c23f016d767f3aa5fc876573d8998e518e43758145508795ed35a4490e\",\"license\":\"MIT\"},\"contracts/interfaces/IGatewayTokenController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\n\\ninterface IGatewayTokenController {\\n    /**\\n    * @dev Emitted when Identity.com Admin transfered from `previousAdmin` to `admin`.\\n    */\\n    event AdminTransfered(address indexed previousAdmin, address indexed admin);\\n\\n    /**\\n    * @dev Emitted when new GatewayToken contract deployed with \\n    * associated `name` and `symbol` to specific `address`.\\n    */\\n    event GatekeeperNetworkCreated(address indexed tokenAddress, string name, string symbol, address deployer);\\n\\n    /**\\n    * @dev Emitted when GatewayTokens allowed to transfer for token owners by `account`.\\n    */\\n    event TransfersAcceptedBatch(address[] tokens, address account);\\n\\n    /**\\n    * @dev Emitted when GatewayTokens restricted to transfer for token owners by `account`.\\n    */\\n    event TransfersRestrictedBatch(address[] tokens, address account);\\n\\n    /**\\n    * @dev Emitted when `user` address is blocked to own tokens in any GatewayToken contract.\\n    */\\n    event Blacklisted(address indexed user);\\n\\n    /**\\n    * @dev Emitted when multiple `users` addresses is blocked to own tokens in any GatewayToken contract.\\n    */\\n    event BlacklistedBatch(address[] users);\\n\\n    /**\\n    * @dev Triggers to get Identity.com System Admin\\n    */\\n    function identityAdmin() external view returns (address);\\n\\n    /**\\n    * @dev Transfers Gateway Token system admin access in case Identity.com changes the main management address\\n    * @param newAdmin Address to transfer admin role for.\\n    */\\n    function transferAdmin(address newAdmin) external;\\n\\n    /**\\n    * @dev Accepts owner's transfers for specified gateway tokens\\n    * @param tokens Gateway Token contracts address array\\n    */\\n    function acceptTransfersBatch(address[] memory tokens) external;\\n\\n    /**\\n    * @dev Restricts owner's transfers for specified gateway tokens\\n    * @param tokens Gateway Token contracts address array\\n    */\\n    function restrictTransfersBatch(address[] memory tokens) external;\\n\\n    /**\\n    * @dev Blacklists specified `user` completely, user can't get KYC verification on any gateway token networks.\\n    * @param user Address to blacklist.\\n    *\\n    * @notice Once user is blacklisted there is no way to whitelist, please use this function carefully.\\n    */\\n    function blacklist(address user) external;\\n\\n    /**\\n    * @dev Blacklist multiple `users`, user can't get KYC verification on any gateway token networks.\\n    * @param users User addresses to blacklist.\\n    *\\n    * @notice Once user is blacklisted there is no way to whitelist, please use this function carefully.\\n    */\\n    function blacklistBatch(address[] memory users) external;\\n\\n    /**\\n    * @dev Checks if specified `user` blacklisted completely. \\n    * If user blacklisted gateway token clients not able to verify identity, \\n    * and gatekeepers have to burn tokens owned by blacklisted users.\\n    *\\n    * @param user Address to check.\\n    */\\n    function isBlacklisted(address user) external view returns (bool);\\n\\n    /**\\n    * @dev Deploys new Gateway Token and save address at gatewayTokens address set.\\n    * @param _name Gateway Token name\\n    * @param _symbol Gateway Token symbol\\n    */\\n    function createGatekeeperNetwork(string memory _name, string memory _symbol) external returns (address tokenAddress);\\n\\n    /**\\n    * @dev Triggers to add multiple network authorities in gateway token contract. \\n    * @param token Gateway Token contract address\\n    * @param authorities Network Authorities array\\n    *\\n    * @notice Only triggered by identityAdmin\\n    */\\n    function addNetworkAuthorities(address token, address[] memory authorities) external;\\n\\n    /**\\n    * @dev Triggers to remove multiple network authorities in gateway token contract. \\n    * @param token Gateway Token contract address\\n    * @param authorities Network Authorities array\\n    *\\n    * @notice Only triggered by identityAdmin\\n    */\\n    function removeNetworkAuthorities(address token, address[] memory authorities) external;\\n}\",\"keccak256\":\"0xac8ab80d1d4f5517833962b6e2b5dbc7014dbc0c68a74acfbf058b38866e6b99\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b5060043610620000ac5760003560e01c80637e889537116200006f5780637e8895371462000126578063a4e167911462000148578063f2ec3450146200015f578063f9f92be41462000176578063fe575a87146200018d57620000ac565b80630dd05e5f14620000b157806324b776c914620000ca5780635647bfa514620000e1578063726b577114620000f857806375829def146200010f575b600080fd5b620000c8620000c236600462000c7d565b620001b3565b005b620000c8620000db36600462000c7d565b62000348565b620000c8620000f236600462000c2b565b620004c9565b620000c86200010936600462000c7d565b620005fd565b620000c86200012036600462000c0e565b62000701565b620001306200077a565b6040516200013f919062000dcf565b60405180910390f35b620001306200015936600462000cde565b62000789565b620000c86200017036600462000c2b565b62000854565b620000c86200018736600462000c0e565b62000982565b620001a46200019e36600462000c0e565b62000a24565b6040516200013f919062000e24565b6002546001600160a01b03163314620001e95760405162461bcd60e51b8152600401620001e09062000e71565b60405180910390fd5b60005b8151811015620003095760008282815181106200021957634e487b7160e01b600052603260045260246000fd5b602002602001015190506200023981600062000a4690919063ffffffff16565b620002585760405162461bcd60e51b8152600401620001e09062000ef6565b6000819050806001600160a01b0316637adac0e66040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156200029957600080fd5b505af1158015620002ae573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002d4919062000cbc565b620002f35760405162461bcd60e51b8152600401620001e09062000ec7565b505080620003019062000f4e565b9050620001ec565b507f58631eee773f0fec6b0e2e8bd8eb7250c0941d22e2ac58787e3428a693745a2481336040516200033d92919062000df8565b60405180910390a150565b6002546001600160a01b03163314620003755760405162461bcd60e51b8152600401620001e09062000e71565b60005b815181101562000495576000828281518110620003a557634e487b7160e01b600052603260045260246000fd5b60200260200101519050620003c581600062000a4690919063ffffffff16565b620003e45760405162461bcd60e51b8152600401620001e09062000ef6565b6000819050806001600160a01b0316632185810b6040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156200042557600080fd5b505af11580156200043a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000460919062000cbc565b6200047f5760405162461bcd60e51b8152600401620001e09062000ec7565b5050806200048d9062000f4e565b905062000378565b507f404f02b9c73e30734207749f2fc6f5e4d1e2fba7649223798308d3a63014f4fc81336040516200033d92919062000df8565b6002546001600160a01b03163314620004f65760405162461bcd60e51b8152600401620001e09062000e71565b6200050360008362000a46565b620005225760405162461bcd60e51b8152600401620001e09062000ef6565b8160005b8251811015620005f75760008382815181106200055357634e487b7160e01b600052603260045260246000fd5b60200260200101519050826001600160a01b0316636e8d291e826040518263ffffffff1660e01b81526004016200058b919062000dcf565b602060405180830381600087803b158015620005a657600080fd5b505af1158015620005bb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620005e1919062000cbc565b505080620005ef9062000f4e565b905062000526565b50505050565b6002546001600160a01b031633146200062a5760405162461bcd60e51b8152600401620001e09062000e71565b60005b8151811015620006cf5760008282815181106200065a57634e487b7160e01b600052603260045260246000fd5b6020026020010151905060006001600160a01b0316816001600160a01b031614156200069a5760405162461bcd60e51b8152600401620001e09062000ea1565b6001600160a01b03166000908152600360205260409020805460ff19166001179055620006c78162000f4e565b90506200062d565b507fe1083d5cef2dbb8a2482660e37a8229667000029c2686255cef786c905cad3e2816040516200033d919062000de3565b6002546001600160a01b031633146200072e5760405162461bcd60e51b8152600401620001e09062000e71565b600280546001600160a01b0319166001600160a01b03831690811790915560405133907f173de3514d8508f36ce8c81d509adcd8c8c76098400f685d3042b36f9a4160c390600090a350565b6002546001600160a01b031681565b6002546000906001600160a01b03163314620007b95760405162461bcd60e51b8152600401620001e09062000e71565b828233604051620007ca9062000ae2565b620007d89392919062000e2f565b604051809103906000f080158015620007f5573d6000803e3d6000fd5b5090506200080560008262000a64565b50806001600160a01b03167ff9d549554121b54eb289ca81e131436ff67c712259c89fb3c00e36d793efeece848433604051620008459392919062000e2f565b60405180910390a25b92915050565b6002546001600160a01b03163314620008815760405162461bcd60e51b8152600401620001e09062000e71565b6200088e60008362000a46565b620008ad5760405162461bcd60e51b8152600401620001e09062000ef6565b8160005b8251811015620005f7576000838281518110620008de57634e487b7160e01b600052603260045260246000fd5b60200260200101519050826001600160a01b0316639467ac40826040518263ffffffff1660e01b815260040162000916919062000dcf565b602060405180830381600087803b1580156200093157600080fd5b505af115801562000946573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200096c919062000cbc565b5050806200097a9062000f4e565b9050620008b1565b6002546001600160a01b03163314620009af5760405162461bcd60e51b8152600401620001e09062000e71565b6001600160a01b038116620009d85760405162461bcd60e51b8152600401620001e09062000ea1565b6001600160a01b038116600081815260036020526040808220805460ff19166001179055517fffa4e6181777692565cf28528fc88fd1516ea86b56da075235fa575af6a4b8559190a250565b6001600160a01b03811660009081526003602052604090205460ff165b919050565b600062000a5d836001600160a01b03841662000a7b565b9392505050565b600062000a5d836001600160a01b03841662000a93565b60009081526001919091016020526040902054151590565b600062000aa1838362000a7b565b62000ad9575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556200084e565b5060006200084e565b612c9e8062000f8d83390190565b80356001600160a01b038116811462000a4157600080fd5b600082601f83011262000b19578081fd5b8135602067ffffffffffffffff82111562000b385762000b3862000f76565b80820262000b4882820162000f21565b83815282810190868401838801850189101562000b63578687fd5b8693505b8584101562000b905762000b7b8162000af0565b83526001939093019291840191840162000b67565b50979650505050505050565b600082601f83011262000bad578081fd5b813567ffffffffffffffff81111562000bca5762000bca62000f76565b62000bdf601f8201601f191660200162000f21565b81815284602083860101111562000bf4578283fd5b816020850160208301379081016020019190915292915050565b60006020828403121562000c20578081fd5b62000a5d8262000af0565b6000806040838503121562000c3e578081fd5b62000c498362000af0565b9150602083013567ffffffffffffffff81111562000c65578182fd5b62000c738582860162000b08565b9150509250929050565b60006020828403121562000c8f578081fd5b813567ffffffffffffffff81111562000ca6578182fd5b62000cb48482850162000b08565b949350505050565b60006020828403121562000cce578081fd5b8151801515811462000a5d578182fd5b6000806040838503121562000cf1578182fd5b823567ffffffffffffffff8082111562000d09578384fd5b62000d178683870162000b9c565b9350602085013591508082111562000d2d578283fd5b5062000c738582860162000b9c565b6000815180845260208085019450808401835b8381101562000d765781516001600160a01b03168752958201959082019060010162000d4f565b509495945050505050565b60008151808452815b8181101562000da85760208185018101518683018201520162000d8a565b8181111562000dba5782602083870101525b50601f01601f19169290920160200192915050565b6001600160a01b0391909116815260200190565b60006020825262000a5d602083018462000d3c565b60006040825262000e0d604083018562000d3c565b905060018060a01b03831660208301529392505050565b901515815260200190565b60006060825262000e44606083018662000d81565b828103602084015262000e58818662000d81565b91505060018060a01b0383166040830152949350505050565b6020808252601690820152752727aa1024a222a72a24aa2cafa1a7a6afa0a226a4a760511b604082015260600190565b6020808252600c908201526b5a45524f204144445245535360a01b604082015260600190565b6020808252601590820152741514905394d1915494c81393d50810531313d5d151605a1b604082015260600190565b6020808252601190820152702727aa1023a0aa22aba0ac902a27a5a2a760791b604082015260600190565b60405181810167ffffffffffffffff8111828210171562000f465762000f4662000f76565b604052919050565b600060001982141562000f6f57634e487b7160e01b81526011600452602481fd5b5060010190565b634e487b7160e01b600052604160045260246000fdfe60806040523480156200001157600080fd5b5060405162002c9e38038062002c9e833981016040819052620000349162000414565b825162000049906001906020860190620002c3565b5081516200005f906002906020850190620002c3565b506200006a6200019b565b600380546001600160a01b039283166001600160a01b0319918216179091556004805492841660ff60a01b19909316600160a01b17909116919091179055620000dd7f62008bd652d4fc4f29bb52084accdb2708da8852a6bcffef09cdbd58d37dc1e2620000d76200019b565b6200019f565b600454620001059060008051602062002c7e833981519152906001600160a01b03166200019f565b6200014060008051602062002c7e8339815191527f62008bd652d4fc4f29bb52084accdb2708da8852a6bcffef09cdbd58d37dc1e2620001af565b600454620001689060008051602062002c5e833981519152906001600160a01b03166200019f565b6200019260008051602062002c5e83398151915260008051602062002c7e833981519152620001af565b505050620004f0565b3390565b620001ab8282620001fb565b5050565b80620001bb8362000285565b60405184907fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff90600090a460009182526020829052604090912060010155565b6200020782826200029a565b620001ab576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055620002416200019b565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60009081526020819052604090206001015490565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b828054620002d1906200049d565b90600052602060002090601f016020900481019282620002f5576000855562000340565b82601f106200031057805160ff191683800117855562000340565b8280016001018555821562000340579182015b828111156200034057825182559160200191906001019062000323565b506200034e92915062000352565b5090565b5b808211156200034e576000815560010162000353565b600082601f8301126200037a578081fd5b81516001600160401b0380821115620003975762000397620004da565b6040516020601f8401601f1916820181018381118382101715620003bf57620003bf620004da565b6040528382528584018101871015620003d6578485fd5b8492505b83831015620003f95785830181015182840182015291820191620003da565b838311156200040a57848185840101525b5095945050505050565b60008060006060848603121562000429578283fd5b83516001600160401b038082111562000440578485fd5b6200044e8783880162000369565b9450602086015191508082111562000464578384fd5b50620004738682870162000369565b604086015190935090506001600160a01b038116811462000492578182fd5b809150509250925092565b600281046001821680620004b257607f821691505b60208210811415620004d457634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b61275e80620005006000396000f3fe608060405234801561001057600080fd5b50600436106102535760003560e01c806372dea25e11610146578063a1e08911116100c3578063d547741f11610087578063d547741f146104cd578063d5f39488146104e0578063d6fd3175146104e8578063d7a78db8146104f0578063e985e9c514610503578063f77c47911461051657610253565b8063a1e0891114610479578063a217fddf1461048c578063a22cb46514610494578063b88d4fde146104a7578063c87b56dd146104ba57610253565b8063939553671161010a578063939553671461043b5780639467ac401461044357806395d89b41146104565780639605f12f1461045e578063a1ac30171461046657610253565b806372dea25e146103f25780637adac0e6146104055780638423df791461040d57806385e3f0581461041557806391d148541461042857610253565b806336568abe116101d45780636623fc46116101985780636623fc461461039e5780636bd27471146103b15780636e8d291e146103c45780636f7caf41146103d757806370a08231146103df57610253565b806336568abe1461033f57806340c10f191461035257806342842e0e1461036557806342966c68146103785780636352211e1461038b57610253565b8063162094c41161021b578063162094c4146102de5780632185810b146102f157806323b872dd146102f9578063248a9ca31461030c5780632f2ff15d1461032c57610253565b806301ffc9a71461025857806306fdde03146102815780630703130514610296578063081812fc146102ab578063095ea7b3146102cb575b600080fd5b61026b610266366004611f08565b61051e565b60405161027891906120ab565b60405180910390f35b610289610566565b60405161027891906120bf565b6102a96102a4366004611f98565b6105f4565b005b6102be6102b9366004611ece565b610675565b604051610278919061205a565b6102a96102d9366004611e89565b6106b8565b6102a96102ec366004611f40565b61075f565b61026b610812565b6102a9610307366004611d9f565b6108d1565b61031f61031a366004611ece565b610909565b60405161027891906120b6565b6102a961033a366004611ee6565b61091e565b6102a961034d366004611ee6565b610942565b6102a9610360366004611e89565b610988565b6102a9610373366004611d9f565b6109ef565b6102a9610386366004611ece565b610a0a565b6102be610399366004611ece565b610a4c565b6102a96103ac366004611ece565b610a81565b6102a96103bf366004611d53565b610af3565b61026b6103d2366004611d53565b610b0b565b61031f610b37565b61031f6103ed366004611d53565b610b5b565b61026b610400366004611ee6565b610b9f565b61026b610c11565b61026b610cbc565b610289610423366004611ece565b610ccc565b61026b610436366004611ee6565b610cd7565b61031f610d00565b61026b610451366004611d53565b610d24565b610289610d50565b61026b610d5d565b6102a9610474366004611d53565b610d6d565b61031f610487366004611ece565b610d85565b61031f610dbf565b6102a96104a2366004611e53565b610dc4565b6102a96104b5366004611dda565b610e92565b6102896104c8366004611ece565b610ecb565b6102a96104db366004611ee6565b610f91565b6102be610fb0565b61031f610fbf565b6102a96104fe366004611ece565b610fd1565b61026b610511366004611d6d565b611043565b6102be611071565b60006001600160e01b031982166380ac58cd60e01b148061054f57506001600160e01b03198216635b5e139f60e01b145b8061055e575061055e82611080565b90505b919050565b600180546105739061267d565b80601f016020809104026020016040519081016040528092919081815260200182805461059f9061267d565b80156105ec5780601f106105c1576101008083540402835291602001916105ec565b820191906000526020600020905b8154815290600101906020018083116105cf57829003601f168201915b505050505081565b61060e6000805160206127098339815191526104366110a5565b6106335760405162461bcd60e51b815260040161062a90612350565b60405180910390fd5b600061063e83610a4c565b9050610649816110a9565b156106665760405162461bcd60e51b815260040161062a906123e1565b610670838361112a565b505050565b60006106808261119e565b61069c5760405162461bcd60e51b815260040161062a906120d2565b506000908152600760205260409020546001600160a01b031690565b60006106c382610a4c565b9050806001600160a01b0316836001600160a01b031614156106f75760405162461bcd60e51b815260040161062a90612134565b806001600160a01b03166107096110a5565b6001600160a01b03161461072f5760405162461bcd60e51b815260040161062a9061250f565b610738816110a9565b156107555760405162461bcd60e51b815260040161062a906123e1565b6106708383611242565b6107796000805160206127098339815191526104366110a5565b6107955760405162461bcd60e51b815260040161062a90612350565b61079e8261119e565b6107ba5760405162461bcd60e51b815260040161062a9061237c565b60006107c583610a4c565b90506107d0816110a9565b156107ed5760405162461bcd60e51b815260040161062a906123e1565b6000838152600a60209081526040909120835161080c92850190611bfb565b50505050565b600061081c610cbc565b6108385760405162461bcd60e51b815260040161062a9061216b565b6108647f62008bd652d4fc4f29bb52084accdb2708da8852a6bcffef09cdbd58d37dc1e26104366110a5565b6108805760405162461bcd60e51b815260040161062a906121f4565b6004805460ff60a01b191690557f3e9a3af5b34dbcee8465c0ec9f4f535cb0e3c6a44d1179ae105ced0edbc6d92e6108b66110a5565b6040516108c3919061205a565b60405180910390a150600190565b6108e26108dc6110a5565b826112b0565b6108fe5760405162461bcd60e51b815260040161062a906124a1565b610670838383611362565b60009081526020819052604090206001015490565b61092782610909565b610938816109336110a5565b61148f565b61067083836114f3565b61094a6110a5565b6001600160a01b0316816001600160a01b03161461097a5760405162461bcd60e51b815260040161062a9061259d565b6109848282611578565b5050565b81610992816110a9565b156109af5760405162461bcd60e51b815260040161062a906123e1565b6109c96000805160206127098339815191526104366110a5565b6109e55760405162461bcd60e51b815260040161062a90612350565b61067083836115fb565b61067083838360405180602001604052806000815250610e92565b610a246000805160206127098339815191526104366110a5565b610a405760405162461bcd60e51b815260040161062a90612350565b610a49816116ce565b50565b6000818152600560205260408120546001600160a01b03168061055e5760405162461bcd60e51b815260040161062a9061244d565b610a9b6000805160206127098339815191526104366110a5565b610ab75760405162461bcd60e51b815260040161062a90612350565b6000610ac282610a4c565b9050610acd816110a9565b15610aea5760405162461bcd60e51b815260040161062a906123e1565b610984826117bc565b610a496000805160206127098339815191528261091e565b60006105617f449b0a7e0acc0a95c71947cb19fdd122b42abca9bdfbd6707ca4f1e3fdaef05e83610f91565b7f449b0a7e0acc0a95c71947cb19fdd122b42abca9bdfbd6707ca4f1e3fdaef05e81565b60006001600160a01b038216610b835760405162461bcd60e51b815260040161062a9061244d565b506001600160a01b031660009081526006602052604090205490565b6000610baa8361119e565b610bb657506000610c0b565b6000610bc184610a4c565b9050826001600160a01b0316816001600160a01b031614610be6576000915050610c0b565b6000610bf1846110a9565b90508015610c0457600092505050610c0b565b6001925050505b92915050565b6000610c1b610cbc565b15610c385760405162461bcd60e51b815260040161062a906123b3565b610c647f62008bd652d4fc4f29bb52084accdb2708da8852a6bcffef09cdbd58d37dc1e26104366110a5565b610c805760405162461bcd60e51b815260040161062a906121f4565b6004805460ff60a01b1916600160a01b1790557fe4c361b3d777a0427514a30f90e63bc5728cf1365a8b12e93ae0bf113d8669be6108b66110a5565b600454600160a01b900460ff1690565b606061055e82610ecb565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b7f62008bd652d4fc4f29bb52084accdb2708da8852a6bcffef09cdbd58d37dc1e281565b60006105617f449b0a7e0acc0a95c71947cb19fdd122b42abca9bdfbd6707ca4f1e3fdaef05e8361091e565b600280546105739061267d565b600454600160a01b900460ff1681565b610a4960008051602061270983398151915282610f91565b6000610d908261184f565b610dac5760405162461bcd60e51b815260040161062a9061237c565b506000908152600b602052604090205490565b600081565b610dcc6110a5565b6001600160a01b0316826001600160a01b03161415610dfd5760405162461bcd60e51b815260040161062a90612258565b8060086000610e0a6110a5565b6001600160a01b03908116825260208083019390935260409182016000908120918716808252919093529120805460ff191692151592909217909155610e4e6110a5565b6001600160a01b03167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051610e8691906120ab565b60405180910390a35050565b610ea3610e9d6110a5565b836112b0565b610ebf5760405162461bcd60e51b815260040161062a906124a1565b61080c8484848461186c565b6060610ed68261184f565b610ef25760405162461bcd60e51b815260040161062a9061237c565b6000828152600a602052604081208054610f0b9061267d565b80601f0160208091040260200160405190810160405280929190818152602001828054610f379061267d565b8015610f845780601f10610f5957610100808354040283529160200191610f84565b820191906000526020600020905b815481529060010190602001808311610f6757829003601f168201915b5093979650505050505050565b610f9a82610909565b610fa6816109336110a5565b6106708383611578565b6004546001600160a01b031681565b60008051602061270983398151915281565b610feb6000805160206127098339815191526104366110a5565b6110075760405162461bcd60e51b815260040161062a90612350565b600061101282610a4c565b905061101d816110a9565b1561103a5760405162461bcd60e51b815260040161062a906123e1565b6109848261189f565b6001600160a01b03918216600090815260086020908152604080832093909416825291909152205460ff1690565b6003546001600160a01b031681565b60006001600160e01b03198216637965db0b60e01b148061055e575061055e82611907565b3390565b60035460405163fe575a8760e01b81526000916001600160a01b03169063fe575a87906110da90859060040161205a565b60206040518083038186803b1580156110f257600080fd5b505afa158015611106573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061055e9190611eb2565b6111338261119e565b61114f5760405162461bcd60e51b815260040161062a906122cf565b6000828152600b6020526040908190208290555182907f1ebc57da8b3ebab98506502fbb73232ea29fbe86e4963a5a8c004810ad11190d906111929084906120b6565b60405180910390a25050565b6000818152600b602052604081205415611208576000828152600560205260409020546001600160a01b0316158015906111e7575060008281526009602052604090205460ff16155b801561120157506000828152600b60205260409020544211155b9050610561565b6000828152600560205260409020546001600160a01b03161580159061120157505060008181526009602052604090205460ff1615610561565b600081815260076020526040902080546001600160a01b0319166001600160a01b038416908117909155819061127782610a4c565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60006112bb8261184f565b6112d75760405162461bcd60e51b815260040161062a90612283565b60006112e283610a4c565b9050806001600160a01b0316846001600160a01b0316141561130f57611306610cbc565b15915050610c0b565b836001600160a01b031661132284610675565b6001600160a01b0316148061133c575061133c8185611043565b8061135a575061135a60008051602061270983398151915285610cd7565b915050610c0b565b826001600160a01b031661137582610a4c565b6001600160a01b03161461139b5760405162461bcd60e51b815260040161062a90612229565b6001600160a01b0382166113c15760405162461bcd60e51b815260040161062a90612566565b6113cc838383610670565b6113d7600082611242565b6001600160a01b0383166000908152600660205260408120805460019290611400908490612623565b90915550506001600160a01b038216600090815260066020526040812080546001929061142e9084906125ec565b909155505060008181526005602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6114998282610cd7565b610984576114b1816001600160a01b03166014611920565b6114bc836020611920565b6040516020016114cd929190611fe5565b60408051601f198184030181529082905262461bcd60e51b825261062a916004016120bf565b6114fd8282610cd7565b610984576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556115346110a5565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6115828282610cd7565b15610984576000828152602081815260408083206001600160a01b03851684529091529020805460ff191690556115b76110a5565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b6001600160a01b0382166116215760405162461bcd60e51b815260040161062a9061244d565b61162a8161184f565b156116475760405162461bcd60e51b815260040161062a90612538565b6001600160a01b03821660009081526006602052604081208054600192906116709084906125ec565b909155505060008181526005602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b60006116d982610a4c565b90506116e6600083611242565b6000828152600960209081526040808320805460ff19169055600b8252808320839055600a9091529020805461171b9061267d565b159050611739576000828152600a6020526040812061173991611c7f565b6001600160a01b0381166000908152600660205260408120805460019290611762908490612623565b909155505060008281526005602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b6117c58161184f565b6117e15760405162461bcd60e51b815260040161062a90612473565b60008181526009602052604090205460ff1661180f5760405162461bcd60e51b815260040161062a906124e4565b600081815260096020526040808220805460ff191690555182917fe2babfd5e77285a3c3dbc4b25592cbe4a7a26e97a7ac63067a22ebdaa9b82add91a250565b6000908152600560205260409020546001600160a01b0316151590565b611877848484611362565b61188384848484611ad9565b61080c5760405162461bcd60e51b815260040161062a90612306565b6118a88161119e565b6118c45760405162461bcd60e51b815260040161062a9061240b565b600081815260096020526040808220805460ff191660011790555182917f779fbee689bbd6f006ecb329206d35c7db7380f9837a8826fb8dc5cfcd3d33dd91a250565b6001600160e01b031981166301ffc9a760e01b14919050565b6060600061192f836002612604565b61193a9060026125ec565b67ffffffffffffffff81111561196057634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f19166020018201604052801561198a576020820181803683370190505b509050600360fc1b816000815181106119b357634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106119f057634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053506000611a14846002612604565b611a1f9060016125ec565b90505b6001811115611ab3576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110611a6157634e487b7160e01b600052603260045260246000fd5b1a60f81b828281518110611a8557634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c93611aac81612666565b9050611a22565b508315611ad25760405162461bcd60e51b815260040161062a906120ff565b9392505050565b6000611aed846001600160a01b0316611bf5565b15611be957836001600160a01b031663150b7a02611b096110a5565b8786866040518563ffffffff1660e01b8152600401611b2b949392919061206e565b602060405180830381600087803b158015611b4557600080fd5b505af1925050508015611b75575060408051601f3d908101601f19168201909252611b7291810190611f24565b60015b611bcf573d808015611ba3576040519150601f19603f3d011682016040523d82523d6000602084013e611ba8565b606091505b508051611bc75760405162461bcd60e51b815260040161062a906121a2565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611bed565b5060015b949350505050565b3b151590565b828054611c079061267d565b90600052602060002090601f016020900481019282611c295760008555611c6f565b82601f10611c4257805160ff1916838001178555611c6f565b82800160010185558215611c6f579182015b82811115611c6f578251825591602001919060010190611c54565b50611c7b929150611cb7565b5090565b508054611c8b9061267d565b6000825580601f10611c9d5750610a49565b601f016020900490600052602060002090810190610a4991905b5b80821115611c7b5760008155600101611cb8565b600067ffffffffffffffff80841115611ce757611ce76126ce565b604051601f8501601f191681016020018281118282101715611d0b57611d0b6126ce565b604052848152915081838501861015611d2357600080fd5b8484602083013760006020868301015250509392505050565b80356001600160a01b038116811461056157600080fd5b600060208284031215611d64578081fd5b611ad282611d3c565b60008060408385031215611d7f578081fd5b611d8883611d3c565b9150611d9660208401611d3c565b90509250929050565b600080600060608486031215611db3578081fd5b611dbc84611d3c565b9250611dca60208501611d3c565b9150604084013590509250925092565b60008060008060808587031215611def578081fd5b611df885611d3c565b9350611e0660208601611d3c565b925060408501359150606085013567ffffffffffffffff811115611e28578182fd5b8501601f81018713611e38578182fd5b611e4787823560208401611ccc565b91505092959194509250565b60008060408385031215611e65578182fd5b611e6e83611d3c565b91506020830135611e7e816126e4565b809150509250929050565b60008060408385031215611e9b578182fd5b611ea483611d3c565b946020939093013593505050565b600060208284031215611ec3578081fd5b8151611ad2816126e4565b600060208284031215611edf578081fd5b5035919050565b60008060408385031215611ef8578182fd5b82359150611d9660208401611d3c565b600060208284031215611f19578081fd5b8135611ad2816126f2565b600060208284031215611f35578081fd5b8151611ad2816126f2565b60008060408385031215611f52578182fd5b82359150602083013567ffffffffffffffff811115611f6f578182fd5b8301601f81018513611f7f578182fd5b611f8e85823560208401611ccc565b9150509250929050565b60008060408385031215611faa578182fd5b50508035926020909101359150565b60008151808452611fd181602086016020860161263a565b601f01601f19169290920160200192915050565b60007f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008252835161201d81601785016020880161263a565b7001034b99036b4b9b9b4b733903937b6329607d1b601791840191820152835161204e81602884016020880161263a565b01602801949350505050565b6001600160a01b0391909116815260200190565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906120a190830184611fb9565b9695505050505050565b901515815260200190565b90815260200190565b600060208252611ad26020830184611fb9565b6020808252601390820152721513d2d153881113d154d389d50811561254d5606a1b604082015260600190565b6020808252818101527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604082015260600190565b6020808252601d908201527f494e434f525245435420415050524f56452044455354494e4154494f4e000000604082015260600190565b60208082526018908201527f5452414e5346455253204e4f5420524553545249435445440000000000000000604082015260600190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6020808252818101527f4d555354204245204741544557415920544f4b454e20434f4e54524f4c4c4552604082015260600190565b60208082526015908201527424a721a7a92922a1aa102a27a5a2a71027aba722a960591b604082015260600190565b602080825260119082015270494e434f525245435420415050524f564560781b604082015260600190565b6020808252602c908201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860408201526b34b9ba32b73a103a37b5b2b760a11b606082015260800190565b6020808252601e908201527f544f4b454e20444f45534e275420455849535453204f52204143544956450000604082015260600190565b6020808252602a908201527f5452414e5346455220544f204e4f4e204552433732315265636569766572204960408201526926a82622a6a2a72a22a960b11b606082015260800190565b60208082526012908201527126aaa9aa1021229023a0aa22a5a2a2a822a960711b604082015260600190565b6020808252601e908201527f544f4b454e20444f45534e2754204558495354204f5220465245455a45440000604082015260600190565b6020808252601490820152731514905394d1915494c8149154d5149250d5115160621b604082015260600190565b60208082526010908201526f212620a1a5a624a9aa22a2102aa9a2a960811b604082015260600190565b60208082526022908201527f544f4b454e20444f45534e275420455849535453204f52204e4f542041435449604082015261564560f01b606082015260800190565b6020808252600c908201526b5a45524f204144445245535360a01b604082015260600190565b602080825260149082015273544f4b454e20444f45534e27542045584953545360601b604082015260600190565b60208082526023908201527f4d53472e53454e444552204e4f54204f574e4552204e4f5220474154454b45456040820152622822a960e91b606082015260800190565b6020808252601190820152701513d2d153881393d50811949151569151607a1b604082015260600190565b6020808252600f908201526e24a721a7a92922a1aa1027aba722a960891b604082015260600190565b602080825260149082015273544f4b454e20414c52454144592045584953545360601b604082015260600190565b60208082526018908201527f5452414e5346455220544f205a45524f20414444524553530000000000000000604082015260600190565b6020808252602f908201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560408201526e103937b632b9903337b91039b2b63360891b606082015260800190565b600082198211156125ff576125ff6126b8565b500190565b600081600019048311821515161561261e5761261e6126b8565b500290565b600082821015612635576126356126b8565b500390565b60005b8381101561265557818101518382015260200161263d565b8381111561080c5750506000910152565b600081612675576126756126b8565b506000190190565b60028104600182168061269157607f821691505b602082108114156126b257634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b8015158114610a4957600080fd5b6001600160e01b031981168114610a4957600080fdfe3c63e605be3290ab6b04cfc46c6e1516e626d43236b034f09d7ede1d017beb0ca26469706673582212208c0394a12bd4204349bce1ac4d6c3111b4e489b98a40f29a5e08b639d4f77f2264736f6c634300080000333c63e605be3290ab6b04cfc46c6e1516e626d43236b034f09d7ede1d017beb0c449b0a7e0acc0a95c71947cb19fdd122b42abca9bdfbd6707ca4f1e3fdaef05ea2646970667358221220e7510633dd7591d2c632ba513470cf4772dd0d166880a4c6b26873a16332d0d464736f6c63430008000033",
  "devdoc": {
    "details": "Gateway Token Controller contract is responsible for managing Identity.com KYC gateway token set of smart contracts Contract handles multiple levels of access such as Network Authority (may represent a specific regulator body)  Gatekeepers (Identity.com network parties who can mint/burn/freeze gateway tokens) and overall system Admin who can add new Network Authorities",
    "kind": "dev",
    "methods": {
      "acceptTransfersBatch(address[])": {
        "details": "Accepts owner's transfers for specified gateway tokens",
        "params": {
          "tokens": "Gateway Token contracts address array"
        }
      },
      "addNetworkAuthorities(address,address[])": {
        "details": "Triggers to add multiple network authorities in gateway token contract. ",
        "params": {
          "authorities": "Network Authorities array",
          "token": "Gateway Token contract address"
        }
      },
      "blacklist(address)": {
        "details": "Blacklists specified `user` completely, user can't get KYC verification on any gateway token networks.",
        "params": {
          "user": "Address to blacklist."
        }
      },
      "blacklistBatch(address[])": {
        "details": "Blacklist multiple `users`, user can't get KYC verification on any gateway token networks.",
        "params": {
          "users": "User addresses to blacklist."
        }
      },
      "constructor": {
        "details": "Gateway Token Controller contract constructor.  Grants admin role to contract deployer"
      },
      "createGatekeeperNetwork(string,string)": {
        "details": "Deploys new Gateway Token and save address at gatewayTokens address set.",
        "params": {
          "_name": "Gateway Token name",
          "_symbol": "Gateway Token symbol"
        }
      },
      "isBlacklisted(address)": {
        "details": "Checks if specified `user` blacklisted completely.  If user blacklisted gateway token clients not able to verify identity,  and gatekeepers have to burn tokens owned by blacklisted users.",
        "params": {
          "user": "Address to check."
        }
      },
      "removeNetworkAuthorities(address,address[])": {
        "details": "Triggers to remove multiple network authorities in gateway token contract. ",
        "params": {
          "authorities": "Network Authorities array",
          "token": "Gateway Token contract address"
        }
      },
      "restrictTransfersBatch(address[])": {
        "details": "Restricts owner's transfers for specified gateway tokens",
        "params": {
          "tokens": "Gateway Token contracts address array"
        }
      },
      "transferAdmin(address)": {
        "details": "Transfers Gateway Token system admin access in case Identity.com changes the main management address",
        "params": {
          "newAdmin": "Address to transfer admin role for."
        }
      }
    },
    "stateVariables": {
      "identityAdmin": {
        "details": "Triggers to get Identity.com System Admin"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addNetworkAuthorities(address,address[])": {
        "notice": "Only triggered by identityAdmin"
      },
      "blacklist(address)": {
        "notice": "Once user is blacklisted there is no way to whitelist, please use this function carefully."
      },
      "blacklistBatch(address[])": {
        "notice": "Once user is blacklisted there is no way to whitelist, please use this function carefully."
      },
      "removeNetworkAuthorities(address,address[])": {
        "notice": "Only triggered by identityAdmin"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3050,
        "contract": "contracts/GatewayTokenController.sol:GatewayTokenController",
        "label": "gatewayTokens",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(AddressSet)1372_storage"
      },
      {
        "astId": 3053,
        "contract": "contracts/GatewayTokenController.sol:GatewayTokenController",
        "label": "identityAdmin",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 3057,
        "contract": "contracts/GatewayTokenController.sol:GatewayTokenController",
        "label": "_isBlacklisted",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)1372_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 1371,
            "contract": "contracts/GatewayTokenController.sol:GatewayTokenController",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)1097_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)1097_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 1092,
            "contract": "contracts/GatewayTokenController.sol:GatewayTokenController",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 1096,
            "contract": "contracts/GatewayTokenController.sol:GatewayTokenController",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}